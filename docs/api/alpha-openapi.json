{
  "openapi": "3.0.0",
  "info": {
    "title": "Octez Protocol alpha RPC",
    "description": "The RPC API for protocol alpha served by the Octez node.",
    "version": "Octez 21.0~rc3+dev (2cd0ffe3)"
  },
  "paths": {
    "/": {
      "get": {
        "description": "All the information about a block. The associated metadata may not be present depending on the history mode and block's distance from the head.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Supported RPC versions are version \"1\" (default)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force_metadata",
            "in": "query",
            "description": "DEPRECATED: Forces to recompute the operations metadata if it was considered as too large.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "defines the way metadata are queried Specifies whether or not if the operations metadata should be returned. To get the metadata, even if it is needed to recompute them, use \"always\". To avoid getting the metadata, use \"never\". By default, the metadata will be returned depending on the node's metadata size limit policy.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "enum": [
                        "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im"
                      ]
                    },
                    "chain_id": {
                      "$ref": "#/components/schemas/Chain_id"
                    },
                    "hash": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "header": {
                      "$ref": "#/components/schemas/raw_block_header"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/block_header_metadata"
                    },
                    "operations": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/operation"
                        }
                      }
                    }
                  },
                  "required": [
                    "protocol",
                    "chain_id",
                    "hash",
                    "header",
                    "operations"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/adaptive_issuance_launch_cycle": {
      "get": {
        "description": "Returns the cycle at which the launch of the Adaptive Issuance feature is set to happen. A result of None means that the feature is not yet set to launch.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/big_maps/{big_map_id}": {
      "get": {
        "description": "Get the (optionally paginated) list of values in a big map. Order of values is unspecified, but is guaranteed to be consistent.",
        "parameters": [
          {
            "name": "big_map_id",
            "in": "path",
            "description": "A big map identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "A non-negative integer (greater than or equal to 0). Skip the first [offset] values. Useful in combination with [length] for pagination.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "length",
            "in": "query",
            "description": "A non-negative integer (greater than or equal to 0). Only retrieve [length] values. Useful in combination with [offset] for pagination.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/big_maps/{big_map_id}/{script_expr}": {
      "get": {
        "description": "Access the value associated with a key in a big map.",
        "parameters": [
          {
            "name": "big_map_id",
            "in": "path",
            "description": "A big map identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "script_expr",
            "in": "path",
            "description": "script_expr (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/big_maps/{big_map_id}/{script_expr}/normalized": {
      "post": {
        "description": "Access the value associated with a key in a big map, normalize the output using the requested unparsing mode.",
        "parameters": [
          {
            "name": "big_map_id",
            "in": "path",
            "description": "A big map identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "script_expr",
            "in": "path",
            "description": "script_expr (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "unparsing_mode": {
                    "oneOf": [
                      {
                        "title": "Readable",
                        "type": "string",
                        "enum": [
                          "Readable"
                        ]
                      },
                      {
                        "title": "Optimized",
                        "type": "string",
                        "enum": [
                          "Optimized"
                        ]
                      },
                      {
                        "title": "Optimized_legacy",
                        "type": "string",
                        "enum": [
                          "Optimized_legacy"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "unparsing_mode"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/cache/contracts/all": {
      "get": {
        "description": "Return the list of cached contracts",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Contract_hash"
                        },
                        {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/cache/contracts/rank": {
      "post": {
        "description": "Return the number of cached contracts older than the provided contract",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "A contract handle -- originated account",
                "description": "A contract notation as given to an RPC or inside scripts. Can be a base58 originated contract hash.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/unistring"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/cache/contracts/size": {
      "get": {
        "description": "Return the size of the contract cache",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "minimum": -1073741824,
                  "maximum": 1073741823
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/cache/contracts/size_limit": {
      "get": {
        "description": "Return the size limit of the contract cache",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "minimum": -1073741824,
                  "maximum": 1073741823
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/constants": {
      "get": {
        "description": "All constants",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "proof_of_work_nonce_size": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "nonce_length": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "max_anon_ops_per_block": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "max_operation_data_length": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "max_proposals_per_delegate": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "max_micheline_node_count": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "max_micheline_bytes_limit": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "max_allowed_global_constants_depth": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "cache_layout_size": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "michelson_maximum_type_size": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "max_slashing_period": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "smart_rollup_max_wrapped_proof_binary_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_message_size_limit": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_max_number_of_messages_per_level": {
                      "$ref": "#/components/schemas/positive_bignum"
                    },
                    "consensus_rights_delay": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "blocks_preservation_cycles": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "delegate_parameters_activation_delay": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "blocks_per_cycle": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "blocks_per_commitment": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "nonce_revelation_threshold": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "cycles_per_voting_period": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "hard_gas_limit_per_operation": {
                      "$ref": "#/components/schemas/bignum"
                    },
                    "hard_gas_limit_per_block": {
                      "$ref": "#/components/schemas/bignum"
                    },
                    "proof_of_work_threshold": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "minimal_stake": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "minimal_frozen_stake": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "vdf_difficulty": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "origination_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "issuance_weights": {
                      "type": "object",
                      "properties": {
                        "base_total_issued_per_minute": {
                          "$ref": "#/components/schemas/alpha.mutez"
                        },
                        "baking_reward_fixed_portion_weight": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "baking_reward_bonus_weight": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "attesting_reward_weight": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "seed_nonce_revelation_tip_weight": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "vdf_revelation_tip_weight": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        }
                      },
                      "required": [
                        "base_total_issued_per_minute",
                        "baking_reward_fixed_portion_weight",
                        "baking_reward_bonus_weight",
                        "attesting_reward_weight",
                        "seed_nonce_revelation_tip_weight",
                        "vdf_revelation_tip_weight"
                      ]
                    },
                    "cost_per_byte": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "hard_storage_limit_per_operation": {
                      "$ref": "#/components/schemas/bignum"
                    },
                    "quorum_min": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "quorum_max": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "min_proposal_quorum": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "liquidity_baking_subsidy": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "liquidity_baking_toggle_ema_threshold": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "max_operations_time_to_live": {
                      "type": "integer",
                      "minimum": -32768,
                      "maximum": 32767
                    },
                    "minimal_block_delay": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "delay_increment_per_round": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "consensus_committee_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "consensus_threshold": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "minimal_participation_ratio": {
                      "type": "object",
                      "properties": {
                        "numerator": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "denominator": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 65535
                        }
                      },
                      "required": [
                        "numerator",
                        "denominator"
                      ]
                    },
                    "limit_of_delegation_over_baking": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "percentage_of_frozen_deposits_slashed_per_double_baking": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "percentage_of_frozen_deposits_slashed_per_double_attestation": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "max_slashing_per_block": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "max_slashing_threshold": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "testnet_dictator": {
                      "$ref": "#/components/schemas/Signature.Public_key_hash"
                    },
                    "initial_seed": {
                      "$ref": "#/components/schemas/random"
                    },
                    "cache_script_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "cache_stake_distribution_cycles": {
                      "type": "integer",
                      "minimum": -128,
                      "maximum": 127
                    },
                    "cache_sampler_state_cycles": {
                      "type": "integer",
                      "minimum": -128,
                      "maximum": 127
                    },
                    "dal_parametric": {
                      "type": "object",
                      "properties": {
                        "feature_enable": {
                          "type": "boolean"
                        },
                        "incentives_enable": {
                          "type": "boolean"
                        },
                        "number_of_slots": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "attestation_lag": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 255
                        },
                        "attestation_threshold": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 255
                        },
                        "redundancy_factor": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 255
                        },
                        "page_size": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "slot_size": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "number_of_shards": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 65535
                        }
                      },
                      "required": [
                        "feature_enable",
                        "incentives_enable",
                        "number_of_slots",
                        "attestation_lag",
                        "attestation_threshold",
                        "redundancy_factor",
                        "page_size",
                        "slot_size",
                        "number_of_shards"
                      ]
                    },
                    "smart_rollup_arith_pvm_enable": {
                      "type": "boolean"
                    },
                    "smart_rollup_origination_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_challenge_window_in_blocks": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_stake_amount": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "smart_rollup_commitment_period_in_blocks": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_max_lookahead_in_blocks": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "smart_rollup_max_active_outbox_levels": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "smart_rollup_max_outbox_messages_per_level": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_number_of_sections_in_dissection": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "smart_rollup_timeout_period_in_blocks": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_max_number_of_cemented_commitments": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_max_number_of_parallel_games": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_reveal_activation_level": {
                      "type": "object",
                      "properties": {
                        "raw_data": {
                          "type": "object",
                          "properties": {
                            "Blake2B": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 2147483647
                            }
                          },
                          "required": [
                            "Blake2B"
                          ]
                        },
                        "metadata": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 2147483647
                        },
                        "dal_page": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 2147483647
                        },
                        "dal_parameters": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 2147483647
                        },
                        "dal_attested_slots_validity_lag": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        }
                      },
                      "required": [
                        "raw_data",
                        "metadata",
                        "dal_page",
                        "dal_parameters",
                        "dal_attested_slots_validity_lag"
                      ]
                    },
                    "smart_rollup_private_enable": {
                      "type": "boolean"
                    },
                    "smart_rollup_riscv_pvm_enable": {
                      "type": "boolean"
                    },
                    "zk_rollup_enable": {
                      "type": "boolean"
                    },
                    "zk_rollup_origination_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "zk_rollup_min_pending_to_process": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "zk_rollup_max_ticket_payload_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "global_limit_of_staking_over_baking": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "edge_of_staking_over_delegation": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "adaptive_issuance_launch_ema_threshold": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "adaptive_rewards_params": {
                      "type": "object",
                      "properties": {
                        "issuance_ratio_final_min": {
                          "type": "object",
                          "properties": {
                            "numerator": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "denominator": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "numerator",
                            "denominator"
                          ]
                        },
                        "issuance_ratio_final_max": {
                          "type": "object",
                          "properties": {
                            "numerator": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "denominator": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "numerator",
                            "denominator"
                          ]
                        },
                        "issuance_ratio_initial_min": {
                          "type": "object",
                          "properties": {
                            "numerator": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "denominator": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "numerator",
                            "denominator"
                          ]
                        },
                        "issuance_ratio_initial_max": {
                          "type": "object",
                          "properties": {
                            "numerator": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "denominator": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "numerator",
                            "denominator"
                          ]
                        },
                        "initial_period": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 255
                        },
                        "transition_period": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 255
                        },
                        "max_bonus": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "growth_rate": {
                          "type": "object",
                          "properties": {
                            "numerator": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "denominator": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "numerator",
                            "denominator"
                          ]
                        },
                        "center_dz": {
                          "type": "object",
                          "properties": {
                            "numerator": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "denominator": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "numerator",
                            "denominator"
                          ]
                        },
                        "radius_dz": {
                          "type": "object",
                          "properties": {
                            "numerator": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "denominator": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "numerator",
                            "denominator"
                          ]
                        }
                      },
                      "required": [
                        "issuance_ratio_final_min",
                        "issuance_ratio_final_max",
                        "issuance_ratio_initial_min",
                        "issuance_ratio_initial_max",
                        "initial_period",
                        "transition_period",
                        "max_bonus",
                        "growth_rate",
                        "center_dz",
                        "radius_dz"
                      ]
                    },
                    "adaptive_issuance_activation_vote_enable": {
                      "type": "boolean"
                    },
                    "autostaking_enable": {
                      "type": "boolean"
                    },
                    "adaptive_issuance_force_activation": {
                      "type": "boolean"
                    },
                    "ns_enable": {
                      "type": "boolean"
                    },
                    "direct_ticket_spending_enable": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "proof_of_work_nonce_size",
                    "nonce_length",
                    "max_anon_ops_per_block",
                    "max_operation_data_length",
                    "max_proposals_per_delegate",
                    "max_micheline_node_count",
                    "max_micheline_bytes_limit",
                    "max_allowed_global_constants_depth",
                    "cache_layout_size",
                    "michelson_maximum_type_size",
                    "max_slashing_period",
                    "smart_rollup_max_wrapped_proof_binary_size",
                    "smart_rollup_message_size_limit",
                    "smart_rollup_max_number_of_messages_per_level",
                    "consensus_rights_delay",
                    "blocks_preservation_cycles",
                    "delegate_parameters_activation_delay",
                    "blocks_per_cycle",
                    "blocks_per_commitment",
                    "nonce_revelation_threshold",
                    "cycles_per_voting_period",
                    "hard_gas_limit_per_operation",
                    "hard_gas_limit_per_block",
                    "proof_of_work_threshold",
                    "minimal_stake",
                    "minimal_frozen_stake",
                    "vdf_difficulty",
                    "origination_size",
                    "issuance_weights",
                    "cost_per_byte",
                    "hard_storage_limit_per_operation",
                    "quorum_min",
                    "quorum_max",
                    "min_proposal_quorum",
                    "liquidity_baking_subsidy",
                    "liquidity_baking_toggle_ema_threshold",
                    "max_operations_time_to_live",
                    "minimal_block_delay",
                    "delay_increment_per_round",
                    "consensus_committee_size",
                    "consensus_threshold",
                    "minimal_participation_ratio",
                    "limit_of_delegation_over_baking",
                    "percentage_of_frozen_deposits_slashed_per_double_baking",
                    "percentage_of_frozen_deposits_slashed_per_double_attestation",
                    "max_slashing_per_block",
                    "max_slashing_threshold",
                    "cache_script_size",
                    "cache_stake_distribution_cycles",
                    "cache_sampler_state_cycles",
                    "dal_parametric",
                    "smart_rollup_arith_pvm_enable",
                    "smart_rollup_origination_size",
                    "smart_rollup_challenge_window_in_blocks",
                    "smart_rollup_stake_amount",
                    "smart_rollup_commitment_period_in_blocks",
                    "smart_rollup_max_lookahead_in_blocks",
                    "smart_rollup_max_active_outbox_levels",
                    "smart_rollup_max_outbox_messages_per_level",
                    "smart_rollup_number_of_sections_in_dissection",
                    "smart_rollup_timeout_period_in_blocks",
                    "smart_rollup_max_number_of_cemented_commitments",
                    "smart_rollup_max_number_of_parallel_games",
                    "smart_rollup_reveal_activation_level",
                    "smart_rollup_private_enable",
                    "smart_rollup_riscv_pvm_enable",
                    "zk_rollup_enable",
                    "zk_rollup_origination_size",
                    "zk_rollup_min_pending_to_process",
                    "zk_rollup_max_ticket_payload_size",
                    "global_limit_of_staking_over_baking",
                    "edge_of_staking_over_delegation",
                    "adaptive_issuance_launch_ema_threshold",
                    "adaptive_rewards_params",
                    "adaptive_issuance_activation_vote_enable",
                    "autostaking_enable",
                    "adaptive_issuance_force_activation",
                    "ns_enable",
                    "direct_ticket_spending_enable"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/constants/errors": {
      "get": {
        "description": "Schema for all the RPC errors from this protocol version",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/constants/parametric": {
      "get": {
        "description": "Parametric constants",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "consensus_rights_delay": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "blocks_preservation_cycles": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "delegate_parameters_activation_delay": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "blocks_per_cycle": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "blocks_per_commitment": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "nonce_revelation_threshold": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "cycles_per_voting_period": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "hard_gas_limit_per_operation": {
                      "$ref": "#/components/schemas/bignum"
                    },
                    "hard_gas_limit_per_block": {
                      "$ref": "#/components/schemas/bignum"
                    },
                    "proof_of_work_threshold": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "minimal_stake": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "minimal_frozen_stake": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "vdf_difficulty": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "origination_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "issuance_weights": {
                      "type": "object",
                      "properties": {
                        "base_total_issued_per_minute": {
                          "$ref": "#/components/schemas/alpha.mutez"
                        },
                        "baking_reward_fixed_portion_weight": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "baking_reward_bonus_weight": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "attesting_reward_weight": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "seed_nonce_revelation_tip_weight": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "vdf_revelation_tip_weight": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        }
                      },
                      "required": [
                        "base_total_issued_per_minute",
                        "baking_reward_fixed_portion_weight",
                        "baking_reward_bonus_weight",
                        "attesting_reward_weight",
                        "seed_nonce_revelation_tip_weight",
                        "vdf_revelation_tip_weight"
                      ]
                    },
                    "cost_per_byte": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "hard_storage_limit_per_operation": {
                      "$ref": "#/components/schemas/bignum"
                    },
                    "quorum_min": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "quorum_max": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "min_proposal_quorum": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "liquidity_baking_subsidy": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "liquidity_baking_toggle_ema_threshold": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "max_operations_time_to_live": {
                      "type": "integer",
                      "minimum": -32768,
                      "maximum": 32767
                    },
                    "minimal_block_delay": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "delay_increment_per_round": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "consensus_committee_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "consensus_threshold": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "minimal_participation_ratio": {
                      "type": "object",
                      "properties": {
                        "numerator": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "denominator": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 65535
                        }
                      },
                      "required": [
                        "numerator",
                        "denominator"
                      ]
                    },
                    "limit_of_delegation_over_baking": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "percentage_of_frozen_deposits_slashed_per_double_baking": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "percentage_of_frozen_deposits_slashed_per_double_attestation": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "max_slashing_per_block": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "max_slashing_threshold": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "testnet_dictator": {
                      "$ref": "#/components/schemas/Signature.Public_key_hash"
                    },
                    "initial_seed": {
                      "$ref": "#/components/schemas/random"
                    },
                    "cache_script_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "cache_stake_distribution_cycles": {
                      "type": "integer",
                      "minimum": -128,
                      "maximum": 127
                    },
                    "cache_sampler_state_cycles": {
                      "type": "integer",
                      "minimum": -128,
                      "maximum": 127
                    },
                    "dal_parametric": {
                      "type": "object",
                      "properties": {
                        "feature_enable": {
                          "type": "boolean"
                        },
                        "incentives_enable": {
                          "type": "boolean"
                        },
                        "number_of_slots": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "attestation_lag": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 255
                        },
                        "attestation_threshold": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 255
                        },
                        "redundancy_factor": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 255
                        },
                        "page_size": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "slot_size": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "number_of_shards": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 65535
                        }
                      },
                      "required": [
                        "feature_enable",
                        "incentives_enable",
                        "number_of_slots",
                        "attestation_lag",
                        "attestation_threshold",
                        "redundancy_factor",
                        "page_size",
                        "slot_size",
                        "number_of_shards"
                      ]
                    },
                    "smart_rollup_arith_pvm_enable": {
                      "type": "boolean"
                    },
                    "smart_rollup_origination_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_challenge_window_in_blocks": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_stake_amount": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "smart_rollup_commitment_period_in_blocks": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_max_lookahead_in_blocks": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "smart_rollup_max_active_outbox_levels": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "smart_rollup_max_outbox_messages_per_level": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_number_of_sections_in_dissection": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "smart_rollup_timeout_period_in_blocks": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_max_number_of_cemented_commitments": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_max_number_of_parallel_games": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "smart_rollup_reveal_activation_level": {
                      "type": "object",
                      "properties": {
                        "raw_data": {
                          "type": "object",
                          "properties": {
                            "Blake2B": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 2147483647
                            }
                          },
                          "required": [
                            "Blake2B"
                          ]
                        },
                        "metadata": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 2147483647
                        },
                        "dal_page": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 2147483647
                        },
                        "dal_parameters": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 2147483647
                        },
                        "dal_attested_slots_validity_lag": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        }
                      },
                      "required": [
                        "raw_data",
                        "metadata",
                        "dal_page",
                        "dal_parameters",
                        "dal_attested_slots_validity_lag"
                      ]
                    },
                    "smart_rollup_private_enable": {
                      "type": "boolean"
                    },
                    "smart_rollup_riscv_pvm_enable": {
                      "type": "boolean"
                    },
                    "zk_rollup_enable": {
                      "type": "boolean"
                    },
                    "zk_rollup_origination_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "zk_rollup_min_pending_to_process": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "zk_rollup_max_ticket_payload_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "global_limit_of_staking_over_baking": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "edge_of_staking_over_delegation": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "adaptive_issuance_launch_ema_threshold": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "adaptive_rewards_params": {
                      "type": "object",
                      "properties": {
                        "issuance_ratio_final_min": {
                          "type": "object",
                          "properties": {
                            "numerator": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "denominator": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "numerator",
                            "denominator"
                          ]
                        },
                        "issuance_ratio_final_max": {
                          "type": "object",
                          "properties": {
                            "numerator": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "denominator": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "numerator",
                            "denominator"
                          ]
                        },
                        "issuance_ratio_initial_min": {
                          "type": "object",
                          "properties": {
                            "numerator": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "denominator": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "numerator",
                            "denominator"
                          ]
                        },
                        "issuance_ratio_initial_max": {
                          "type": "object",
                          "properties": {
                            "numerator": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "denominator": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "numerator",
                            "denominator"
                          ]
                        },
                        "initial_period": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 255
                        },
                        "transition_period": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 255
                        },
                        "max_bonus": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "growth_rate": {
                          "type": "object",
                          "properties": {
                            "numerator": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "denominator": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "numerator",
                            "denominator"
                          ]
                        },
                        "center_dz": {
                          "type": "object",
                          "properties": {
                            "numerator": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "denominator": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "numerator",
                            "denominator"
                          ]
                        },
                        "radius_dz": {
                          "type": "object",
                          "properties": {
                            "numerator": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "denominator": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "numerator",
                            "denominator"
                          ]
                        }
                      },
                      "required": [
                        "issuance_ratio_final_min",
                        "issuance_ratio_final_max",
                        "issuance_ratio_initial_min",
                        "issuance_ratio_initial_max",
                        "initial_period",
                        "transition_period",
                        "max_bonus",
                        "growth_rate",
                        "center_dz",
                        "radius_dz"
                      ]
                    },
                    "adaptive_issuance_activation_vote_enable": {
                      "type": "boolean"
                    },
                    "autostaking_enable": {
                      "type": "boolean"
                    },
                    "adaptive_issuance_force_activation": {
                      "type": "boolean"
                    },
                    "ns_enable": {
                      "type": "boolean"
                    },
                    "direct_ticket_spending_enable": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "consensus_rights_delay",
                    "blocks_preservation_cycles",
                    "delegate_parameters_activation_delay",
                    "blocks_per_cycle",
                    "blocks_per_commitment",
                    "nonce_revelation_threshold",
                    "cycles_per_voting_period",
                    "hard_gas_limit_per_operation",
                    "hard_gas_limit_per_block",
                    "proof_of_work_threshold",
                    "minimal_stake",
                    "minimal_frozen_stake",
                    "vdf_difficulty",
                    "origination_size",
                    "issuance_weights",
                    "cost_per_byte",
                    "hard_storage_limit_per_operation",
                    "quorum_min",
                    "quorum_max",
                    "min_proposal_quorum",
                    "liquidity_baking_subsidy",
                    "liquidity_baking_toggle_ema_threshold",
                    "max_operations_time_to_live",
                    "minimal_block_delay",
                    "delay_increment_per_round",
                    "consensus_committee_size",
                    "consensus_threshold",
                    "minimal_participation_ratio",
                    "limit_of_delegation_over_baking",
                    "percentage_of_frozen_deposits_slashed_per_double_baking",
                    "percentage_of_frozen_deposits_slashed_per_double_attestation",
                    "max_slashing_per_block",
                    "max_slashing_threshold",
                    "cache_script_size",
                    "cache_stake_distribution_cycles",
                    "cache_sampler_state_cycles",
                    "dal_parametric",
                    "smart_rollup_arith_pvm_enable",
                    "smart_rollup_origination_size",
                    "smart_rollup_challenge_window_in_blocks",
                    "smart_rollup_stake_amount",
                    "smart_rollup_commitment_period_in_blocks",
                    "smart_rollup_max_lookahead_in_blocks",
                    "smart_rollup_max_active_outbox_levels",
                    "smart_rollup_max_outbox_messages_per_level",
                    "smart_rollup_number_of_sections_in_dissection",
                    "smart_rollup_timeout_period_in_blocks",
                    "smart_rollup_max_number_of_cemented_commitments",
                    "smart_rollup_max_number_of_parallel_games",
                    "smart_rollup_reveal_activation_level",
                    "smart_rollup_private_enable",
                    "smart_rollup_riscv_pvm_enable",
                    "zk_rollup_enable",
                    "zk_rollup_origination_size",
                    "zk_rollup_min_pending_to_process",
                    "zk_rollup_max_ticket_payload_size",
                    "global_limit_of_staking_over_baking",
                    "edge_of_staking_over_delegation",
                    "adaptive_issuance_launch_ema_threshold",
                    "adaptive_rewards_params",
                    "adaptive_issuance_activation_vote_enable",
                    "autostaking_enable",
                    "adaptive_issuance_force_activation",
                    "ns_enable",
                    "direct_ticket_spending_enable"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts": {
      "get": {
        "description": "All existing contracts (excluding empty implicit contracts).",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/alpha.contract_id"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}": {
      "get": {
        "description": "Access the complete status of a contract.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "normalize_types",
            "in": "query",
            "description": "Whether types should be normalized (annotations removed, combs flattened) or kept as they appeared in the original script.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "balance": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "delegate": {
                      "$ref": "#/components/schemas/Signature.Public_key_hash"
                    },
                    "script": {
                      "$ref": "#/components/schemas/alpha.scripted.contracts"
                    },
                    "counter": {
                      "$ref": "#/components/schemas/positive_bignum"
                    }
                  },
                  "required": [
                    "balance"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/all_ticket_balances": {
      "get": {
        "description": "Access the complete list of tickets owned by the given contract by scanning the contract's storage.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ticketer": {
                        "$ref": "#/components/schemas/alpha.contract_id"
                      },
                      "content_type": {
                        "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                      },
                      "content": {
                        "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                      },
                      "amount": {
                        "$ref": "#/components/schemas/positive_bignum"
                      }
                    },
                    "required": [
                      "ticketer",
                      "content_type",
                      "content",
                      "amount"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/balance": {
      "get": {
        "description": "The spendable balance of a contract (in mutez), also known as liquid balance. Corresponds to tez owned by the contract that are neither staked, nor in unstaked requests, nor in frozen bonds. Identical to the 'spendable' RPC.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/balance_and_frozen_bonds": {
      "get": {
        "description": "The sum (in mutez) of the spendable balance and frozen bonds of a contract. Corresponds to the contract's full balance from which staked funds and unstake requests have been excluded. Identical to the 'spendable_and_frozen_bonds' RPC.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/big_map_get": {
      "post": {
        "description": "Access the value associated with a key in a big map of the contract (deprecated).",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "type": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  }
                },
                "required": [
                  "key",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/counter": {
      "get": {
        "description": "Access the counter of a contract, if any.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Positive big number",
                  "description": "Decimal representation of a positive big number",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/delegate": {
      "get": {
        "description": "Access the delegate of a contract, if any.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "A Ed25519, Secp256k1, P256, or BLS public key hash (Base58Check-encoded)",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/unistring"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/entrypoints": {
      "get": {
        "description": "Return the list of entrypoints of the contract",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "normalize_types",
            "in": "query",
            "description": "Whether types should be normalized (annotations removed, combs flattened) or kept as they appeared in the original script.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unreachable": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/alpha.michelson.v1.primitives"
                            }
                          }
                        },
                        "required": [
                          "path"
                        ]
                      }
                    },
                    "entrypoints": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                      }
                    }
                  },
                  "required": [
                    "entrypoints"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/entrypoints/{entrypoint}": {
      "get": {
        "description": "Return the type of the given entrypoint of the contract",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entrypoint",
            "in": "path",
            "description": "A Michelson entrypoint (string of length < 32)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "normalize_types",
            "in": "query",
            "description": "Whether types should be normalized (annotations removed, combs flattened) or kept as they appeared in the original script.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/estimated_own_pending_slashed_amount": {
      "get": {
        "description": "Returns the estimated own pending slashed amount (in mutez) of a given contract.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/frozen_bonds": {
      "get": {
        "description": "Access the frozen bonds of a contract.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/full_balance": {
      "get": {
        "description": "The full balance (in mutez) of the contract. Includes its spendable balance, staked tez, unstake requests, and frozen bonds. Even if the contract is a delegate, it does not include any staked or delegated tez owned by external delegators.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/manager_key": {
      "get": {
        "description": "Access the manager of an implicit contract.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Signature.Public_key"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/script": {
      "get": {
        "description": "Access the code and data of the contract.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {},
                    "storage": {}
                  },
                  "required": [
                    "code",
                    "storage"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/script/normalized": {
      "post": {
        "description": "Access the script of the contract and normalize it using the requested unparsing mode.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "unparsing_mode": {
                    "oneOf": [
                      {
                        "title": "Readable",
                        "type": "string",
                        "enum": [
                          "Readable"
                        ]
                      },
                      {
                        "title": "Optimized",
                        "type": "string",
                        "enum": [
                          "Optimized"
                        ]
                      },
                      {
                        "title": "Optimized_legacy",
                        "type": "string",
                        "enum": [
                          "Optimized_legacy"
                        ]
                      }
                    ]
                  },
                  "normalize_types": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "unparsing_mode"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/alpha.scripted.contracts"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/single_sapling_get_diff": {
      "get": {
        "description": "Returns the root and a diff of a state starting from an optional offset which is zero by default.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset_commitment",
            "in": "query",
            "description": "Commitments and ciphertexts are returned from the specified offset up to the most recent.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset_nullifier",
            "in": "query",
            "description": "Nullifiers are returned from the specified offset up to the most recent.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "root": {
                      "$ref": "#/components/schemas/sapling.transaction.commitment_hash"
                    },
                    "commitments_and_ciphertexts": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/sapling.transaction.commitment"
                            },
                            {
                              "$ref": "#/components/schemas/sapling.transaction.ciphertext"
                            }
                          ]
                        }
                      }
                    },
                    "nullifiers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/sapling.transaction.nullifier"
                      }
                    }
                  },
                  "required": [
                    "root",
                    "commitments_and_ciphertexts",
                    "nullifiers"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/spendable": {
      "get": {
        "description": "The spendable balance of a contract (in mutez), also known as liquid balance. Corresponds to tez owned by the contract that are neither staked, nor in unstaked requests, nor in frozen bonds. Identical to the 'balance' RPC.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/spendable_and_frozen_bonds": {
      "get": {
        "description": "The sum (in mutez) of the spendable balance and frozen bonds of a contract. Corresponds to the contract's full balance from which staked funds and unstake requests have been excluded. Identical to the 'balance_and_frozen_bonds' RPC.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/staked_balance": {
      "get": {
        "description": "Access the staked balance of a contract (in mutez). Returns None if the contract is originated, or neither delegated nor a delegate.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/alpha.mutez"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/staking_numerator": {
      "get": {
        "description": "Returns an abstract representation of the contract's total_delegated_stake.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/storage": {
      "get": {
        "description": "Access the data of the contract.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/storage/normalized": {
      "post": {
        "description": "Access the data of the contract and normalize it using the requested unparsing mode.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "unparsing_mode": {
                    "oneOf": [
                      {
                        "title": "Readable",
                        "type": "string",
                        "enum": [
                          "Readable"
                        ]
                      },
                      {
                        "title": "Optimized",
                        "type": "string",
                        "enum": [
                          "Optimized"
                        ]
                      },
                      {
                        "title": "Optimized_legacy",
                        "type": "string",
                        "enum": [
                          "Optimized_legacy"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "unparsing_mode"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/storage/paid_space": {
      "get": {
        "description": "Access the paid storage space of the contract.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/bignum"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/storage/used_space": {
      "get": {
        "description": "Access the used storage space of the contract.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/bignum"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/ticket_balance": {
      "post": {
        "description": "Access the contract's balance of ticket with specified ticketer, content type, and content.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ticketer": {
                    "$ref": "#/components/schemas/alpha.contract_id"
                  },
                  "content_type": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "content": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  }
                },
                "required": [
                  "ticketer",
                  "content_type",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Positive big number",
                  "description": "Decimal representation of a positive big number",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/unstake_requests": {
      "get": {
        "description": "Access the unstake requests of the contract. The requests that appear in the finalizable field can be finalized, which means that the contract can transfer these (no longer frozen) funds to their spendable balance with a [finalize_unstake] operation call. Returns None if there is no unstake request pending.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "type": "object",
                      "properties": {
                        "finalizable": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "delegate": {
                                "$ref": "#/components/schemas/Signature.Public_key_hash"
                              },
                              "cycle": {
                                "type": "integer",
                                "minimum": -2147483648,
                                "maximum": 2147483647
                              },
                              "amount": {
                                "$ref": "#/components/schemas/alpha.mutez"
                              }
                            },
                            "required": [
                              "delegate",
                              "cycle",
                              "amount"
                            ]
                          }
                        },
                        "unfinalizable": {
                          "type": "object",
                          "properties": {
                            "delegate": {
                              "$ref": "#/components/schemas/Signature.Public_key_hash"
                            },
                            "requests": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "cycle": {
                                    "type": "integer",
                                    "minimum": -2147483648,
                                    "maximum": 2147483647
                                  },
                                  "amount": {
                                    "$ref": "#/components/schemas/alpha.mutez"
                                  }
                                },
                                "required": [
                                  "cycle",
                                  "amount"
                                ]
                              }
                            }
                          },
                          "required": [
                            "delegate",
                            "requests"
                          ]
                        }
                      },
                      "required": [
                        "finalizable",
                        "unfinalizable"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/unstaked_finalizable_balance": {
      "get": {
        "description": "Access the balance of a contract that was requested for an unstake operation, and is no longer frozen, which means it will appear in the spendable balance of the contract after any stake/unstake/finalize_unstake operation. Returns None if the contract is originated.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/alpha.mutez"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/unstaked_frozen_balance": {
      "get": {
        "description": "Access the balance of a contract that was requested for an unstake operation, but is still frozen for the duration of the slashing period. Returns None if the contract is originated.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/alpha.mutez"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/dal/commitments_history": {
      "get": {
        "description": "Returns the (currently last) DAL skip list cell if DAL is enabled, or [None] otherwise.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "title": "dal_skip_list_legacy",
                          "type": "object",
                          "properties": {
                            "kind": {
                              "type": "string",
                              "enum": [
                                "dal_skip_list_legacy"
                              ]
                            },
                            "skip_list": {
                              "type": "string",
                              "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                            }
                          },
                          "required": [
                            "kind",
                            "skip_list"
                          ]
                        },
                        {
                          "title": "dal_skip_list",
                          "type": "object",
                          "properties": {
                            "kind": {
                              "type": "string",
                              "enum": [
                                "dal_skip_list"
                              ]
                            },
                            "skip_list": {
                              "type": "object",
                              "properties": {
                                "index": {
                                  "$ref": "#/components/schemas/positive_bignum"
                                },
                                "content": {
                                  "oneOf": [
                                    {
                                      "title": "unattested",
                                      "type": "object",
                                      "properties": {
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "unattested"
                                          ]
                                        },
                                        "level": {
                                          "type": "integer",
                                          "minimum": 0,
                                          "maximum": 2147483647
                                        },
                                        "index": {
                                          "type": "integer",
                                          "minimum": 0,
                                          "maximum": 255
                                        }
                                      },
                                      "required": [
                                        "kind",
                                        "level",
                                        "index"
                                      ]
                                    },
                                    {
                                      "title": "attested",
                                      "type": "object",
                                      "properties": {
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "attested"
                                          ]
                                        },
                                        "version": {
                                          "type": "string",
                                          "enum": [
                                            "0"
                                          ]
                                        },
                                        "level": {
                                          "type": "integer",
                                          "minimum": 0,
                                          "maximum": 2147483647
                                        },
                                        "index": {
                                          "type": "integer",
                                          "minimum": 0,
                                          "maximum": 255
                                        },
                                        "commitment": {
                                          "$ref": "#/components/schemas/DAL_commitment"
                                        }
                                      },
                                      "required": [
                                        "kind",
                                        "version",
                                        "level",
                                        "index",
                                        "commitment"
                                      ]
                                    }
                                  ]
                                },
                                "back_pointers": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/components/schemas/dal_skip_list_pointer"
                                  }
                                }
                              },
                              "required": [
                                "index",
                                "content",
                                "back_pointers"
                              ]
                            }
                          },
                          "required": [
                            "kind",
                            "skip_list"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/dal/published_slot_headers": {
      "get": {
        "description": "Get the published slots headers for the given level",
        "parameters": [
          {
            "name": "level",
            "in": "query",
            "description": "A level integer",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "version": {
                        "type": "string",
                        "enum": [
                          "0"
                        ]
                      },
                      "level": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 2147483647
                      },
                      "index": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 255
                      },
                      "commitment": {
                        "$ref": "#/components/schemas/DAL_commitment"
                      }
                    },
                    "required": [
                      "version",
                      "level",
                      "index",
                      "commitment"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/dal/shards": {
      "get": {
        "description": "Get the shards assignment for a given level (the default is the current level) and given delegates (the default is all delegates)",
        "parameters": [
          {
            "name": "level",
            "in": "query",
            "description": "A level integer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegates",
            "in": "query",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "delegate": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      },
                      "indexes": {
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "minimum": -32768,
                          "maximum": 32767
                        }
                      }
                    },
                    "required": [
                      "delegate",
                      "indexes"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates": {
      "get": {
        "description": "Lists all registered delegates by default. The arguments `active`, `inactive`, `with_minimal_stake`, and `without_minimal_stake` allow to enumerate only the delegates that are active, inactive, have at least a minimal stake to participate in consensus and in governance, or do not have such a minimal stake, respectively. Note, setting these arguments to false has no effect.",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inactive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_minimal_stake",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "without_minimal_stake",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}": {
      "get": {
        "description": "Everything about a delegate. Gathers the outputs of all RPCs with the ../delegates/<pkh> prefix.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deactivated": {
                      "type": "boolean"
                    },
                    "is_forbidden": {
                      "type": "boolean"
                    },
                    "participation": {
                      "type": "object",
                      "properties": {
                        "expected_cycle_activity": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "minimal_cycle_activity": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "missed_slots": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "missed_levels": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "remaining_allowed_missed_slots": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "expected_attesting_rewards": {
                          "$ref": "#/components/schemas/alpha.mutez"
                        }
                      },
                      "required": [
                        "expected_cycle_activity",
                        "minimal_cycle_activity",
                        "missed_slots",
                        "missed_levels",
                        "remaining_allowed_missed_slots",
                        "expected_attesting_rewards"
                      ]
                    },
                    "grace_period": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "active_staking_parameters": {
                      "type": "object",
                      "properties": {
                        "limit_of_staking_over_baking_millionth": {
                          "type": "integer",
                          "minimum": -2147483648,
                          "maximum": 2147483647
                        },
                        "edge_of_baking_over_staking_billionth": {
                          "type": "integer",
                          "minimum": -2147483648,
                          "maximum": 2147483647
                        }
                      },
                      "required": [
                        "limit_of_staking_over_baking_millionth",
                        "edge_of_baking_over_staking_billionth"
                      ]
                    },
                    "pending_staking_parameters": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cycle": {
                            "type": "integer",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                          },
                          "parameters": {
                            "type": "object",
                            "properties": {
                              "limit_of_staking_over_baking_millionth": {
                                "type": "integer",
                                "minimum": -2147483648,
                                "maximum": 2147483647
                              },
                              "edge_of_baking_over_staking_billionth": {
                                "type": "integer",
                                "minimum": -2147483648,
                                "maximum": 2147483647
                              }
                            },
                            "required": [
                              "limit_of_staking_over_baking_millionth",
                              "edge_of_baking_over_staking_billionth"
                            ]
                          }
                        },
                        "required": [
                          "cycle",
                          "parameters"
                        ]
                      }
                    },
                    "baking_power": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "total_staked": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "total_delegated": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "min_delegated_in_current_cycle": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "$ref": "#/components/schemas/alpha.mutez"
                        },
                        "level": {
                          "type": "object",
                          "properties": {
                            "level": {
                              "description": "The level of the block relative to genesis. This is also the Shell's notion of level.",
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 2147483647
                            },
                            "level_position": {
                              "description": "The level of the block relative to the successor of the genesis block. More precisely, it is the position of the block relative to the block that starts the \"Alpha family\" of protocols, which includes all protocols except Genesis (that is, from 001 onwards).",
                              "type": "integer",
                              "minimum": -2147483648,
                              "maximum": 2147483647
                            },
                            "cycle": {
                              "description": "The current cycle's number. Note that cycles are a protocol-specific notion. As a result, the cycle number starts at 0 with the first block of the Alpha family of protocols.",
                              "type": "integer",
                              "minimum": -2147483648,
                              "maximum": 2147483647
                            },
                            "cycle_position": {
                              "description": "The current level of the block relative to the first block of the current cycle.",
                              "type": "integer",
                              "minimum": -2147483648,
                              "maximum": 2147483647
                            },
                            "expected_commitment": {
                              "description": "Tells whether the baker of this block has to commit a seed nonce hash.",
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "level",
                            "level_position",
                            "cycle",
                            "cycle_position",
                            "expected_commitment"
                          ]
                        }
                      },
                      "required": [
                        "amount"
                      ]
                    },
                    "own_full_balance": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "own_staked": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "own_delegated": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "external_staked": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "external_delegated": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "total_unstaked_per_cycle": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cycle": {
                            "type": "integer",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                          },
                          "deposit": {
                            "$ref": "#/components/schemas/alpha.mutez"
                          }
                        },
                        "required": [
                          "cycle",
                          "deposit"
                        ]
                      }
                    },
                    "denunciations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "operation_hash": {
                            "$ref": "#/components/schemas/Operation_hash"
                          },
                          "rewarded": {
                            "$ref": "#/components/schemas/Signature.Public_key_hash"
                          },
                          "misbehaviour": {
                            "type": "object",
                            "properties": {
                              "level": {
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 2147483647
                              },
                              "round": {
                                "type": "integer",
                                "minimum": -2147483648,
                                "maximum": 2147483647
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "attestation",
                                  "block",
                                  "preattestation"
                                ]
                              }
                            },
                            "required": [
                              "level",
                              "round",
                              "kind"
                            ]
                          }
                        },
                        "required": [
                          "operation_hash",
                          "rewarded",
                          "misbehaviour"
                        ]
                      }
                    },
                    "estimated_shared_pending_slashed_amount": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "staking_denominator": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "current_voting_power": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "voting_power": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "voting_info": {
                      "type": "object",
                      "properties": {
                        "voting_power": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "current_ballot": {
                          "type": "string",
                          "enum": [
                            "nay",
                            "yay",
                            "pass"
                          ]
                        },
                        "current_proposals": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Protocol_hash"
                          }
                        },
                        "remaining_proposals": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        }
                      }
                    },
                    "consensus_key": {
                      "type": "object",
                      "properties": {
                        "active": {
                          "type": "object",
                          "properties": {
                            "pkh": {
                              "$ref": "#/components/schemas/Signature.Public_key_hash"
                            },
                            "pk": {
                              "$ref": "#/components/schemas/Signature.Public_key"
                            }
                          },
                          "required": [
                            "pkh",
                            "pk"
                          ]
                        },
                        "pendings": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "cycle": {
                                "type": "integer",
                                "minimum": -2147483648,
                                "maximum": 2147483647
                              },
                              "pkh": {
                                "$ref": "#/components/schemas/Signature.Public_key_hash"
                              },
                              "pk": {
                                "$ref": "#/components/schemas/Signature.Public_key"
                              }
                            },
                            "required": [
                              "cycle",
                              "pkh",
                              "pk"
                            ]
                          }
                        }
                      },
                      "required": [
                        "active"
                      ]
                    },
                    "stakers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "staker": {
                            "$ref": "#/components/schemas/alpha.contract_id.implicit"
                          },
                          "frozen_deposits": {
                            "$ref": "#/components/schemas/alpha.mutez"
                          }
                        },
                        "required": [
                          "staker",
                          "frozen_deposits"
                        ]
                      }
                    },
                    "delegators": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/alpha.contract_id"
                      }
                    }
                  },
                  "required": [
                    "deactivated",
                    "is_forbidden",
                    "participation",
                    "grace_period",
                    "active_staking_parameters",
                    "pending_staking_parameters",
                    "baking_power",
                    "total_staked",
                    "total_delegated",
                    "min_delegated_in_current_cycle",
                    "own_full_balance",
                    "own_staked",
                    "own_delegated",
                    "external_staked",
                    "external_delegated",
                    "total_unstaked_per_cycle",
                    "denunciations",
                    "estimated_shared_pending_slashed_amount",
                    "staking_denominator",
                    "current_voting_power",
                    "voting_power",
                    "voting_info",
                    "consensus_key",
                    "stakers",
                    "delegators"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/active_staking_parameters": {
      "get": {
        "description": "Returns the currently active staking parameters for the given delegate.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "limit_of_staking_over_baking_millionth": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "edge_of_baking_over_staking_billionth": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    }
                  },
                  "required": [
                    "limit_of_staking_over_baking_millionth",
                    "edge_of_baking_over_staking_billionth"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/baking_power": {
      "get": {
        "description": "The current baking power of a delegate, using the current staked and delegated balances of the baker and its delegators. In other words, the baking rights that the baker would get for a future cycle if the current cycle ended right at the current block.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "64 bit integers",
                  "description": "Decimal representation of 64 bit integers",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/consensus_key": {
      "get": {
        "description": "The active consensus key for a given delegate and the pending consensus keys.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "object",
                      "properties": {
                        "pkh": {
                          "$ref": "#/components/schemas/Signature.Public_key_hash"
                        },
                        "pk": {
                          "$ref": "#/components/schemas/Signature.Public_key"
                        }
                      },
                      "required": [
                        "pkh",
                        "pk"
                      ]
                    },
                    "pendings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cycle": {
                            "type": "integer",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                          },
                          "pkh": {
                            "$ref": "#/components/schemas/Signature.Public_key_hash"
                          },
                          "pk": {
                            "$ref": "#/components/schemas/Signature.Public_key"
                          }
                        },
                        "required": [
                          "cycle",
                          "pkh",
                          "pk"
                        ]
                      }
                    }
                  },
                  "required": [
                    "active"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/current_baking_power": {
      "get": {
        "description": "DEPRECATED; use baking_power instead.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "64 bit integers",
                  "description": "Decimal representation of 64 bit integers",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/current_frozen_deposits": {
      "get": {
        "description": "DEPRECATED; use total_staked instead.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/current_voting_power": {
      "get": {
        "description": "The voting power of a given delegate, as computed from its current stake.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "64 bit integers",
                  "description": "Decimal representation of 64 bit integers",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/deactivated": {
      "get": {
        "description": "Tells whether the delegate is currently tagged as deactivated or not.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/delegated_balance": {
      "get": {
        "description": "DEPRECATED; to get this value, you can call RPCs external_staked and external_delegated, and add their outputs together.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/delegated_contracts": {
      "get": {
        "description": "DEPRECATED; use delegators instead.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/alpha.contract_id"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/delegators": {
      "get": {
        "description": "The list of all contracts that are currently delegating to the delegate. Includes both user accounts and smart contracts. Includes the delegate itself.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/alpha.contract_id"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/denunciations": {
      "get": {
        "description": "Returns the pending denunciations for the given delegate.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "operation_hash": {
                        "$ref": "#/components/schemas/Operation_hash"
                      },
                      "rewarded": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      },
                      "misbehaviour": {
                        "type": "object",
                        "properties": {
                          "level": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 2147483647
                          },
                          "round": {
                            "type": "integer",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "attestation",
                              "block",
                              "preattestation"
                            ]
                          }
                        },
                        "required": [
                          "level",
                          "round",
                          "kind"
                        ]
                      }
                    },
                    "required": [
                      "operation_hash",
                      "rewarded",
                      "misbehaviour"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/estimated_shared_pending_slashed_amount": {
      "get": {
        "description": "Returns the estimated shared pending slashed amount (in mutez) of a given delegate.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/external_delegated": {
      "get": {
        "description": "The sum (in mutez) of non-staked tokens that currently count as delegated to the baker, excluding those owned by the baker iself. Does not take limits such as overstaking or overdelegation into account. This includes the spendable balances and frozen bonds of all the baker's external delegators. It also includes unstake requests of contracts other than the baker, on the condition that the contract was delegating to the baker at the time of the unstake operation. So this includes most but not all unstake requests from current delegators, and might include some unstake requests from old delegators. Limits such as overstaking and overdelegation have not been applied yet.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/external_staked": {
      "get": {
        "description": "The sum (in mutez) of all tokens currently staked by the baker's external delegators. This excludes the baker's own staked tokens.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/frozen_deposits": {
      "get": {
        "description": "DEPRECATED; call RPC total_staked on the last block of (current_cycle - 3) instead. Returns the total amount (in mutez) that was staked for the baker by all stakers (including the baker itself) at the time the staking rights for the current cycle were computed.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/frozen_deposits_limit": {
      "get": {
        "description": "DEPRECATED; the frozen deposits limit has no effects since the activation of Adaptive Issuance and Staking during the Paris protocol.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/alpha.mutez"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/full_balance": {
      "get": {
        "description": "DEPRECATED; use own_full_balance instead.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/grace_period": {
      "get": {
        "description": "Returns the cycle by the end of which the delegate might be deactivated if she fails to execute any delegate action. A deactivated delegate might be reactivated (without loosing any stake) by simply re-registering as a delegate. For deactivated delegates, this value contains the cycle at which they were deactivated.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "minimum": -2147483648,
                  "maximum": 2147483647
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/is_forbidden": {
      "get": {
        "description": "Returns true if the delegate is forbidden to participate in consensus.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/min_delegated_in_current_cycle": {
      "get": {
        "description": "Returns the minimum of delegated tez (in mutez) during the current cycle and the block level at the end of which the minimum was reached. This only takes into account the value of `total_delegated` at the end of each block, not in the middle of applying operations. This is the delegated amount that would be used to compute the delegate's future baking rights if the cycle ended at the current block. If the minimum was reached multiple times, the returned level is the earliest level of the current cycle that reached this minimum. For instance, if `total_delegated` hasn't changed at all since the beginning of the current cycle, returns the first level of the current cycle. (If the contract is not registered as a delegate, returns 0 mutez and omits the level.)",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "level": {
                      "type": "object",
                      "properties": {
                        "level": {
                          "description": "The level of the block relative to genesis. This is also the Shell's notion of level.",
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 2147483647
                        },
                        "level_position": {
                          "description": "The level of the block relative to the successor of the genesis block. More precisely, it is the position of the block relative to the block that starts the \"Alpha family\" of protocols, which includes all protocols except Genesis (that is, from 001 onwards).",
                          "type": "integer",
                          "minimum": -2147483648,
                          "maximum": 2147483647
                        },
                        "cycle": {
                          "description": "The current cycle's number. Note that cycles are a protocol-specific notion. As a result, the cycle number starts at 0 with the first block of the Alpha family of protocols.",
                          "type": "integer",
                          "minimum": -2147483648,
                          "maximum": 2147483647
                        },
                        "cycle_position": {
                          "description": "The current level of the block relative to the first block of the current cycle.",
                          "type": "integer",
                          "minimum": -2147483648,
                          "maximum": 2147483647
                        },
                        "expected_commitment": {
                          "description": "Tells whether the baker of this block has to commit a seed nonce hash.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "level",
                        "level_position",
                        "cycle",
                        "cycle_position",
                        "expected_commitment"
                      ]
                    }
                  },
                  "required": [
                    "amount"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/own_delegated": {
      "get": {
        "description": "The amount (in mutez) currently owned by the baker itself and counting as delegated for the purpose of baking rights. This corresponds to all non-staked tokens owned by the baker: spendable balance, frozen bonds, and unstake requests. (Note: There is one exception: if the baker still has unstake requests created at a time when it was delegating to a different delegate, then these unstake requests still count as delegated to the former delegate. Any such unstake requests are excluded from the amount returned by the present RPC, despite being non-staked tokens owned by the baker.)",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/own_full_balance": {
      "get": {
        "description": "The full balance (in mutez) of tokens owned by the delegate itself. Includes its spendable balance, staked tez, unstake requests, and frozen bonds. Does not include any tokens owned by external delegators. This RPC fails when the pkh is not a delegate. When it is a delegate, this RPC outputs the same amount as ../<block_id>/context/contracts/<delegate_contract_id>/full_balance.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/own_staked": {
      "get": {
        "description": "The amount (in mutez) currently owned and staked by the baker itself. Returns the same value as ../<block_id>/context/contracts/<delegate_contract_id>/staked_balance (except for the fact that the present RPC fails if the public_key_hash in the path is not a delegate).",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/participation": {
      "get": {
        "description": "Returns cycle and level participation information. In particular this indicates, in the field 'expected_cycle_activity', the number of slots the delegate is expected to have in the cycle based on its active stake. The field 'minimal_cycle_activity' indicates the minimal attesting slots in the cycle required to get attesting rewards. It is computed based on 'expected_cycle_activity. The fields 'missed_slots' and 'missed_levels' indicate the number of missed attesting slots and missed levels (for attesting) in the cycle so far. 'missed_slots' indicates the number of missed attesting slots in the cycle so far. The field 'remaining_allowed_missed_slots' indicates the remaining amount of attesting slots that can be missed in the cycle before forfeiting the rewards. Finally, 'expected_attesting_rewards' indicates the attesting rewards that will be distributed at the end of the cycle if activity at that point will be greater than the minimal required; if the activity is already known to be below the required minimum, then the rewards are zero.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "expected_cycle_activity": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "minimal_cycle_activity": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "missed_slots": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "missed_levels": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "remaining_allowed_missed_slots": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "expected_attesting_rewards": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    }
                  },
                  "required": [
                    "expected_cycle_activity",
                    "minimal_cycle_activity",
                    "missed_slots",
                    "missed_levels",
                    "remaining_allowed_missed_slots",
                    "expected_attesting_rewards"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/pending_staking_parameters": {
      "get": {
        "description": "Returns the pending values for the given delegate's staking parameters.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cycle": {
                        "type": "integer",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                      },
                      "parameters": {
                        "type": "object",
                        "properties": {
                          "limit_of_staking_over_baking_millionth": {
                            "type": "integer",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                          },
                          "edge_of_baking_over_staking_billionth": {
                            "type": "integer",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                          }
                        },
                        "required": [
                          "limit_of_staking_over_baking_millionth",
                          "edge_of_baking_over_staking_billionth"
                        ]
                      }
                    },
                    "required": [
                      "cycle",
                      "parameters"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/stakers": {
      "get": {
        "description": "Returns the list of accounts that stake to a given delegate together with their share of the frozen deposits.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "staker": {
                        "$ref": "#/components/schemas/alpha.contract_id.implicit"
                      },
                      "frozen_deposits": {
                        "$ref": "#/components/schemas/alpha.mutez"
                      }
                    },
                    "required": [
                      "staker",
                      "frozen_deposits"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/staking_balance": {
      "get": {
        "description": "DEPRECATED; to get this value, you can call RPCs total_staked and total_delegated, and add their outputs together.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/staking_denominator": {
      "get": {
        "description": "Returns an abstract representation of the total delegated stake.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/total_delegated": {
      "get": {
        "description": "All tokens (in mutez) that currently count as delegated for the purpose of computing the baker's rights; they weigh half as much as staked tez in the rights. Limits such as overstaking and overdelegation have not been applied yet. This corresponds to all non-staked tez owned by the baker's delegators (including the baker itself): spendable balances, frozen bonds, and unstaked requests, except for any unstake requests that have been created before the delegator changed its delegate to the current baker (because they still count as delegated for the old delegate instead).",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/total_delegated_stake": {
      "get": {
        "description": "DEPRECATED; use external_staked instead.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/total_staked": {
      "get": {
        "description": "The total amount (in mutez) currently staked for the baker, both by the baker itself and by external stakers. This is the staked amount before applying the baker's 'limit_of_staking_over_baking'; in other words, it includes overstaked tez if there are any.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/total_unstaked_per_cycle": {
      "get": {
        "description": "For each cycle, returns the total amount (in mutez) contained in all unstake requests created during this cycle by all delegators, including the baker itself. Note that these tokens count as delegated to the baker for the purpose of computing baking rights, and are included in the amount returned by the total_delegated RPC.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cycle": {
                        "type": "integer",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                      },
                      "deposit": {
                        "$ref": "#/components/schemas/alpha.mutez"
                      }
                    },
                    "required": [
                      "cycle",
                      "deposit"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/unstaked_frozen_deposits": {
      "get": {
        "description": "DEPRECATED; use total_unstaked_per_cycle instead.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cycle": {
                        "type": "integer",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                      },
                      "deposit": {
                        "$ref": "#/components/schemas/alpha.mutez"
                      }
                    },
                    "required": [
                      "cycle",
                      "deposit"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/voting_info": {
      "get": {
        "description": "Returns the delegate info (e.g. voting power) found in the listings of the current voting period.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "voting_power": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "current_ballot": {
                      "type": "string",
                      "enum": [
                        "nay",
                        "yay",
                        "pass"
                      ]
                    },
                    "current_proposals": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Protocol_hash"
                      }
                    },
                    "remaining_proposals": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/voting_power": {
      "get": {
        "description": "The voting power in the vote listings for a given delegate.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "64 bit integers",
                  "description": "Decimal representation of 64 bit integers",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/denunciations": {
      "get": {
        "description": "Returns the denunciations for misbehavior in the current cycle.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "slashed_delegate": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      },
                      "operation_hash": {
                        "$ref": "#/components/schemas/Operation_hash"
                      },
                      "rewarded": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      },
                      "misbehaviour": {
                        "type": "object",
                        "properties": {
                          "level": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 2147483647
                          },
                          "round": {
                            "type": "integer",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "attestation",
                              "block",
                              "preattestation"
                            ]
                          }
                        },
                        "required": [
                          "level",
                          "round",
                          "kind"
                        ]
                      }
                    },
                    "required": [
                      "slashed_delegate",
                      "operation_hash",
                      "rewarded",
                      "misbehaviour"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/issuance/current_yearly_rate": {
      "get": {
        "description": "Returns the current expected maximum yearly issuance rate (in %). The value only includes participation rewards (and does not include liquidity baking)",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Universal string representation",
                  "description": "Either a plain UTF8 string, or a sequence of bytes for strings that contain invalid byte sequences.",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "invalid_utf8_string": {
                          "type": "array",
                          "items": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 255
                          }
                        }
                      },
                      "required": [
                        "invalid_utf8_string"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/issuance/current_yearly_rate_details": {
      "get": {
        "description": "Returns the static and dynamic parts of the current expected maximum yearly issuance rate (in %). The value only includes participation rewards (and does not include liquidity baking)",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "static": {
                      "type": "object",
                      "properties": {
                        "numerator": {
                          "$ref": "#/components/schemas/positive_bignum"
                        },
                        "denominator": {
                          "$ref": "#/components/schemas/positive_bignum"
                        }
                      },
                      "required": [
                        "numerator",
                        "denominator"
                      ]
                    },
                    "dynamic": {
                      "type": "object",
                      "properties": {
                        "numerator": {
                          "$ref": "#/components/schemas/positive_bignum"
                        },
                        "denominator": {
                          "$ref": "#/components/schemas/positive_bignum"
                        }
                      },
                      "required": [
                        "numerator",
                        "denominator"
                      ]
                    }
                  },
                  "required": [
                    "static",
                    "dynamic"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/issuance/current_yearly_rate_exact": {
      "get": {
        "description": "Returns the current expected maximum yearly issuance rate (exact quotient) (in %). The value only includes participation rewards (and does not include liquidity baking)",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "numerator": {
                      "$ref": "#/components/schemas/positive_bignum"
                    },
                    "denominator": {
                      "$ref": "#/components/schemas/positive_bignum"
                    }
                  },
                  "required": [
                    "numerator",
                    "denominator"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/issuance/expected_issuance": {
      "get": {
        "description": "Returns the expected issued tez for the provided block and the next 'consensus_rights_delay' cycles (in mutez)",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cycle": {
                        "type": "integer",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                      },
                      "baking_reward_fixed_portion": {
                        "$ref": "#/components/schemas/alpha.mutez"
                      },
                      "baking_reward_bonus_per_slot": {
                        "$ref": "#/components/schemas/alpha.mutez"
                      },
                      "attesting_reward_per_slot": {
                        "$ref": "#/components/schemas/alpha.mutez"
                      },
                      "seed_nonce_revelation_tip": {
                        "$ref": "#/components/schemas/alpha.mutez"
                      },
                      "vdf_revelation_tip": {
                        "$ref": "#/components/schemas/alpha.mutez"
                      }
                    },
                    "required": [
                      "cycle",
                      "baking_reward_fixed_portion",
                      "baking_reward_bonus_per_slot",
                      "attesting_reward_per_slot",
                      "seed_nonce_revelation_tip",
                      "vdf_revelation_tip"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/issuance/issuance_per_minute": {
      "get": {
        "description": "Returns the current expected maximum issuance per minute (in mutez). The value only includes participation rewards (and does not include liquidity baking)",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/liquidity_baking/cpmm_address": {
      "get": {
        "description": "Liquidity baking CPMM address",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "A contract handle -- originated account",
                  "description": "A contract notation as given to an RPC or inside scripts. Can be a base58 originated contract hash.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/unistring"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/merkle_tree": {
      "get": {
        "description": "Returns the merkle tree of a piece of context.",
        "parameters": [
          {
            "name": "holey",
            "in": "query",
            "description": "Send only hashes, omit data of key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/merkle_tree"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/merkle_tree_v2": {
      "get": {
        "description": "Returns the Irmin merkle tree of a piece of context.",
        "parameters": [
          {
            "name": "holey",
            "in": "query",
            "description": "Send only hashes, omit data of key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "type": "object",
                      "properties": {
                        "version": {
                          "type": "integer",
                          "minimum": -32768,
                          "maximum": 32767
                        },
                        "before": {
                          "oneOf": [
                            {
                              "title": "Value",
                              "type": "object",
                              "properties": {
                                "value": {
                                  "$ref": "#/components/schemas/Context_hash"
                                }
                              },
                              "required": [
                                "value"
                              ]
                            },
                            {
                              "title": "Node",
                              "type": "object",
                              "properties": {
                                "node": {
                                  "$ref": "#/components/schemas/Context_hash"
                                }
                              },
                              "required": [
                                "node"
                              ]
                            }
                          ]
                        },
                        "after": {
                          "oneOf": [
                            {
                              "title": "Value",
                              "type": "object",
                              "properties": {
                                "value": {
                                  "$ref": "#/components/schemas/Context_hash"
                                }
                              },
                              "required": [
                                "value"
                              ]
                            },
                            {
                              "title": "Node",
                              "type": "object",
                              "properties": {
                                "node": {
                                  "$ref": "#/components/schemas/Context_hash"
                                }
                              },
                              "required": [
                                "node"
                              ]
                            }
                          ]
                        },
                        "state": {
                          "$ref": "#/components/schemas/tree_encoding"
                        }
                      },
                      "required": [
                        "version",
                        "before",
                        "after",
                        "state"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/nonces/{block_level}": {
      "get": {
        "description": "Info about the nonce of a previous block.",
        "parameters": [
          {
            "name": "block_level",
            "in": "path",
            "description": "A level integer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Revealed",
                      "type": "object",
                      "properties": {
                        "nonce": {
                          "type": "string",
                          "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                        }
                      },
                      "required": [
                        "nonce"
                      ]
                    },
                    {
                      "title": "Missing",
                      "type": "object",
                      "properties": {
                        "hash": {
                          "$ref": "#/components/schemas/cycle_nonce"
                        }
                      },
                      "required": [
                        "hash"
                      ]
                    },
                    {
                      "title": "Forgotten",
                      "type": "object",
                      "properties": {}
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/raw/bytes": {
      "get": {
        "description": "Returns the raw context.",
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/raw_context"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/sapling/{sapling_state_id}/get_diff": {
      "get": {
        "description": "Returns the root and a diff of a state starting from an optional offset which is zero by default.",
        "parameters": [
          {
            "name": "sapling_state_id",
            "in": "path",
            "description": "A sapling state identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset_commitment",
            "in": "query",
            "description": "Commitments and ciphertexts are returned from the specified offset up to the most recent.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset_nullifier",
            "in": "query",
            "description": "Nullifiers are returned from the specified offset up to the most recent.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "root": {
                      "$ref": "#/components/schemas/sapling.transaction.commitment_hash"
                    },
                    "commitments_and_ciphertexts": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/sapling.transaction.commitment"
                            },
                            {
                              "$ref": "#/components/schemas/sapling.transaction.ciphertext"
                            }
                          ]
                        }
                      }
                    },
                    "nullifiers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/sapling.transaction.nullifier"
                      }
                    }
                  },
                  "required": [
                    "root",
                    "commitments_and_ciphertexts",
                    "nullifiers"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/seed": {
      "post": {
        "description": "Seed of the cycle to which the block belongs.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/seed_computation": {
      "get": {
        "description": "Seed computation status",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Nonce revelation stage",
                      "type": "object",
                      "properties": {
                        "nonce_revelation_stage": {}
                      },
                      "required": [
                        "nonce_revelation_stage"
                      ]
                    },
                    {
                      "title": "VDF revelation stage",
                      "type": "object",
                      "properties": {
                        "seed_discriminant": {
                          "type": "string",
                          "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                        },
                        "seed_challenge": {
                          "type": "string",
                          "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                        }
                      },
                      "required": [
                        "seed_discriminant",
                        "seed_challenge"
                      ]
                    },
                    {
                      "title": "Computation finished",
                      "type": "object",
                      "properties": {
                        "computation_finished": {}
                      },
                      "required": [
                        "computation_finished"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/all": {
      "get": {
        "description": "List of all originated smart rollups",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/smart_rollup_address"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/all/inbox": {
      "get": {
        "description": "Inbox for the smart rollups",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 2147483647
                    },
                    "old_levels_messages": {
                      "type": "object",
                      "properties": {
                        "index": {
                          "$ref": "#/components/schemas/positive_bignum"
                        },
                        "content": {
                          "type": "object",
                          "properties": {
                            "hash": {
                              "$ref": "#/components/schemas/smart_rollup_merkelized_payload_hashes_hash"
                            },
                            "level": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 2147483647
                            }
                          },
                          "required": [
                            "hash",
                            "level"
                          ]
                        },
                        "back_pointers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/smart_rollup_inbox_hash"
                          }
                        }
                      },
                      "required": [
                        "index",
                        "content",
                        "back_pointers"
                      ]
                    }
                  },
                  "required": [
                    "level",
                    "old_levels_messages"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/commitment/{smart_rollup_commitment_hash}": {
      "get": {
        "description": "Commitment for a smart rollup from its hash",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smart_rollup_commitment_hash",
            "in": "path",
            "description": "smart_rollup_commitment_hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "compressed_state": {
                      "$ref": "#/components/schemas/smart_rollup_state_hash"
                    },
                    "inbox_level": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 2147483647
                    },
                    "predecessor": {
                      "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                    },
                    "number_of_ticks": {
                      "$ref": "#/components/schemas/int64"
                    }
                  },
                  "required": [
                    "compressed_state",
                    "inbox_level",
                    "predecessor",
                    "number_of_ticks"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/commitment/{smart_rollup_commitment_hash}/can_be_cemented": {
      "get": {
        "description": "Returns true if and only if the provided commitment can be cemented.",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smart_rollup_commitment_hash",
            "in": "path",
            "description": "smart_rollup_commitment_hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/commitment/{smart_rollup_commitment_hash}/stakers_indexes": {
      "get": {
        "description": "List of stakers indexes staking on a given commitment",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smart_rollup_commitment_hash",
            "in": "path",
            "description": "smart_rollup_commitment_hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/positive_bignum"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/consumed_outputs/{block_level}": {
      "get": {
        "description": "Return the known consumed outputs of a smart rollup.",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_level",
            "in": "path",
            "description": "A level integer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1073741824,
                    "maximum": 1073741823
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/genesis_info": {
      "get": {
        "description": "Genesis information (level and commitment hash) for a smart rollup",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 2147483647
                    },
                    "commitment_hash": {
                      "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                    }
                  },
                  "required": [
                    "level",
                    "commitment_hash"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/inbox_level/{block_level}/commitments": {
      "get": {
        "description": "List of commitments associated to a rollup for a given inbox level",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_level",
            "in": "path",
            "description": "A level integer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/kind": {
      "get": {
        "description": "Kind of smart rollup",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "wasm_2_0_0",
                    "arith",
                    "riscv"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/last_cemented_commitment_hash_with_level": {
      "get": {
        "description": "Level and hash of the last cemented commitment for a smart rollup",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hash": {
                      "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                    },
                    "level": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 2147483647
                    }
                  },
                  "required": [
                    "hash",
                    "level"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/last_whitelist_update": {
      "get": {
        "description": "Last whitelist update for private smart rollups. If the output is None then the rollup is public.",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "type": "object",
                      "properties": {
                        "message_index": {
                          "$ref": "#/components/schemas/positive_bignum"
                        },
                        "outbox_level": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 2147483647
                        }
                      },
                      "required": [
                        "message_index",
                        "outbox_level"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/staker/{pkh}/conflicts": {
      "get": {
        "description": "List of stakers in conflict with the given staker",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "other": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      },
                      "their_commitment": {
                        "type": "object",
                        "properties": {
                          "compressed_state": {
                            "$ref": "#/components/schemas/smart_rollup_state_hash"
                          },
                          "inbox_level": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 2147483647
                          },
                          "predecessor": {
                            "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                          },
                          "number_of_ticks": {
                            "$ref": "#/components/schemas/int64"
                          }
                        },
                        "required": [
                          "compressed_state",
                          "inbox_level",
                          "predecessor",
                          "number_of_ticks"
                        ]
                      },
                      "our_commitment": {
                        "type": "object",
                        "properties": {
                          "compressed_state": {
                            "$ref": "#/components/schemas/smart_rollup_state_hash"
                          },
                          "inbox_level": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 2147483647
                          },
                          "predecessor": {
                            "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                          },
                          "number_of_ticks": {
                            "$ref": "#/components/schemas/int64"
                          }
                        },
                        "required": [
                          "compressed_state",
                          "inbox_level",
                          "predecessor",
                          "number_of_ticks"
                        ]
                      },
                      "parent_commitment": {
                        "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                      }
                    },
                    "required": [
                      "other",
                      "their_commitment",
                      "our_commitment",
                      "parent_commitment"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/staker/{pkh}/games": {
      "get": {
        "description": "Ongoing refutation games for a given staker",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "game": {
                        "type": "object",
                        "properties": {
                          "turn": {
                            "oneOf": [
                              {
                                "title": "Alice",
                                "type": "string",
                                "enum": [
                                  "alice"
                                ]
                              },
                              {
                                "title": "Bob",
                                "type": "string",
                                "enum": [
                                  "bob"
                                ]
                              }
                            ]
                          },
                          "inbox_snapshot": {
                            "type": "object",
                            "properties": {
                              "index": {
                                "$ref": "#/components/schemas/positive_bignum"
                              },
                              "content": {
                                "type": "object",
                                "properties": {
                                  "hash": {
                                    "$ref": "#/components/schemas/smart_rollup_merkelized_payload_hashes_hash"
                                  },
                                  "level": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 2147483647
                                  }
                                },
                                "required": [
                                  "hash",
                                  "level"
                                ]
                              },
                              "back_pointers": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/components/schemas/smart_rollup_inbox_hash"
                                }
                              }
                            },
                            "required": [
                              "index",
                              "content",
                              "back_pointers"
                            ]
                          },
                          "dal_snapshot": {
                            "oneOf": [
                              {
                                "title": "dal_skip_list_legacy",
                                "type": "object",
                                "properties": {
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "dal_skip_list_legacy"
                                    ]
                                  },
                                  "skip_list": {
                                    "type": "string",
                                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                  }
                                },
                                "required": [
                                  "kind",
                                  "skip_list"
                                ]
                              },
                              {
                                "title": "dal_skip_list",
                                "type": "object",
                                "properties": {
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "dal_skip_list"
                                    ]
                                  },
                                  "skip_list": {
                                    "type": "object",
                                    "properties": {
                                      "index": {
                                        "$ref": "#/components/schemas/positive_bignum"
                                      },
                                      "content": {
                                        "oneOf": [
                                          {
                                            "title": "unattested",
                                            "type": "object",
                                            "properties": {
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "unattested"
                                                ]
                                              },
                                              "level": {
                                                "type": "integer",
                                                "minimum": 0,
                                                "maximum": 2147483647
                                              },
                                              "index": {
                                                "type": "integer",
                                                "minimum": 0,
                                                "maximum": 255
                                              }
                                            },
                                            "required": [
                                              "kind",
                                              "level",
                                              "index"
                                            ]
                                          },
                                          {
                                            "title": "attested",
                                            "type": "object",
                                            "properties": {
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "attested"
                                                ]
                                              },
                                              "version": {
                                                "type": "string",
                                                "enum": [
                                                  "0"
                                                ]
                                              },
                                              "level": {
                                                "type": "integer",
                                                "minimum": 0,
                                                "maximum": 2147483647
                                              },
                                              "index": {
                                                "type": "integer",
                                                "minimum": 0,
                                                "maximum": 255
                                              },
                                              "commitment": {
                                                "$ref": "#/components/schemas/DAL_commitment"
                                              }
                                            },
                                            "required": [
                                              "kind",
                                              "version",
                                              "level",
                                              "index",
                                              "commitment"
                                            ]
                                          }
                                        ]
                                      },
                                      "back_pointers": {
                                        "type": "array",
                                        "items": {
                                          "$ref": "#/components/schemas/dal_skip_list_pointer"
                                        }
                                      }
                                    },
                                    "required": [
                                      "index",
                                      "content",
                                      "back_pointers"
                                    ]
                                  }
                                },
                                "required": [
                                  "kind",
                                  "skip_list"
                                ]
                              }
                            ]
                          },
                          "start_level": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 2147483647
                          },
                          "inbox_level": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 2147483647
                          },
                          "game_state": {
                            "oneOf": [
                              {
                                "title": "Dissecting",
                                "type": "object",
                                "properties": {
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Dissecting"
                                    ]
                                  },
                                  "dissection": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "state": {
                                          "$ref": "#/components/schemas/smart_rollup_state_hash"
                                        },
                                        "tick": {
                                          "$ref": "#/components/schemas/positive_bignum"
                                        }
                                      },
                                      "required": [
                                        "tick"
                                      ]
                                    }
                                  },
                                  "default_number_of_sections": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 255
                                  }
                                },
                                "required": [
                                  "kind",
                                  "dissection",
                                  "default_number_of_sections"
                                ]
                              },
                              {
                                "title": "Final_move",
                                "type": "object",
                                "properties": {
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Final_move"
                                    ]
                                  },
                                  "agreed_start_chunk": {
                                    "type": "object",
                                    "properties": {
                                      "state": {
                                        "$ref": "#/components/schemas/smart_rollup_state_hash"
                                      },
                                      "tick": {
                                        "$ref": "#/components/schemas/positive_bignum"
                                      }
                                    },
                                    "required": [
                                      "tick"
                                    ]
                                  },
                                  "refuted_stop_chunk": {
                                    "type": "object",
                                    "properties": {
                                      "state": {
                                        "$ref": "#/components/schemas/smart_rollup_state_hash"
                                      },
                                      "tick": {
                                        "$ref": "#/components/schemas/positive_bignum"
                                      }
                                    },
                                    "required": [
                                      "tick"
                                    ]
                                  }
                                },
                                "required": [
                                  "kind",
                                  "agreed_start_chunk",
                                  "refuted_stop_chunk"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "turn",
                          "inbox_snapshot",
                          "dal_snapshot",
                          "start_level",
                          "inbox_level",
                          "game_state"
                        ]
                      },
                      "alice": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      },
                      "bob": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      }
                    },
                    "required": [
                      "game",
                      "alice",
                      "bob"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/staker/{pkh}/index": {
      "get": {
        "description": "Staker index associated to a public key hash for a given rollup",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Positive big number",
                  "description": "Decimal representation of a positive big number",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/staker/{pkh}/staked_on_commitment": {
      "get": {
        "description": "The newest commitment on which the operator has staked on for a smart rollup. Note that is can return a commitment that is before the last cemented one.",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "type": "object",
                      "properties": {
                        "hash": {
                          "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                        },
                        "compressed_state": {
                          "$ref": "#/components/schemas/smart_rollup_state_hash"
                        },
                        "inbox_level": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 2147483647
                        },
                        "predecessor": {
                          "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                        },
                        "number_of_ticks": {
                          "$ref": "#/components/schemas/int64"
                        }
                      },
                      "required": [
                        "hash",
                        "compressed_state",
                        "inbox_level",
                        "predecessor",
                        "number_of_ticks"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/staker1/{staker1_pkh}/staker2/{staker2_pkh}/timeout": {
      "get": {
        "description": "Returns the timeout of players.",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "staker1_pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "staker2_pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "type": "object",
                      "properties": {
                        "alice": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "bob": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "last_turn_level": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 2147483647
                        }
                      },
                      "required": [
                        "alice",
                        "bob",
                        "last_turn_level"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/staker1/{staker1_pkh}/staker2/{staker2_pkh}/timeout_reached": {
      "get": {
        "description": "Returns whether the timeout creates a result for the game.",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "staker1_pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "staker2_pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "title": "Loser",
                          "type": "object",
                          "properties": {
                            "kind": {
                              "type": "string",
                              "enum": [
                                "loser"
                              ]
                            },
                            "reason": {
                              "oneOf": [
                                {
                                  "title": "Conflict_resolved",
                                  "type": "string",
                                  "enum": [
                                    "conflict_resolved"
                                  ]
                                },
                                {
                                  "title": "Timeout",
                                  "type": "string",
                                  "enum": [
                                    "timeout"
                                  ]
                                }
                              ]
                            },
                            "player": {
                              "$ref": "#/components/schemas/Signature.Public_key_hash"
                            }
                          },
                          "required": [
                            "kind",
                            "reason",
                            "player"
                          ]
                        },
                        {
                          "title": "Draw",
                          "type": "object",
                          "properties": {
                            "kind": {
                              "type": "string",
                              "enum": [
                                "draw"
                              ]
                            }
                          },
                          "required": [
                            "kind"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/stakers": {
      "get": {
        "description": "List of active stakers' public key hashes of a rollup",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/ticket_balance": {
      "post": {
        "description": "Access the smart rollup's balance of ticket with specified ticketer, content type, and content.",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ticketer": {
                    "$ref": "#/components/schemas/alpha.contract_id"
                  },
                  "content_type": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "content": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  }
                },
                "required": [
                  "ticketer",
                  "content_type",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Positive big number",
                  "description": "Decimal representation of a positive big number",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/smart_rollups/smart_rollup/{smart_rollup_address}/whitelist": {
      "get": {
        "description": "Whitelist for private smart rollups. If the output is None then the rollup is public.",
        "parameters": [
          {
            "name": "smart_rollup_address",
            "in": "path",
            "description": "smart_rollup_address (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/total_currently_staked": {
      "get": {
        "description": "Returns the amount of staked tez by delegates, delegators or overstaked.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "delegates": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "delegators": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    },
                    "overstaked": {
                      "$ref": "#/components/schemas/alpha.mutez"
                    }
                  },
                  "required": [
                    "delegates",
                    "delegators",
                    "overstaked"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/total_frozen_stake": {
      "get": {
        "description": "Returns the total stake (in mutez) frozen on the chain",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/context/total_supply": {
      "get": {
        "description": "Returns the total supply (in mutez) available on the chain",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/positive_bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/hash": {
      "get": {
        "description": "The block's hash, its unique identifier.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "A block identifier (Base58Check-encoded)",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/unistring"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/header": {
      "get": {
        "description": "The whole block header.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Shell header",
                  "description": "Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.",
                  "type": "object",
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "enum": [
                        "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im"
                      ]
                    },
                    "chain_id": {
                      "$ref": "#/components/schemas/Chain_id"
                    },
                    "hash": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "level": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "proto": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "predecessor": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "timestamp": {
                      "$ref": "#/components/schemas/timestamp.protocol"
                    },
                    "validation_pass": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "operations_hash": {
                      "$ref": "#/components/schemas/Operation_list_list_hash"
                    },
                    "fitness": {
                      "$ref": "#/components/schemas/fitness"
                    },
                    "context": {
                      "$ref": "#/components/schemas/Context_hash"
                    },
                    "content": {
                      "oneOf": [
                        {
                          "title": "Activate",
                          "type": "object",
                          "properties": {
                            "command": {
                              "type": "string",
                              "enum": [
                                "activate"
                              ]
                            },
                            "hash": {
                              "$ref": "#/components/schemas/Protocol_hash"
                            },
                            "fitness": {
                              "$ref": "#/components/schemas/fitness"
                            },
                            "protocol_parameters": {
                              "type": "string",
                              "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                            }
                          },
                          "required": [
                            "command",
                            "hash",
                            "fitness",
                            "protocol_parameters"
                          ]
                        },
                        {
                          "title": "Activate_testchain",
                          "type": "object",
                          "properties": {
                            "command": {
                              "type": "string",
                              "enum": [
                                "activate_testchain"
                              ]
                            },
                            "hash": {
                              "$ref": "#/components/schemas/Protocol_hash"
                            },
                            "fitness": {
                              "$ref": "#/components/schemas/fitness"
                            },
                            "protocol_parameters": {
                              "type": "string",
                              "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                            },
                            "validity_time": {
                              "$ref": "#/components/schemas/int64"
                            }
                          },
                          "required": [
                            "command",
                            "hash",
                            "fitness",
                            "protocol_parameters",
                            "validity_time"
                          ]
                        }
                      ]
                    },
                    "signature": {
                      "$ref": "#/components/schemas/Signature.V0"
                    }
                  },
                  "required": [
                    "protocol",
                    "chain_id",
                    "hash",
                    "level",
                    "proto",
                    "predecessor",
                    "timestamp",
                    "validation_pass",
                    "operations_hash",
                    "fitness",
                    "context",
                    "content",
                    "signature"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/header/protocol_data": {
      "get": {
        "description": "The version-specific fragment of the block header.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "enum": [
                        "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im"
                      ]
                    },
                    "content": {
                      "oneOf": [
                        {
                          "title": "Activate",
                          "type": "object",
                          "properties": {
                            "command": {
                              "type": "string",
                              "enum": [
                                "activate"
                              ]
                            },
                            "hash": {
                              "$ref": "#/components/schemas/Protocol_hash"
                            },
                            "fitness": {
                              "$ref": "#/components/schemas/fitness"
                            },
                            "protocol_parameters": {
                              "type": "string",
                              "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                            }
                          },
                          "required": [
                            "command",
                            "hash",
                            "fitness",
                            "protocol_parameters"
                          ]
                        },
                        {
                          "title": "Activate_testchain",
                          "type": "object",
                          "properties": {
                            "command": {
                              "type": "string",
                              "enum": [
                                "activate_testchain"
                              ]
                            },
                            "hash": {
                              "$ref": "#/components/schemas/Protocol_hash"
                            },
                            "fitness": {
                              "$ref": "#/components/schemas/fitness"
                            },
                            "protocol_parameters": {
                              "type": "string",
                              "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                            },
                            "validity_time": {
                              "$ref": "#/components/schemas/int64"
                            }
                          },
                          "required": [
                            "command",
                            "hash",
                            "fitness",
                            "protocol_parameters",
                            "validity_time"
                          ]
                        }
                      ]
                    },
                    "signature": {
                      "$ref": "#/components/schemas/Signature.V0"
                    }
                  },
                  "required": [
                    "protocol",
                    "content",
                    "signature"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/header/protocol_data/raw": {
      "get": {
        "description": "The version-specific fragment of the block header (unparsed).",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/header/raw": {
      "get": {
        "description": "The whole block header (unparsed).",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/header/shell": {
      "get": {
        "description": "The shell-specific fragment of the block header.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Shell header",
                  "description": "Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.",
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "proto": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "predecessor": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "timestamp": {
                      "$ref": "#/components/schemas/timestamp.protocol"
                    },
                    "validation_pass": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "operations_hash": {
                      "$ref": "#/components/schemas/Operation_list_list_hash"
                    },
                    "fitness": {
                      "$ref": "#/components/schemas/fitness"
                    },
                    "context": {
                      "$ref": "#/components/schemas/Context_hash"
                    }
                  },
                  "required": [
                    "level",
                    "proto",
                    "predecessor",
                    "timestamp",
                    "validation_pass",
                    "operations_hash",
                    "fitness",
                    "context"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/attestation_rights": {
      "get": {
        "description": "Retrieves the delegates allowed to attest a block.\nBy default, it gives the attestation power for delegates that have at least one attestation slot for the next block.\nParameters `level` and `cycle` can be used to specify the (valid) level(s) in the past or future at which the attestation rights have to be returned. Parameter `delegate` can be used to restrict the results to the given delegates.\nParameter `consensus_key` can be used to restrict the results to the given consensus_keys. \nReturns the smallest attestation slots and the attestation power. Also returns the minimal timestamp that corresponds to attestation at the given level. The timestamps are omitted for levels in the past, and are only estimates for levels higher that the next block's, based on the hypothesis that all predecessor blocks were baked at the first round.",
        "parameters": [
          {
            "name": "level",
            "in": "query",
            "description": "A level integer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycle",
            "in": "query",
            "description": "A cycle integer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegate",
            "in": "query",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "consensus_key",
            "in": "query",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "level": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 2147483647
                      },
                      "delegates": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "delegate": {
                              "$ref": "#/components/schemas/Signature.Public_key_hash"
                            },
                            "first_slot": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "attestation_power": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "consensus_key": {
                              "$ref": "#/components/schemas/Signature.Public_key_hash"
                            }
                          },
                          "required": [
                            "delegate",
                            "first_slot",
                            "attestation_power",
                            "consensus_key"
                          ]
                        }
                      },
                      "estimated_time": {
                        "$ref": "#/components/schemas/timestamp.protocol"
                      }
                    },
                    "required": [
                      "level",
                      "delegates"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/baking_rights": {
      "get": {
        "description": "Retrieves the list of delegates allowed to bake a block.\nBy default, it gives the best baking opportunities (in terms of rounds) for bakers that have at least one opportunity below the 64th round for the next block.\nParameters `level` and `cycle` can be used to specify the (valid) level(s) in the past or future at which the baking rights have to be returned.\nParameter `delegate` can be used to restrict the results to the given delegates. Parameter `consensus_key` can be used to restrict the results to the given consensus_keys. If parameter `all` is set, all the baking opportunities for each baker at each level are returned, instead of just the first one.\nReturns the list of baking opportunities up to round 64. Also returns the minimal timestamps that correspond to these opportunities. The timestamps are omitted for levels in the past, and are only estimates for levels higher that the next block's, based on the hypothesis that all predecessor blocks were baked at the first round.",
        "parameters": [
          {
            "name": "level",
            "in": "query",
            "description": "A level integer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycle",
            "in": "query",
            "description": "A cycle integer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegate",
            "in": "query",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "consensus_key",
            "in": "query",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_round",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "all",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "level": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 2147483647
                      },
                      "delegate": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      },
                      "round": {
                        "type": "integer",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                      },
                      "estimated_time": {
                        "$ref": "#/components/schemas/timestamp.protocol"
                      },
                      "consensus_key": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      }
                    },
                    "required": [
                      "level",
                      "delegate",
                      "round",
                      "consensus_key"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/complete/{prefix}": {
      "get": {
        "description": "Try to complete a prefix of a Base58Check-encoded data. This RPC is actually able to complete hashes of block, operations, public_keys and contracts.",
        "parameters": [
          {
            "name": "prefix",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/unistring"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/current_level": {
      "get": {
        "description": "Returns the level of the interrogated block, or the one of a block located `offset` blocks after it in the chain. For instance, the next block if `offset` is 1. The offset cannot be negative.",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "description": "The level of the block relative to genesis. This is also the Shell's notion of level.",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 2147483647
                    },
                    "level_position": {
                      "description": "The level of the block relative to the successor of the genesis block. More precisely, it is the position of the block relative to the block that starts the \"Alpha family\" of protocols, which includes all protocols except Genesis (that is, from 001 onwards).",
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "cycle": {
                      "description": "The current cycle's number. Note that cycles are a protocol-specific notion. As a result, the cycle number starts at 0 with the first block of the Alpha family of protocols.",
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "cycle_position": {
                      "description": "The current level of the block relative to the first block of the current cycle.",
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "expected_commitment": {
                      "description": "Tells whether the baker of this block has to commit a seed nonce hash.",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "level",
                    "level_position",
                    "cycle",
                    "cycle_position",
                    "expected_commitment"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/forge/operations": {
      "post": {
        "description": "Forge an operation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "An operation's shell header.",
                "type": "object",
                "properties": {
                  "branch": {
                    "$ref": "#/components/schemas/block_hash"
                  },
                  "contents": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.operation.alpha.contents"
                    }
                  }
                },
                "required": [
                  "branch",
                  "contents"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/forge/protocol_data": {
      "post": {
        "description": "Forge the protocol-specific part of a block header",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payload_hash": {
                    "$ref": "#/components/schemas/value_hash"
                  },
                  "payload_round": {
                    "type": "integer",
                    "minimum": -2147483648,
                    "maximum": 2147483647
                  },
                  "nonce_hash": {
                    "$ref": "#/components/schemas/cycle_nonce"
                  },
                  "proof_of_work_nonce": {
                    "type": "string",
                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                  },
                  "per_block_votes": {
                    "$ref": "#/components/schemas/alpha.per_block_votes"
                  }
                },
                "required": [
                  "payload_hash",
                  "payload_round"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "protocol_data": {
                      "type": "string",
                      "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                    }
                  },
                  "required": [
                    "protocol_data"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/forge_block_header": {
      "post": {
        "description": "Forge a block header",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Block header",
                "description": "Block header. It contains both shell and protocol specific data.",
                "type": "object",
                "properties": {
                  "level": {
                    "type": "integer",
                    "minimum": -2147483648,
                    "maximum": 2147483647
                  },
                  "proto": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  },
                  "predecessor": {
                    "$ref": "#/components/schemas/block_hash"
                  },
                  "timestamp": {
                    "$ref": "#/components/schemas/timestamp.protocol"
                  },
                  "validation_pass": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  },
                  "operations_hash": {
                    "$ref": "#/components/schemas/Operation_list_list_hash"
                  },
                  "fitness": {
                    "$ref": "#/components/schemas/fitness"
                  },
                  "context": {
                    "$ref": "#/components/schemas/Context_hash"
                  },
                  "protocol_data": {
                    "type": "string",
                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                  }
                },
                "required": [
                  "level",
                  "proto",
                  "predecessor",
                  "timestamp",
                  "validation_pass",
                  "operations_hash",
                  "fitness",
                  "context",
                  "protocol_data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "block": {
                      "type": "string",
                      "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                    }
                  },
                  "required": [
                    "block"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/levels_in_current_cycle": {
      "get": {
        "description": "Levels of a cycle",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "first": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 2147483647
                    },
                    "last": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 2147483647
                    }
                  },
                  "required": [
                    "first",
                    "last"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/parse/block": {
      "post": {
        "description": "Parse a block",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Block header",
                "description": "Block header. It contains both shell and protocol specific data.",
                "type": "object",
                "properties": {
                  "level": {
                    "type": "integer",
                    "minimum": -2147483648,
                    "maximum": 2147483647
                  },
                  "proto": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  },
                  "predecessor": {
                    "$ref": "#/components/schemas/block_hash"
                  },
                  "timestamp": {
                    "$ref": "#/components/schemas/timestamp.protocol"
                  },
                  "validation_pass": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  },
                  "operations_hash": {
                    "$ref": "#/components/schemas/Operation_list_list_hash"
                  },
                  "fitness": {
                    "$ref": "#/components/schemas/fitness"
                  },
                  "context": {
                    "$ref": "#/components/schemas/Context_hash"
                  },
                  "protocol_data": {
                    "type": "string",
                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                  }
                },
                "required": [
                  "level",
                  "proto",
                  "predecessor",
                  "timestamp",
                  "validation_pass",
                  "operations_hash",
                  "fitness",
                  "context",
                  "protocol_data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "payload_hash": {
                      "$ref": "#/components/schemas/value_hash"
                    },
                    "payload_round": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "proof_of_work_nonce": {
                      "type": "string",
                      "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                    },
                    "seed_nonce_hash": {
                      "$ref": "#/components/schemas/cycle_nonce"
                    },
                    "liquidity_baking_toggle_vote": {
                      "$ref": "#/components/schemas/alpha.liquidity_baking_vote"
                    },
                    "adaptive_issuance_vote": {
                      "$ref": "#/components/schemas/alpha.adaptive_issuance_vote"
                    },
                    "signature": {
                      "$ref": "#/components/schemas/Signature.V1"
                    }
                  },
                  "required": [
                    "payload_hash",
                    "payload_round",
                    "proof_of_work_nonce",
                    "liquidity_baking_toggle_vote",
                    "adaptive_issuance_vote",
                    "signature"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/parse/operations": {
      "post": {
        "description": "Parse operations",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Supported RPC version is version '1'",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "operations": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/operation"
                    }
                  },
                  "check_signature": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "operations"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "description": "An operation's shell header.",
                    "type": "object",
                    "properties": {
                      "branch": {
                        "$ref": "#/components/schemas/block_hash"
                      },
                      "contents": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/alpha.operation.alpha.contents"
                        }
                      },
                      "signature": {
                        "$ref": "#/components/schemas/Signature.V1"
                      }
                    },
                    "required": [
                      "branch",
                      "contents"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/preapply/block": {
      "post": {
        "description": "Simulate the validation of a block that would contain the given operations and return the resulting fitness and context hash.",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "A date in seconds from epoch",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "protocol_data": {
                    "type": "object",
                    "properties": {
                      "protocol": {
                        "type": "string",
                        "enum": [
                          "ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK"
                        ]
                      },
                      "payload_hash": {
                        "$ref": "#/components/schemas/value_hash"
                      },
                      "payload_round": {
                        "type": "integer",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                      },
                      "proof_of_work_nonce": {
                        "type": "string",
                        "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                      },
                      "seed_nonce_hash": {
                        "$ref": "#/components/schemas/cycle_nonce"
                      },
                      "liquidity_baking_toggle_vote": {
                        "$ref": "#/components/schemas/alpha.liquidity_baking_vote"
                      },
                      "adaptive_issuance_vote": {
                        "$ref": "#/components/schemas/alpha.adaptive_issuance_vote"
                      },
                      "signature": {
                        "$ref": "#/components/schemas/Signature.V1"
                      }
                    },
                    "required": [
                      "protocol",
                      "payload_hash",
                      "payload_round",
                      "proof_of_work_nonce",
                      "liquidity_baking_toggle_vote",
                      "adaptive_issuance_vote",
                      "signature"
                    ]
                  },
                  "operations": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/next_operation"
                      }
                    }
                  }
                },
                "required": [
                  "protocol_data",
                  "operations"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "shell_header": {
                      "$ref": "#/components/schemas/block_header.shell"
                    },
                    "operations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "applied": {
                            "type": "array",
                            "items": {
                              "description": "An operation. The shell_header part indicates a block an operation is meant to apply on top of. The proto part is protocol-specific and appears as a binary blob.",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "$ref": "#/components/schemas/Operation_hash"
                                },
                                "branch": {
                                  "$ref": "#/components/schemas/block_hash"
                                },
                                "data": {
                                  "type": "string",
                                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                }
                              },
                              "required": [
                                "hash",
                                "branch",
                                "data"
                              ]
                            }
                          },
                          "refused": {
                            "type": "array",
                            "items": {
                              "description": "An operation. The shell_header part indicates a block an operation is meant to apply on top of. The proto part is protocol-specific and appears as a binary blob.",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "$ref": "#/components/schemas/Operation_hash"
                                },
                                "branch": {
                                  "$ref": "#/components/schemas/block_hash"
                                },
                                "data": {
                                  "type": "string",
                                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                },
                                "error": {
                                  "$ref": "#/components/schemas/error"
                                }
                              },
                              "required": [
                                "hash",
                                "branch",
                                "data",
                                "error"
                              ]
                            }
                          },
                          "outdated": {
                            "type": "array",
                            "items": {
                              "description": "An operation. The shell_header part indicates a block an operation is meant to apply on top of. The proto part is protocol-specific and appears as a binary blob.",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "$ref": "#/components/schemas/Operation_hash"
                                },
                                "branch": {
                                  "$ref": "#/components/schemas/block_hash"
                                },
                                "data": {
                                  "type": "string",
                                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                },
                                "error": {
                                  "$ref": "#/components/schemas/error"
                                }
                              },
                              "required": [
                                "hash",
                                "branch",
                                "data",
                                "error"
                              ]
                            }
                          },
                          "branch_refused": {
                            "type": "array",
                            "items": {
                              "description": "An operation. The shell_header part indicates a block an operation is meant to apply on top of. The proto part is protocol-specific and appears as a binary blob.",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "$ref": "#/components/schemas/Operation_hash"
                                },
                                "branch": {
                                  "$ref": "#/components/schemas/block_hash"
                                },
                                "data": {
                                  "type": "string",
                                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                },
                                "error": {
                                  "$ref": "#/components/schemas/error"
                                }
                              },
                              "required": [
                                "hash",
                                "branch",
                                "data",
                                "error"
                              ]
                            }
                          },
                          "branch_delayed": {
                            "type": "array",
                            "items": {
                              "description": "An operation. The shell_header part indicates a block an operation is meant to apply on top of. The proto part is protocol-specific and appears as a binary blob.",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "$ref": "#/components/schemas/Operation_hash"
                                },
                                "branch": {
                                  "$ref": "#/components/schemas/block_hash"
                                },
                                "data": {
                                  "type": "string",
                                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                },
                                "error": {
                                  "$ref": "#/components/schemas/error"
                                }
                              },
                              "required": [
                                "hash",
                                "branch",
                                "data",
                                "error"
                              ]
                            }
                          }
                        },
                        "required": [
                          "applied",
                          "refused",
                          "outdated",
                          "branch_refused",
                          "branch_delayed"
                        ]
                      }
                    }
                  },
                  "required": [
                    "shell_header",
                    "operations"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/preapply/operations": {
      "post": {
        "description": "Simulate the application of the operations with the context of the given block and return the result of each operation application.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Supported RPC versions are version \"1\" (default)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/next_operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_with_metadata"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/round": {
      "get": {
        "description": "Returns the round of the interrogated block, or the one of a block located `offset` blocks after in the chain (or before when negative). For instance, the next block if `offset` is 1.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "minimum": -2147483648,
                  "maximum": 2147483647
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/entrypoint": {
      "post": {
        "description": "Return the type of the given entrypoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "script": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "entrypoint": {
                    "$ref": "#/components/schemas/unistring"
                  }
                },
                "required": [
                  "script"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entrypoint_type": {
                      "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                    }
                  },
                  "required": [
                    "entrypoint_type"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/entrypoints": {
      "post": {
        "description": "Return the list of entrypoints of the given script",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "script": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  }
                },
                "required": [
                  "script"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unreachable": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/alpha.michelson.v1.primitives"
                            }
                          }
                        },
                        "required": [
                          "path"
                        ]
                      }
                    },
                    "entrypoints": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                      }
                    }
                  },
                  "required": [
                    "entrypoints"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/normalize_data": {
      "post": {
        "description": "Normalizes some data expression using the requested unparsing mode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "type": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "unparsing_mode": {
                    "oneOf": [
                      {
                        "title": "Readable",
                        "type": "string",
                        "enum": [
                          "Readable"
                        ]
                      },
                      {
                        "title": "Optimized",
                        "type": "string",
                        "enum": [
                          "Optimized"
                        ]
                      },
                      {
                        "title": "Optimized_legacy",
                        "type": "string",
                        "enum": [
                          "Optimized_legacy"
                        ]
                      }
                    ]
                  },
                  "legacy": {
                    "type": "boolean"
                  },
                  "other_contracts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "$ref": "#/components/schemas/Contract_hash"
                        },
                        "type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "address",
                        "type"
                      ]
                    }
                  },
                  "extra_big_maps": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/alpha.big_map_id"
                        },
                        "key_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "val_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "map_literal": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "id",
                        "key_type",
                        "val_type",
                        "map_literal"
                      ]
                    }
                  }
                },
                "required": [
                  "data",
                  "type",
                  "unparsing_mode"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "normalized": {
                      "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                    }
                  },
                  "required": [
                    "normalized"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/normalize_script": {
      "post": {
        "description": "Normalizes a Michelson script using the requested unparsing mode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "script": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "unparsing_mode": {
                    "oneOf": [
                      {
                        "title": "Readable",
                        "type": "string",
                        "enum": [
                          "Readable"
                        ]
                      },
                      {
                        "title": "Optimized",
                        "type": "string",
                        "enum": [
                          "Optimized"
                        ]
                      },
                      {
                        "title": "Optimized_legacy",
                        "type": "string",
                        "enum": [
                          "Optimized_legacy"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "script",
                  "unparsing_mode"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "normalized": {
                      "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                    }
                  },
                  "required": [
                    "normalized"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/normalize_stack": {
      "post": {
        "description": "Normalize a Michelson stack using the requested unparsing mode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "val": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "type",
                        "val"
                      ]
                    }
                  },
                  "unparsing_mode": {
                    "oneOf": [
                      {
                        "title": "Readable",
                        "type": "string",
                        "enum": [
                          "Readable"
                        ]
                      },
                      {
                        "title": "Optimized",
                        "type": "string",
                        "enum": [
                          "Optimized"
                        ]
                      },
                      {
                        "title": "Optimized_legacy",
                        "type": "string",
                        "enum": [
                          "Optimized_legacy"
                        ]
                      }
                    ]
                  },
                  "legacy": {
                    "type": "boolean"
                  },
                  "other_contracts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "$ref": "#/components/schemas/Contract_hash"
                        },
                        "type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "address",
                        "type"
                      ]
                    }
                  },
                  "extra_big_maps": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/alpha.big_map_id"
                        },
                        "key_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "val_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "map_literal": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "id",
                        "key_type",
                        "val_type",
                        "map_literal"
                      ]
                    }
                  }
                },
                "required": [
                  "input",
                  "unparsing_mode"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "output": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                          },
                          "val": {
                            "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                          }
                        },
                        "required": [
                          "type",
                          "val"
                        ]
                      }
                    }
                  },
                  "required": [
                    "output"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/normalize_type": {
      "post": {
        "description": "Normalizes some Michelson type by expanding `pair a b c` as `pair a (pair b c)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  }
                },
                "required": [
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "normalized": {
                      "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                    }
                  },
                  "required": [
                    "normalized"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/pack_data": {
      "post": {
        "description": "Computes the serialized version of some data expression using the same algorithm as script instruction PACK",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "type": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "gas": {
                    "$ref": "#/components/schemas/bignum"
                  }
                },
                "required": [
                  "data",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "packed": {
                      "type": "string",
                      "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                    },
                    "gas": {
                      "oneOf": [
                        {
                          "title": "Limited",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/bignum"
                            }
                          ]
                        },
                        {
                          "title": "Unaccounted",
                          "type": "string",
                          "enum": [
                            "unaccounted"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "packed",
                    "gas"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/run_code": {
      "post": {
        "description": "Run a Michelson script in the current context",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "script": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "storage": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "input": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/alpha.mutez"
                  },
                  "balance": {
                    "$ref": "#/components/schemas/alpha.mutez"
                  },
                  "chain_id": {
                    "$ref": "#/components/schemas/Chain_id"
                  },
                  "source": {
                    "$ref": "#/components/schemas/alpha.contract_id"
                  },
                  "payer": {
                    "$ref": "#/components/schemas/alpha.contract_id.implicit"
                  },
                  "self": {
                    "$ref": "#/components/schemas/alpha.contract_id.originated"
                  },
                  "entrypoint": {
                    "$ref": "#/components/schemas/unistring"
                  },
                  "unparsing_mode": {
                    "oneOf": [
                      {
                        "title": "Readable",
                        "type": "string",
                        "enum": [
                          "Readable"
                        ]
                      },
                      {
                        "title": "Optimized",
                        "type": "string",
                        "enum": [
                          "Optimized"
                        ]
                      },
                      {
                        "title": "Optimized_legacy",
                        "type": "string",
                        "enum": [
                          "Optimized_legacy"
                        ]
                      }
                    ]
                  },
                  "gas": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "now": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "level": {
                    "$ref": "#/components/schemas/positive_bignum"
                  },
                  "other_contracts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "$ref": "#/components/schemas/Contract_hash"
                        },
                        "type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "address",
                        "type"
                      ]
                    }
                  },
                  "extra_big_maps": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/alpha.big_map_id"
                        },
                        "key_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "val_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "map_literal": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "id",
                        "key_type",
                        "val_type",
                        "map_literal"
                      ]
                    }
                  }
                },
                "required": [
                  "script",
                  "storage",
                  "input",
                  "amount",
                  "chain_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "storage": {
                      "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                    },
                    "operations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                      }
                    },
                    "lazy_storage_diff": {
                      "$ref": "#/components/schemas/alpha.lazy_storage_diff"
                    }
                  },
                  "required": [
                    "storage",
                    "operations"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/run_instruction": {
      "post": {
        "description": "Run a single Michelson instruction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "val": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "type",
                        "val"
                      ]
                    }
                  },
                  "code": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "chain_id": {
                    "$ref": "#/components/schemas/Chain_id"
                  },
                  "gas": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "now": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "level": {
                    "$ref": "#/components/schemas/positive_bignum"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/alpha.contract_id"
                  },
                  "source": {
                    "$ref": "#/components/schemas/alpha.contract_id.implicit"
                  },
                  "self": {
                    "$ref": "#/components/schemas/alpha.contract_id.originated"
                  },
                  "parameter": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/alpha.mutez"
                  },
                  "balance": {
                    "$ref": "#/components/schemas/alpha.mutez"
                  },
                  "other_contracts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "$ref": "#/components/schemas/Contract_hash"
                        },
                        "type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "address",
                        "type"
                      ]
                    }
                  },
                  "big_maps": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/alpha.big_map_id"
                        },
                        "key_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "val_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "map_literal": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "id",
                        "key_type",
                        "val_type",
                        "map_literal"
                      ]
                    }
                  },
                  "unparsing_mode": {
                    "oneOf": [
                      {
                        "title": "Readable",
                        "type": "string",
                        "enum": [
                          "Readable"
                        ]
                      },
                      {
                        "title": "Optimized",
                        "type": "string",
                        "enum": [
                          "Optimized"
                        ]
                      },
                      {
                        "title": "Optimized_legacy",
                        "type": "string",
                        "enum": [
                          "Optimized_legacy"
                        ]
                      }
                    ]
                  },
                  "legacy": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "input",
                  "code",
                  "chain_id",
                  "amount"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "output": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                          },
                          "val": {
                            "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                          }
                        },
                        "required": [
                          "type",
                          "val"
                        ]
                      }
                    },
                    "gas": {
                      "oneOf": [
                        {
                          "title": "Limited",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/bignum"
                            }
                          ]
                        },
                        {
                          "title": "Unaccounted",
                          "type": "string",
                          "enum": [
                            "unaccounted"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "output",
                    "gas"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/run_operation": {
      "post": {
        "description": "Run an operation with the context of the given block and without signature checks. Return the operation application result, including the consumed gas. This RPC does not support consensus operations.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Supported RPC version is version '1'",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "operation": {
                    "description": "An operation's shell header.",
                    "type": "object",
                    "properties": {
                      "branch": {
                        "$ref": "#/components/schemas/block_hash"
                      },
                      "contents": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/alpha.operation.alpha.contents"
                        }
                      },
                      "signature": {
                        "$ref": "#/components/schemas/Signature.V1"
                      }
                    },
                    "required": [
                      "branch",
                      "contents"
                    ]
                  },
                  "chain_id": {
                    "$ref": "#/components/schemas/Chain_id"
                  }
                },
                "required": [
                  "operation",
                  "chain_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Operation_with_metadata",
                      "type": "object",
                      "properties": {
                        "contents": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/alpha.operation.alpha.operation_contents_and_result"
                          }
                        },
                        "signature": {
                          "$ref": "#/components/schemas/Signature.V1"
                        }
                      },
                      "required": [
                        "contents"
                      ]
                    },
                    {
                      "title": "Operation_without_metadata",
                      "type": "object",
                      "properties": {
                        "contents": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/alpha.operation.alpha.contents"
                          }
                        },
                        "signature": {
                          "$ref": "#/components/schemas/Signature.V1"
                        }
                      },
                      "required": [
                        "contents"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/run_script_view": {
      "post": {
        "description": "Simulate a call to a michelson view",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contract": {
                    "$ref": "#/components/schemas/alpha.contract_id.originated"
                  },
                  "view": {
                    "$ref": "#/components/schemas/unistring"
                  },
                  "input": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "unlimited_gas": {
                    "type": "boolean"
                  },
                  "chain_id": {
                    "$ref": "#/components/schemas/Chain_id"
                  },
                  "source": {
                    "$ref": "#/components/schemas/alpha.contract_id"
                  },
                  "payer": {
                    "$ref": "#/components/schemas/alpha.contract_id.implicit"
                  },
                  "gas": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "unparsing_mode": {
                    "oneOf": [
                      {
                        "title": "Readable",
                        "type": "string",
                        "enum": [
                          "Readable"
                        ]
                      },
                      {
                        "title": "Optimized",
                        "type": "string",
                        "enum": [
                          "Optimized"
                        ]
                      },
                      {
                        "title": "Optimized_legacy",
                        "type": "string",
                        "enum": [
                          "Optimized_legacy"
                        ]
                      }
                    ]
                  },
                  "now": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "level": {
                    "$ref": "#/components/schemas/positive_bignum"
                  },
                  "other_contracts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "$ref": "#/components/schemas/Contract_hash"
                        },
                        "type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "address",
                        "type"
                      ]
                    }
                  },
                  "extra_big_maps": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/alpha.big_map_id"
                        },
                        "key_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "val_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "map_literal": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "id",
                        "key_type",
                        "val_type",
                        "map_literal"
                      ]
                    }
                  }
                },
                "required": [
                  "contract",
                  "view",
                  "input",
                  "chain_id",
                  "unparsing_mode"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/run_view": {
      "post": {
        "description": "Simulate a call to a view following the TZIP-4 standard. See https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-4/tzip-4.md#view-entrypoints.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contract": {
                    "$ref": "#/components/schemas/alpha.contract_id.originated"
                  },
                  "entrypoint": {
                    "$ref": "#/components/schemas/unistring"
                  },
                  "input": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "chain_id": {
                    "$ref": "#/components/schemas/Chain_id"
                  },
                  "source": {
                    "$ref": "#/components/schemas/alpha.contract_id"
                  },
                  "payer": {
                    "$ref": "#/components/schemas/alpha.contract_id.implicit"
                  },
                  "gas": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "unparsing_mode": {
                    "oneOf": [
                      {
                        "title": "Readable",
                        "type": "string",
                        "enum": [
                          "Readable"
                        ]
                      },
                      {
                        "title": "Optimized",
                        "type": "string",
                        "enum": [
                          "Optimized"
                        ]
                      },
                      {
                        "title": "Optimized_legacy",
                        "type": "string",
                        "enum": [
                          "Optimized_legacy"
                        ]
                      }
                    ]
                  },
                  "now": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "level": {
                    "$ref": "#/components/schemas/positive_bignum"
                  },
                  "other_contracts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "$ref": "#/components/schemas/Contract_hash"
                        },
                        "type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "address",
                        "type"
                      ]
                    }
                  },
                  "extra_big_maps": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/alpha.big_map_id"
                        },
                        "key_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "val_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "map_literal": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "id",
                        "key_type",
                        "val_type",
                        "map_literal"
                      ]
                    }
                  }
                },
                "required": [
                  "contract",
                  "entrypoint",
                  "input",
                  "chain_id",
                  "unparsing_mode"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/script_size": {
      "post": {
        "description": "Compute the size of a script in the current context",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "program": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "storage": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "gas": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "legacy": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "program",
                  "storage"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "script_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    }
                  },
                  "required": [
                    "script_size"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/simulate_operation": {
      "post": {
        "description": "Simulate running an operation at some future moment (based on the number of blocks given in the `latency` argument), and return the operation application result. The result is the same as run_operation except for the consumed gas, which depends on the contents of the cache at that future moment. This RPC estimates future gas consumption by trying to predict the state of the cache using some heuristics.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Supported RPC version is version '1'",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "successor_level",
            "in": "query",
            "description": "If true, the simulation is done on the successor level of the current context.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "blocks_before_activation": {
                    "type": "integer",
                    "minimum": -2147483648,
                    "maximum": 2147483647
                  },
                  "operation": {
                    "description": "An operation's shell header.",
                    "type": "object",
                    "properties": {
                      "branch": {
                        "$ref": "#/components/schemas/block_hash"
                      },
                      "contents": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/alpha.operation.alpha.contents"
                        }
                      },
                      "signature": {
                        "$ref": "#/components/schemas/Signature.V1"
                      }
                    },
                    "required": [
                      "branch",
                      "contents"
                    ]
                  },
                  "chain_id": {
                    "$ref": "#/components/schemas/Chain_id"
                  },
                  "latency": {
                    "type": "integer",
                    "minimum": -32768,
                    "maximum": 32767
                  }
                },
                "required": [
                  "operation",
                  "chain_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Operation_with_metadata",
                      "type": "object",
                      "properties": {
                        "contents": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/alpha.operation.alpha.operation_contents_and_result"
                          }
                        },
                        "signature": {
                          "$ref": "#/components/schemas/Signature.V1"
                        }
                      },
                      "required": [
                        "contents"
                      ]
                    },
                    {
                      "title": "Operation_without_metadata",
                      "type": "object",
                      "properties": {
                        "contents": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/alpha.operation.alpha.contents"
                          }
                        },
                        "signature": {
                          "$ref": "#/components/schemas/Signature.V1"
                        }
                      },
                      "required": [
                        "contents"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/trace_code": {
      "post": {
        "description": "Run a Michelson script in the current context, keeping a trace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "script": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "storage": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "input": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/alpha.mutez"
                  },
                  "balance": {
                    "$ref": "#/components/schemas/alpha.mutez"
                  },
                  "chain_id": {
                    "$ref": "#/components/schemas/Chain_id"
                  },
                  "source": {
                    "$ref": "#/components/schemas/alpha.contract_id"
                  },
                  "payer": {
                    "$ref": "#/components/schemas/alpha.contract_id.implicit"
                  },
                  "self": {
                    "$ref": "#/components/schemas/alpha.contract_id.originated"
                  },
                  "entrypoint": {
                    "$ref": "#/components/schemas/unistring"
                  },
                  "unparsing_mode": {
                    "oneOf": [
                      {
                        "title": "Readable",
                        "type": "string",
                        "enum": [
                          "Readable"
                        ]
                      },
                      {
                        "title": "Optimized",
                        "type": "string",
                        "enum": [
                          "Optimized"
                        ]
                      },
                      {
                        "title": "Optimized_legacy",
                        "type": "string",
                        "enum": [
                          "Optimized_legacy"
                        ]
                      }
                    ]
                  },
                  "gas": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "now": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "level": {
                    "$ref": "#/components/schemas/positive_bignum"
                  },
                  "other_contracts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "$ref": "#/components/schemas/Contract_hash"
                        },
                        "type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "address",
                        "type"
                      ]
                    }
                  },
                  "extra_big_maps": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/alpha.big_map_id"
                        },
                        "key_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "val_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "map_literal": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "id",
                        "key_type",
                        "val_type",
                        "map_literal"
                      ]
                    }
                  }
                },
                "required": [
                  "script",
                  "storage",
                  "input",
                  "amount",
                  "chain_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "storage": {
                      "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                    },
                    "operations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                      }
                    },
                    "trace": {
                      "$ref": "#/components/schemas/alpha.scripted.trace"
                    },
                    "lazy_storage_diff": {
                      "$ref": "#/components/schemas/alpha.lazy_storage_diff"
                    }
                  },
                  "required": [
                    "storage",
                    "operations",
                    "trace"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/typecheck_code": {
      "post": {
        "description": "Typecheck a piece of code in the current context",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "program": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "gas": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "legacy": {
                    "type": "boolean"
                  },
                  "show_types": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "program"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type_map": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "location": {
                            "$ref": "#/components/schemas/micheline.location"
                          },
                          "stack_before": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            }
                          },
                          "stack_after": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            }
                          }
                        },
                        "required": [
                          "location",
                          "stack_before",
                          "stack_after"
                        ]
                      }
                    },
                    "gas": {
                      "oneOf": [
                        {
                          "title": "Limited",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/bignum"
                            }
                          ]
                        },
                        {
                          "title": "Unaccounted",
                          "type": "string",
                          "enum": [
                            "unaccounted"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "type_map",
                    "gas"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/typecheck_data": {
      "post": {
        "description": "Check that some data expression is well formed and of a given type in the current context",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "type": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "gas": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "legacy": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "data",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "gas": {
                      "oneOf": [
                        {
                          "title": "Limited",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/bignum"
                            }
                          ]
                        },
                        {
                          "title": "Unaccounted",
                          "type": "string",
                          "enum": [
                            "unaccounted"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "gas"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/validators": {
      "get": {
        "description": "Retrieves the level, the attestation slots and the public key hash of each delegate allowed to attest a block.\nBy default, it provides this information for the next level.\nParameter `level` can be used to specify the (valid) level(s) in the past or future at which the attestation rights have to be returned. Parameter `delegate` can be used to restrict the results results to the given delegates. Parameter `consensus_key` can be used to restrict the results to the given consensus_keys.\n",
        "parameters": [
          {
            "name": "level",
            "in": "query",
            "description": "A level integer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegate",
            "in": "query",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "consensus_key",
            "in": "query",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "level": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 2147483647
                      },
                      "delegate": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      },
                      "slots": {
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 65535
                        }
                      },
                      "consensus_key": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      }
                    },
                    "required": [
                      "level",
                      "delegate",
                      "slots",
                      "consensus_key"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/live_blocks": {
      "get": {
        "description": "List the ancestors of the given block which, if referred to as the branch in an operation header, are recent enough for that operation to be included in the current block.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/block_hash"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/metadata": {
      "get": {
        "description": "All the metadata associated to the block.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Supported RPC versions are version \"1\" (default)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_header_metadata"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/metadata_hash": {
      "get": {
        "description": "Hash of the metadata associated to the block. This is only set on blocks starting from environment V1.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "A Tezos block metadata ID (Base58Check-encoded)",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/unistring"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/operation_hashes": {
      "get": {
        "description": "The hashes of all the operations included in the block.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Operation_hash"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/operation_hashes/{list_offset}": {
      "get": {
        "description": "All the operations included in `n-th` validation pass of the block.",
        "parameters": [
          {
            "name": "list_offset",
            "in": "path",
            "description": "Index `n` of the requested validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Operation_hash"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/operation_hashes/{list_offset}/{operation_offset}": {
      "get": {
        "description": "The hash of then `m-th` operation in the `n-th` validation pass of the block.",
        "parameters": [
          {
            "name": "list_offset",
            "in": "path",
            "description": "Index `n` of the requested validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operation_offset",
            "in": "path",
            "description": "Index `m` of the requested operation in its validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "A Tezos operation ID (Base58Check-encoded)",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/unistring"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/operation_metadata_hashes": {
      "get": {
        "description": "The hashes of all the operation metadata included in the block. This is only set on blocks starting from environment V1.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Operation_metadata_hash"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/operation_metadata_hashes/{list_offset}": {
      "get": {
        "description": "All the operation metadata included in `n-th` validation pass of the block. This is only set on blocks starting from environment V1.",
        "parameters": [
          {
            "name": "list_offset",
            "in": "path",
            "description": "Index `n` of the requested validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Operation_metadata_hash"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/operation_metadata_hashes/{list_offset}/{operation_offset}": {
      "get": {
        "description": "The hash of then `m-th` operation metadata in the `n-th` validation pass of the block. This is only set on blocks starting from environment V1.",
        "parameters": [
          {
            "name": "list_offset",
            "in": "path",
            "description": "Index `n` of the requested validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operation_offset",
            "in": "path",
            "description": "Index `m` of the requested operation in its validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "A Tezos operation metadata ID (Base58Check-encoded)",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/unistring"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/operations": {
      "get": {
        "description": "All the operations included in the block.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Supported RPC versions are version \"1\" (default)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force_metadata",
            "in": "query",
            "description": "DEPRECATED: Forces to recompute the operations metadata if it was considered as too large.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "defines the way metadata are queried Specifies whether or not if the operations metadata should be returned. To get the metadata, even if it is needed to recompute them, use \"always\". To avoid getting the metadata, use \"never\". By default, the metadata will be returned depending on the node's metadata size limit policy.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/operation"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/operations/{list_offset}": {
      "get": {
        "description": "All the operations included in `n-th` validation pass of the block.",
        "parameters": [
          {
            "name": "list_offset",
            "in": "path",
            "description": "Index `n` of the requested validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Supported RPC versions are version \"1\" (default)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force_metadata",
            "in": "query",
            "description": "DEPRECATED: Forces to recompute the operations metadata if it was considered as too large.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "defines the way metadata are queried Specifies whether or not if the operations metadata should be returned. To get the metadata, even if it is needed to recompute them, use \"always\". To avoid getting the metadata, use \"never\". By default, the metadata will be returned depending on the node's metadata size limit policy.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/operation"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/operations/{list_offset}/{operation_offset}": {
      "get": {
        "description": "The `m-th` operation in the `n-th` validation pass of the block.",
        "parameters": [
          {
            "name": "list_offset",
            "in": "path",
            "description": "Index `n` of the requested validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operation_offset",
            "in": "path",
            "description": "Index `m` of the requested operation in its validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Supported RPC versions are version \"1\" (default)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force_metadata",
            "in": "query",
            "description": "DEPRECATED: Forces to recompute the operations metadata if it was considered as too large.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "defines the way metadata are queried Specifies whether or not if the operations metadata should be returned. To get the metadata, even if it is needed to recompute them, use \"always\". To avoid getting the metadata, use \"never\". By default, the metadata will be returned depending on the node's metadata size limit policy.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/operation"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/operations_metadata_hash": {
      "get": {
        "description": "The root hash of the operations metadata from the block. This is only set on blocks starting from environment V1.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "A list of list of operation metadata (Base58Check-encoded)",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/unistring"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/protocols": {
      "get": {
        "description": "Current and next protocol.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "protocol": {
                      "$ref": "#/components/schemas/Protocol_hash"
                    },
                    "next_protocol": {
                      "$ref": "#/components/schemas/Protocol_hash"
                    }
                  },
                  "required": [
                    "protocol",
                    "next_protocol"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/resulting_context_hash": {
      "get": {
        "description": "Context hash resulting of the block application.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "A hash of context (Base58Check-encoded)",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/unistring"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/votes/ballot_list": {
      "get": {
        "description": "Ballots casted so far during a voting period.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "pkh": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      },
                      "ballot": {
                        "type": "string",
                        "enum": [
                          "nay",
                          "yay",
                          "pass"
                        ]
                      }
                    },
                    "required": [
                      "pkh",
                      "ballot"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/votes/ballots": {
      "get": {
        "description": "Sum of ballots casted so far during a voting period.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "yay": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "nay": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "pass": {
                      "$ref": "#/components/schemas/int64"
                    }
                  },
                  "required": [
                    "yay",
                    "nay",
                    "pass"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/votes/current_period": {
      "get": {
        "description": "Returns the voting period (index, kind, starting position) and related information (position, remaining) of the interrogated block.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "voting_period": {
                      "description": "The voting period to which the block belongs.",
                      "type": "object",
                      "properties": {
                        "index": {
                          "description": "The voting period's index. Starts at 0 with the first block of the Alpha family of protocols.",
                          "type": "integer",
                          "minimum": -2147483648,
                          "maximum": 2147483647
                        },
                        "kind": {
                          "description": "One of the several kinds of periods in the voting procedure.",
                          "oneOf": [
                            {
                              "title": "Proposal",
                              "type": "string",
                              "enum": [
                                "proposal"
                              ]
                            },
                            {
                              "title": "exploration",
                              "type": "string",
                              "enum": [
                                "exploration"
                              ]
                            },
                            {
                              "title": "Cooldown",
                              "type": "string",
                              "enum": [
                                "cooldown"
                              ]
                            },
                            {
                              "title": "Promotion",
                              "type": "string",
                              "enum": [
                                "promotion"
                              ]
                            },
                            {
                              "title": "Adoption",
                              "type": "string",
                              "enum": [
                                "adoption"
                              ]
                            }
                          ]
                        },
                        "start_position": {
                          "description": "The relative position of the first level of the period with respect to the first level of the Alpha family of protocols.",
                          "type": "integer",
                          "minimum": -2147483648,
                          "maximum": 2147483647
                        }
                      },
                      "required": [
                        "index",
                        "kind",
                        "start_position"
                      ]
                    },
                    "position": {
                      "description": "The position of the block within the voting period.",
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "remaining": {
                      "description": "The number of blocks remaining till the end of the voting period.",
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    }
                  },
                  "required": [
                    "voting_period",
                    "position",
                    "remaining"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/votes/current_proposal": {
      "get": {
        "description": "Current proposal under evaluation.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Protocol_hash"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/votes/current_quorum": {
      "get": {
        "description": "Current expected quorum.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "minimum": -2147483648,
                  "maximum": 2147483647
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/votes/listings": {
      "get": {
        "description": "List of delegates with their voting power.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "pkh": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      },
                      "voting_power": {
                        "$ref": "#/components/schemas/int64"
                      }
                    },
                    "required": [
                      "pkh",
                      "voting_power"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/votes/proposal_count/{pkh}": {
      "get": {
        "description": "Number of votes casted during the current period.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "minimum": -1073741824,
                  "maximum": 1073741823
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/votes/proposals": {
      "get": {
        "description": "List of proposals with number of supporters.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Protocol_hash"
                        },
                        {
                          "$ref": "#/components/schemas/int64"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/votes/successor_period": {
      "get": {
        "description": "Returns the voting period (index, kind, starting position) and related information (position, remaining) of the next block.Useful to craft operations that will be valid in the next block.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "voting_period": {
                      "description": "The voting period to which the block belongs.",
                      "type": "object",
                      "properties": {
                        "index": {
                          "description": "The voting period's index. Starts at 0 with the first block of the Alpha family of protocols.",
                          "type": "integer",
                          "minimum": -2147483648,
                          "maximum": 2147483647
                        },
                        "kind": {
                          "description": "One of the several kinds of periods in the voting procedure.",
                          "oneOf": [
                            {
                              "title": "Proposal",
                              "type": "string",
                              "enum": [
                                "proposal"
                              ]
                            },
                            {
                              "title": "exploration",
                              "type": "string",
                              "enum": [
                                "exploration"
                              ]
                            },
                            {
                              "title": "Cooldown",
                              "type": "string",
                              "enum": [
                                "cooldown"
                              ]
                            },
                            {
                              "title": "Promotion",
                              "type": "string",
                              "enum": [
                                "promotion"
                              ]
                            },
                            {
                              "title": "Adoption",
                              "type": "string",
                              "enum": [
                                "adoption"
                              ]
                            }
                          ]
                        },
                        "start_position": {
                          "description": "The relative position of the first level of the period with respect to the first level of the Alpha family of protocols.",
                          "type": "integer",
                          "minimum": -2147483648,
                          "maximum": 2147483647
                        }
                      },
                      "required": [
                        "index",
                        "kind",
                        "start_position"
                      ]
                    },
                    "position": {
                      "description": "The position of the block within the voting period.",
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "remaining": {
                      "description": "The number of blocks remaining till the end of the voting period.",
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    }
                  },
                  "required": [
                    "voting_period",
                    "position",
                    "remaining"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    },
    "/votes/total_voting_power": {
      "get": {
        "description": "Total voting power in the voting listings.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "64 bit integers",
                  "description": "Decimal representation of 64 bit integers",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Blinded public key hash": {
        "title": "A blinded public key hash (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Chain_id": {
        "title": "Network identifier (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Context_hash": {
        "title": "A hash of context (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Contract_hash": {
        "title": "A contract ID (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "DAL_commitment": {
        "title": "Commitment representation for the DAL (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Ed25519.Public_key_hash": {
        "title": "An Ed25519 public key hash (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Operation_hash": {
        "title": "A Tezos operation ID (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Operation_list_list_hash": {
        "title": "A list of list of operations (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Operation_metadata_hash": {
        "title": "A Tezos operation metadata ID (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Protocol_hash": {
        "title": "A Tezos protocol ID (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Signature.Public_key": {
        "title": "A Ed25519, Secp256k1, or P256 public key (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Signature.Public_key_hash": {
        "title": "A Ed25519, Secp256k1, P256, or BLS public key hash (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Signature.V0": {
        "title": "A Ed25519, Secp256k1 or P256 signature (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Signature.V1": {
        "title": "A Ed25519, Secp256k1, P256 or BLS signature (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Zk_rollup_hash": {
        "title": "A zk rollup address (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "alpha.adaptive_issuance_vote": {
        "oneOf": [
          {
            "title": "per_block_vote_on",
            "type": "string",
            "enum": [
              "on"
            ]
          },
          {
            "title": "per_block_vote_off",
            "type": "string",
            "enum": [
              "off"
            ]
          },
          {
            "title": "per_block_vote_pass",
            "type": "string",
            "enum": [
              "pass"
            ]
          }
        ]
      },
      "alpha.apply_internal_results.alpha.operation_result": {
        "oneOf": [
          {
            "title": "transaction",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "transaction"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/alpha.transaction_destination"
              },
              "nonce": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "amount": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "destination": {
                "$ref": "#/components/schemas/alpha.transaction_destination"
              },
              "parameters": {
                "type": "object",
                "properties": {
                  "entrypoint": {
                    "$ref": "#/components/schemas/alpha.entrypoint"
                  },
                  "value": {}
                },
                "required": [
                  "entrypoint",
                  "value"
                ]
              },
              "result": {
                "$ref": "#/components/schemas/alpha.operation.alpha.internal_operation_result.transaction"
              }
            },
            "required": [
              "kind",
              "source",
              "nonce",
              "amount",
              "destination",
              "result"
            ]
          },
          {
            "title": "origination",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "origination"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/alpha.transaction_destination"
              },
              "nonce": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "balance": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "script": {
                "$ref": "#/components/schemas/alpha.scripted.contracts"
              },
              "result": {
                "$ref": "#/components/schemas/alpha.operation.alpha.internal_operation_result.origination"
              }
            },
            "required": [
              "kind",
              "source",
              "nonce",
              "balance",
              "script",
              "result"
            ]
          },
          {
            "title": "delegation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "delegation"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/alpha.transaction_destination"
              },
              "nonce": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "result": {
                "$ref": "#/components/schemas/alpha.operation.alpha.internal_operation_result.delegation"
              }
            },
            "required": [
              "kind",
              "source",
              "nonce",
              "result"
            ]
          },
          {
            "title": "event",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "event"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/alpha.transaction_destination"
              },
              "nonce": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "type": {
                "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
              },
              "tag": {
                "$ref": "#/components/schemas/alpha.entrypoint"
              },
              "payload": {
                "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
              },
              "result": {
                "$ref": "#/components/schemas/alpha.operation.alpha.internal_operation_result.event"
              }
            },
            "required": [
              "kind",
              "source",
              "nonce",
              "type",
              "result"
            ]
          }
        ]
      },
      "alpha.big_map_id": {
        "title": "Big map identifier",
        "description": "A big map identifier",
        "oneOf": [
          {
            "$ref": "#/components/schemas/bignum"
          }
        ]
      },
      "alpha.block_header.alpha.full_header": {
        "title": "Shell header",
        "description": "Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.",
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "proto": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "predecessor": {
            "$ref": "#/components/schemas/block_hash"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp.protocol"
          },
          "validation_pass": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "operations_hash": {
            "$ref": "#/components/schemas/Operation_list_list_hash"
          },
          "fitness": {
            "$ref": "#/components/schemas/fitness"
          },
          "context": {
            "$ref": "#/components/schemas/Context_hash"
          },
          "payload_hash": {
            "$ref": "#/components/schemas/value_hash"
          },
          "payload_round": {
            "type": "integer",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "proof_of_work_nonce": {
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
          },
          "seed_nonce_hash": {
            "$ref": "#/components/schemas/cycle_nonce"
          },
          "liquidity_baking_toggle_vote": {
            "$ref": "#/components/schemas/alpha.liquidity_baking_vote"
          },
          "adaptive_issuance_vote": {
            "$ref": "#/components/schemas/alpha.adaptive_issuance_vote"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature.V1"
          }
        },
        "required": [
          "level",
          "proto",
          "predecessor",
          "timestamp",
          "validation_pass",
          "operations_hash",
          "fitness",
          "context",
          "payload_hash",
          "payload_round",
          "proof_of_work_nonce",
          "liquidity_baking_toggle_vote",
          "adaptive_issuance_vote",
          "signature"
        ]
      },
      "alpha.bond_id": {
        "type": "object",
        "properties": {
          "smart_rollup": {
            "$ref": "#/components/schemas/smart_rollup_address"
          }
        },
        "required": [
          "smart_rollup"
        ]
      },
      "alpha.contract_id": {
        "title": "A contract handle",
        "description": "A contract notation as given to an RPC or inside scripts. Can be a base58 implicit contract hash or a base58 originated contract hash.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "alpha.contract_id.implicit": {
        "title": "A contract handle -- implicit account",
        "description": "A contract notation as given to an RPC or inside scripts. Can be a base58 implicit contract hash.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "alpha.contract_id.originated": {
        "title": "A contract handle -- originated account",
        "description": "A contract notation as given to an RPC or inside scripts. Can be a base58 originated contract hash.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "alpha.entrypoint": {
        "title": "entrypoint",
        "description": "Named entrypoint to a Michelson smart contract",
        "oneOf": [
          {
            "title": "default",
            "type": "string",
            "enum": [
              "default"
            ]
          },
          {
            "title": "root",
            "type": "string",
            "enum": [
              "root"
            ]
          },
          {
            "title": "do",
            "type": "string",
            "enum": [
              "do"
            ]
          },
          {
            "title": "set_delegate",
            "type": "string",
            "enum": [
              "set_delegate"
            ]
          },
          {
            "title": "remove_delegate",
            "type": "string",
            "enum": [
              "remove_delegate"
            ]
          },
          {
            "title": "deposit",
            "type": "string",
            "enum": [
              "deposit"
            ]
          },
          {
            "title": "stake",
            "type": "string",
            "enum": [
              "stake"
            ]
          },
          {
            "title": "unstake",
            "type": "string",
            "enum": [
              "unstake"
            ]
          },
          {
            "title": "finalize_unstake",
            "type": "string",
            "enum": [
              "finalize_unstake"
            ]
          },
          {
            "title": "set_delegate_parameters",
            "type": "string",
            "enum": [
              "set_delegate_parameters"
            ]
          },
          {
            "title": "named",
            "oneOf": [
              {
                "$ref": "#/components/schemas/unistring"
              }
            ]
          }
        ]
      },
      "alpha.error": {
        "description": "The full list of RPC errors would be too long to include.\nIt is available at RPC `/errors` (GET).\nErrors specific to protocol Alpha have an id that starts with `proto.alpha`."
      },
      "alpha.frozen_staker": {
        "title": "frozen_staker",
        "description": "Abstract notion of staker used in operation receipts for frozen deposits, either a single staker or all the stakers delegating to some delegate.",
        "oneOf": [
          {
            "title": "Single",
            "type": "object",
            "properties": {
              "contract": {
                "$ref": "#/components/schemas/alpha.contract_id"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              }
            },
            "required": [
              "contract",
              "delegate"
            ]
          },
          {
            "title": "Shared",
            "type": "object",
            "properties": {
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              }
            },
            "required": [
              "delegate"
            ]
          },
          {
            "title": "Baker",
            "type": "object",
            "properties": {
              "baker_own_stake": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              }
            },
            "required": [
              "baker_own_stake"
            ]
          },
          {
            "title": "Baker_edge",
            "type": "object",
            "properties": {
              "baker_edge": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              }
            },
            "required": [
              "baker_edge"
            ]
          }
        ]
      },
      "alpha.inlined.attestation": {
        "description": "An operation's shell header.",
        "type": "object",
        "properties": {
          "branch": {
            "$ref": "#/components/schemas/block_hash"
          },
          "operations": {
            "$ref": "#/components/schemas/alpha.inlined.attestation_mempool.contents"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature.V1"
          }
        },
        "required": [
          "branch",
          "operations"
        ]
      },
      "alpha.inlined.attestation_mempool.contents": {
        "oneOf": [
          {
            "title": "Attestation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "attestation"
                ]
              },
              "slot": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "level": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "round": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "block_payload_hash": {
                "$ref": "#/components/schemas/value_hash"
              }
            },
            "required": [
              "kind",
              "slot",
              "level",
              "round",
              "block_payload_hash"
            ]
          },
          {
            "title": "Attestation_with_dal",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "attestation_with_dal"
                ]
              },
              "slot": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "level": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "round": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "block_payload_hash": {
                "$ref": "#/components/schemas/value_hash"
              },
              "dal_attestation": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "kind",
              "slot",
              "level",
              "round",
              "block_payload_hash",
              "dal_attestation"
            ]
          }
        ]
      },
      "alpha.inlined.preattestation": {
        "description": "An operation's shell header.",
        "type": "object",
        "properties": {
          "branch": {
            "$ref": "#/components/schemas/block_hash"
          },
          "operations": {
            "$ref": "#/components/schemas/alpha.inlined.preattestation.contents"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature.V1"
          }
        },
        "required": [
          "branch",
          "operations"
        ]
      },
      "alpha.inlined.preattestation.contents": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "preattestation"
            ]
          },
          "slot": {
            "type": "integer",
            "minimum": 0,
            "maximum": 65535
          },
          "level": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2147483647
          },
          "round": {
            "type": "integer",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "block_payload_hash": {
            "$ref": "#/components/schemas/value_hash"
          }
        },
        "required": [
          "kind",
          "slot",
          "level",
          "round",
          "block_payload_hash"
        ]
      },
      "alpha.lazy_storage_diff": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "title": "big_map",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "big_map"
                  ]
                },
                "id": {
                  "$ref": "#/components/schemas/alpha.big_map_id"
                },
                "diff": {
                  "oneOf": [
                    {
                      "title": "update",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "update"
                          ]
                        },
                        "updates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key_hash": {
                                "$ref": "#/components/schemas/script_expr"
                              },
                              "key": {
                                "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                              },
                              "value": {
                                "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                              }
                            },
                            "required": [
                              "key_hash",
                              "key"
                            ]
                          }
                        }
                      },
                      "required": [
                        "action",
                        "updates"
                      ]
                    },
                    {
                      "title": "remove",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "remove"
                          ]
                        }
                      },
                      "required": [
                        "action"
                      ]
                    },
                    {
                      "title": "copy",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "copy"
                          ]
                        },
                        "source": {
                          "$ref": "#/components/schemas/alpha.big_map_id"
                        },
                        "updates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key_hash": {
                                "$ref": "#/components/schemas/script_expr"
                              },
                              "key": {
                                "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                              },
                              "value": {
                                "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                              }
                            },
                            "required": [
                              "key_hash",
                              "key"
                            ]
                          }
                        }
                      },
                      "required": [
                        "action",
                        "source",
                        "updates"
                      ]
                    },
                    {
                      "title": "alloc",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "alloc"
                          ]
                        },
                        "updates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key_hash": {
                                "$ref": "#/components/schemas/script_expr"
                              },
                              "key": {
                                "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                              },
                              "value": {
                                "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                              }
                            },
                            "required": [
                              "key_hash",
                              "key"
                            ]
                          }
                        },
                        "key_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "value_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "action",
                        "updates",
                        "key_type",
                        "value_type"
                      ]
                    }
                  ]
                }
              },
              "required": [
                "kind",
                "id",
                "diff"
              ]
            },
            {
              "title": "sapling_state",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "sapling_state"
                  ]
                },
                "id": {
                  "$ref": "#/components/schemas/alpha.sapling_state_id"
                },
                "diff": {
                  "oneOf": [
                    {
                      "title": "update",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "update"
                          ]
                        },
                        "updates": {
                          "type": "object",
                          "properties": {
                            "commitments_and_ciphertexts": {
                              "type": "array",
                              "items": {
                                "type": "array",
                                "items": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/components/schemas/sapling.transaction.commitment"
                                    },
                                    {
                                      "$ref": "#/components/schemas/sapling.transaction.ciphertext"
                                    }
                                  ]
                                }
                              }
                            },
                            "nullifiers": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/sapling.transaction.nullifier"
                              }
                            }
                          },
                          "required": [
                            "commitments_and_ciphertexts",
                            "nullifiers"
                          ]
                        }
                      },
                      "required": [
                        "action",
                        "updates"
                      ]
                    },
                    {
                      "title": "remove",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "remove"
                          ]
                        }
                      },
                      "required": [
                        "action"
                      ]
                    },
                    {
                      "title": "copy",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "copy"
                          ]
                        },
                        "source": {
                          "$ref": "#/components/schemas/alpha.sapling_state_id"
                        },
                        "updates": {
                          "type": "object",
                          "properties": {
                            "commitments_and_ciphertexts": {
                              "type": "array",
                              "items": {
                                "type": "array",
                                "items": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/components/schemas/sapling.transaction.commitment"
                                    },
                                    {
                                      "$ref": "#/components/schemas/sapling.transaction.ciphertext"
                                    }
                                  ]
                                }
                              }
                            },
                            "nullifiers": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/sapling.transaction.nullifier"
                              }
                            }
                          },
                          "required": [
                            "commitments_and_ciphertexts",
                            "nullifiers"
                          ]
                        }
                      },
                      "required": [
                        "action",
                        "source",
                        "updates"
                      ]
                    },
                    {
                      "title": "alloc",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "alloc"
                          ]
                        },
                        "updates": {
                          "type": "object",
                          "properties": {
                            "commitments_and_ciphertexts": {
                              "type": "array",
                              "items": {
                                "type": "array",
                                "items": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/components/schemas/sapling.transaction.commitment"
                                    },
                                    {
                                      "$ref": "#/components/schemas/sapling.transaction.ciphertext"
                                    }
                                  ]
                                }
                              }
                            },
                            "nullifiers": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/sapling.transaction.nullifier"
                              }
                            }
                          },
                          "required": [
                            "commitments_and_ciphertexts",
                            "nullifiers"
                          ]
                        },
                        "memo_size": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 65535
                        }
                      },
                      "required": [
                        "action",
                        "updates",
                        "memo_size"
                      ]
                    }
                  ]
                }
              },
              "required": [
                "kind",
                "id",
                "diff"
              ]
            }
          ]
        }
      },
      "alpha.liquidity_baking_vote": {
        "oneOf": [
          {
            "title": "per_block_vote_on",
            "type": "string",
            "enum": [
              "on"
            ]
          },
          {
            "title": "per_block_vote_off",
            "type": "string",
            "enum": [
              "off"
            ]
          },
          {
            "title": "per_block_vote_pass",
            "type": "string",
            "enum": [
              "pass"
            ]
          }
        ]
      },
      "alpha.michelson.v1.primitives": {
        "type": "string",
        "enum": [
          "SHA256",
          "GT",
          "RIGHT",
          "SAPLING_EMPTY_STATE",
          "False",
          "RENAME",
          "CAST",
          "tx_rollup_l2_address",
          "PACK",
          "BYTES",
          "timestamp",
          "bls12_381_g2",
          "Pair",
          "IF_LEFT",
          "contract",
          "mutez",
          "storage",
          "PAIR",
          "view",
          "UNPACK",
          "ADD",
          "DROP",
          "big_map",
          "MUL",
          "NAT",
          "SELF",
          "CONTRACT",
          "CDR",
          "SAPLING_VERIFY_UPDATE",
          "pair",
          "LSL",
          "int",
          "operation",
          "SHA512",
          "CREATE_ACCOUNT",
          "BLAKE2B",
          "SPLIT_TICKET",
          "LEFT",
          "never",
          "unit",
          "address",
          "signature",
          "CHAIN_ID",
          "constant",
          "SLICE",
          "SENDER",
          "IMPLICIT_ACCOUNT",
          "key_hash",
          "AMOUNT",
          "CHECK_SIGNATURE",
          "sapling_state",
          "LT",
          "EXEC",
          "Elt",
          "EMIT",
          "NONE",
          "CREATE_CONTRACT",
          "LSR",
          "SET_DELEGATE",
          "OPEN_CHEST",
          "TRANSFER_TOKENS",
          "Some",
          "parameter",
          "set",
          "bls12_381_fr",
          "EDIV",
          "None",
          "STEPS_TO_QUOTA",
          "key",
          "ABS",
          "list",
          "NEVER",
          "map",
          "CAR",
          "IF",
          "GET_AND_UPDATE",
          "CONCAT",
          "LOOP",
          "DIG",
          "KECCAK",
          "Lambda_rec",
          "SOME",
          "option",
          "SUB",
          "INT",
          "PUSH",
          "CONS",
          "Unit",
          "ISNAT",
          "NEG",
          "XOR",
          "APPLY",
          "UNPAIR",
          "JOIN_TICKETS",
          "SIZE",
          "lambda",
          "AND",
          "NEQ",
          "or",
          "BALANCE",
          "UNIT",
          "VOTING_POWER",
          "OR",
          "LAMBDA",
          "chest",
          "LOOP_LEFT",
          "True",
          "Right",
          "Ticket",
          "HASH_KEY",
          "DUG",
          "sapling_transaction",
          "SUB_MUTEZ",
          "EMPTY_BIG_MAP",
          "MEM",
          "IF_NONE",
          "nat",
          "TOTAL_VOTING_POWER",
          "LE",
          "Left",
          "chest_key",
          "READ_TICKET",
          "ticket",
          "bls12_381_g1",
          "LEVEL",
          "VIEW",
          "string",
          "PAIRING_CHECK",
          "LAMBDA_REC",
          "NOW",
          "SHA3",
          "bool",
          "MIN_BLOCK_TIME",
          "GET",
          "bytes",
          "sapling_transaction_deprecated",
          "NIL",
          "IF_CONS",
          "GE",
          "NOT",
          "SWAP",
          "ITER",
          "ADDRESS",
          "TICKET",
          "DUP",
          "EMPTY_MAP",
          "UPDATE",
          "chain_id",
          "TICKET_DEPRECATED",
          "EMPTY_SET",
          "FAILWITH",
          "MAP",
          "SOURCE",
          "DIP",
          "COMPARE",
          "EQ",
          "SELF_ADDRESS",
          "code"
        ]
      },
      "alpha.mutez": {
        "$ref": "#/components/schemas/positive_bignum"
      },
      "alpha.operation.alpha.contents": {
        "oneOf": [
          {
            "title": "Preattestation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "preattestation"
                ]
              },
              "slot": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "level": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "round": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "block_payload_hash": {
                "$ref": "#/components/schemas/value_hash"
              }
            },
            "required": [
              "kind",
              "slot",
              "level",
              "round",
              "block_payload_hash"
            ]
          },
          {
            "title": "Attestation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "attestation"
                ]
              },
              "slot": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "level": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "round": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "block_payload_hash": {
                "$ref": "#/components/schemas/value_hash"
              }
            },
            "required": [
              "kind",
              "slot",
              "level",
              "round",
              "block_payload_hash"
            ]
          },
          {
            "title": "Attestation_with_dal",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "attestation_with_dal"
                ]
              },
              "slot": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "level": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "round": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "block_payload_hash": {
                "$ref": "#/components/schemas/value_hash"
              },
              "dal_attestation": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "kind",
              "slot",
              "level",
              "round",
              "block_payload_hash",
              "dal_attestation"
            ]
          },
          {
            "title": "Double_preattestation_evidence",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "double_preattestation_evidence"
                ]
              },
              "op1": {
                "$ref": "#/components/schemas/alpha.inlined.preattestation"
              },
              "op2": {
                "$ref": "#/components/schemas/alpha.inlined.preattestation"
              }
            },
            "required": [
              "kind",
              "op1",
              "op2"
            ]
          },
          {
            "title": "Double_attestation_evidence",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "double_attestation_evidence"
                ]
              },
              "op1": {
                "$ref": "#/components/schemas/alpha.inlined.attestation"
              },
              "op2": {
                "$ref": "#/components/schemas/alpha.inlined.attestation"
              }
            },
            "required": [
              "kind",
              "op1",
              "op2"
            ]
          },
          {
            "title": "Seed_nonce_revelation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "seed_nonce_revelation"
                ]
              },
              "level": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "nonce": {
                "type": "string",
                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
              }
            },
            "required": [
              "kind",
              "level",
              "nonce"
            ]
          },
          {
            "title": "Vdf_revelation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "vdf_revelation"
                ]
              },
              "solution": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                    },
                    {
                      "type": "string",
                      "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                    }
                  ]
                }
              }
            },
            "required": [
              "kind",
              "solution"
            ]
          },
          {
            "title": "Double_baking_evidence",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "double_baking_evidence"
                ]
              },
              "bh1": {
                "$ref": "#/components/schemas/alpha.block_header.alpha.full_header"
              },
              "bh2": {
                "$ref": "#/components/schemas/alpha.block_header.alpha.full_header"
              }
            },
            "required": [
              "kind",
              "bh1",
              "bh2"
            ]
          },
          {
            "title": "Activate_account",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "activate_account"
                ]
              },
              "pkh": {
                "$ref": "#/components/schemas/Ed25519.Public_key_hash"
              },
              "secret": {
                "type": "string",
                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
              }
            },
            "required": [
              "kind",
              "pkh",
              "secret"
            ]
          },
          {
            "title": "Proposals",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "proposals"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "period": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "proposals": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Protocol_hash"
                }
              }
            },
            "required": [
              "kind",
              "source",
              "period",
              "proposals"
            ]
          },
          {
            "title": "Ballot",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "ballot"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "period": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "proposal": {
                "$ref": "#/components/schemas/Protocol_hash"
              },
              "ballot": {
                "type": "string",
                "enum": [
                  "nay",
                  "yay",
                  "pass"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "period",
              "proposal",
              "ballot"
            ]
          },
          {
            "title": "Reveal",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "reveal"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "public_key": {
                "$ref": "#/components/schemas/Signature.Public_key"
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "public_key"
            ]
          },
          {
            "title": "Transaction",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "transaction"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "amount": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "destination": {
                "$ref": "#/components/schemas/alpha.contract_id"
              },
              "parameters": {
                "type": "object",
                "properties": {
                  "entrypoint": {
                    "$ref": "#/components/schemas/alpha.entrypoint"
                  },
                  "value": {}
                },
                "required": [
                  "entrypoint",
                  "value"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "amount",
              "destination"
            ]
          },
          {
            "title": "Origination",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "origination"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "balance": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "script": {
                "$ref": "#/components/schemas/alpha.scripted.contracts"
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "balance",
              "script"
            ]
          },
          {
            "title": "Delegation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "delegation"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit"
            ]
          },
          {
            "title": "Set_deposits_limit",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "set_deposits_limit"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "limit": {
                "$ref": "#/components/schemas/alpha.mutez"
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit"
            ]
          },
          {
            "title": "Increase_paid_storage",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "increase_paid_storage"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "amount": {
                "$ref": "#/components/schemas/bignum"
              },
              "destination": {
                "$ref": "#/components/schemas/alpha.contract_id.originated"
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "amount",
              "destination"
            ]
          },
          {
            "title": "Update_consensus_key",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "update_consensus_key"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "pk": {
                "$ref": "#/components/schemas/Signature.Public_key"
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "pk"
            ]
          },
          {
            "title": "Drain_delegate",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "drain_delegate"
                ]
              },
              "consensus_key": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "destination": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              }
            },
            "required": [
              "kind",
              "consensus_key",
              "delegate",
              "destination"
            ]
          },
          {
            "title": "Failing_noop",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "failing_noop"
                ]
              },
              "arbitrary": {
                "type": "string",
                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
              }
            },
            "required": [
              "kind",
              "arbitrary"
            ]
          },
          {
            "title": "Register_global_constant",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "register_global_constant"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "value": {}
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "value"
            ]
          },
          {
            "title": "Transfer_ticket",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "transfer_ticket"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "ticket_contents": {},
              "ticket_ty": {},
              "ticket_ticketer": {
                "$ref": "#/components/schemas/alpha.contract_id"
              },
              "ticket_amount": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "destination": {
                "$ref": "#/components/schemas/alpha.contract_id"
              },
              "entrypoint": {
                "$ref": "#/components/schemas/unistring"
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "ticket_contents",
              "ticket_ty",
              "ticket_ticketer",
              "ticket_amount",
              "destination",
              "entrypoint"
            ]
          },
          {
            "title": "Dal_publish_commitment",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "dal_publish_commitment"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "slot_header": {
                "type": "object",
                "properties": {
                  "slot_index": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  },
                  "commitment": {
                    "$ref": "#/components/schemas/DAL_commitment"
                  },
                  "commitment_proof": {
                    "type": "string",
                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                  }
                },
                "required": [
                  "slot_index",
                  "commitment",
                  "commitment_proof"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "slot_header"
            ]
          },
          {
            "title": "Smart_rollup_originate",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_originate"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "pvm_kind": {
                "type": "string",
                "enum": [
                  "wasm_2_0_0",
                  "arith",
                  "riscv"
                ]
              },
              "kernel": {
                "type": "string",
                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
              },
              "parameters_ty": {},
              "whitelist": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Signature.Public_key_hash"
                }
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "pvm_kind",
              "kernel",
              "parameters_ty"
            ]
          },
          {
            "title": "Smart_rollup_add_messages",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_add_messages"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "message": {
                "type": "array",
                "items": {
                  "type": "string",
                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                }
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "message"
            ]
          },
          {
            "title": "Smart_rollup_cement",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_cement"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "rollup": {
                "$ref": "#/components/schemas/smart_rollup_address"
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "rollup"
            ]
          },
          {
            "title": "Smart_rollup_publish",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_publish"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "rollup": {
                "$ref": "#/components/schemas/smart_rollup_address"
              },
              "commitment": {
                "type": "object",
                "properties": {
                  "compressed_state": {
                    "$ref": "#/components/schemas/smart_rollup_state_hash"
                  },
                  "inbox_level": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 2147483647
                  },
                  "predecessor": {
                    "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                  },
                  "number_of_ticks": {
                    "$ref": "#/components/schemas/int64"
                  }
                },
                "required": [
                  "compressed_state",
                  "inbox_level",
                  "predecessor",
                  "number_of_ticks"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "rollup",
              "commitment"
            ]
          },
          {
            "title": "Smart_rollup_refute",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_refute"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "rollup": {
                "$ref": "#/components/schemas/smart_rollup_address"
              },
              "opponent": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "refutation": {
                "oneOf": [
                  {
                    "title": "Start",
                    "type": "object",
                    "properties": {
                      "refutation_kind": {
                        "type": "string",
                        "enum": [
                          "start"
                        ]
                      },
                      "player_commitment_hash": {
                        "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                      },
                      "opponent_commitment_hash": {
                        "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                      }
                    },
                    "required": [
                      "refutation_kind",
                      "player_commitment_hash",
                      "opponent_commitment_hash"
                    ]
                  },
                  {
                    "title": "Move",
                    "type": "object",
                    "properties": {
                      "refutation_kind": {
                        "type": "string",
                        "enum": [
                          "move"
                        ]
                      },
                      "choice": {
                        "$ref": "#/components/schemas/positive_bignum"
                      },
                      "step": {
                        "oneOf": [
                          {
                            "title": "Dissection",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "state": {
                                  "$ref": "#/components/schemas/smart_rollup_state_hash"
                                },
                                "tick": {
                                  "$ref": "#/components/schemas/positive_bignum"
                                }
                              },
                              "required": [
                                "tick"
                              ]
                            }
                          },
                          {
                            "title": "Proof",
                            "type": "object",
                            "properties": {
                              "pvm_step": {
                                "type": "string",
                                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                              },
                              "input_proof": {
                                "oneOf": [
                                  {
                                    "title": "inbox proof",
                                    "type": "object",
                                    "properties": {
                                      "input_proof_kind": {
                                        "type": "string",
                                        "enum": [
                                          "inbox_proof"
                                        ]
                                      },
                                      "level": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "maximum": 2147483647
                                      },
                                      "message_counter": {
                                        "$ref": "#/components/schemas/positive_bignum"
                                      },
                                      "serialized_proof": {
                                        "type": "string",
                                        "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                      }
                                    },
                                    "required": [
                                      "input_proof_kind",
                                      "level",
                                      "message_counter",
                                      "serialized_proof"
                                    ]
                                  },
                                  {
                                    "title": "reveal proof",
                                    "type": "object",
                                    "properties": {
                                      "input_proof_kind": {
                                        "type": "string",
                                        "enum": [
                                          "reveal_proof"
                                        ]
                                      },
                                      "reveal_proof": {
                                        "oneOf": [
                                          {
                                            "title": "raw data proof",
                                            "type": "object",
                                            "properties": {
                                              "reveal_proof_kind": {
                                                "type": "string",
                                                "enum": [
                                                  "raw_data_proof"
                                                ]
                                              },
                                              "raw_data": {
                                                "type": "string",
                                                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                              }
                                            },
                                            "required": [
                                              "reveal_proof_kind",
                                              "raw_data"
                                            ]
                                          },
                                          {
                                            "title": "metadata proof",
                                            "type": "object",
                                            "properties": {
                                              "reveal_proof_kind": {
                                                "type": "string",
                                                "enum": [
                                                  "metadata_proof"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "reveal_proof_kind"
                                            ]
                                          },
                                          {
                                            "title": "dal page proof",
                                            "type": "object",
                                            "properties": {
                                              "reveal_proof_kind": {
                                                "type": "string",
                                                "enum": [
                                                  "dal_page_proof"
                                                ]
                                              },
                                              "dal_page_id": {
                                                "type": "object",
                                                "properties": {
                                                  "published_level": {
                                                    "type": "integer",
                                                    "minimum": 0,
                                                    "maximum": 2147483647
                                                  },
                                                  "slot_index": {
                                                    "type": "integer",
                                                    "minimum": 0,
                                                    "maximum": 255
                                                  },
                                                  "page_index": {
                                                    "type": "integer",
                                                    "minimum": -32768,
                                                    "maximum": 32767
                                                  }
                                                },
                                                "required": [
                                                  "published_level",
                                                  "slot_index",
                                                  "page_index"
                                                ]
                                              },
                                              "dal_proof": {
                                                "type": "string",
                                                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                              }
                                            },
                                            "required": [
                                              "reveal_proof_kind",
                                              "dal_page_id",
                                              "dal_proof"
                                            ]
                                          },
                                          {
                                            "title": "dal parameters proof",
                                            "type": "object",
                                            "properties": {
                                              "reveal_proof_kind": {
                                                "type": "string",
                                                "enum": [
                                                  "dal_parameters_proof"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "reveal_proof_kind"
                                            ]
                                          }
                                        ]
                                      }
                                    },
                                    "required": [
                                      "input_proof_kind",
                                      "reveal_proof"
                                    ]
                                  },
                                  {
                                    "title": "first input",
                                    "type": "object",
                                    "properties": {
                                      "input_proof_kind": {
                                        "type": "string",
                                        "enum": [
                                          "first_input"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "input_proof_kind"
                                    ]
                                  }
                                ]
                              }
                            },
                            "required": [
                              "pvm_step"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "refutation_kind",
                      "choice",
                      "step"
                    ]
                  }
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "rollup",
              "opponent",
              "refutation"
            ]
          },
          {
            "title": "Smart_rollup_timeout",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_timeout"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "rollup": {
                "$ref": "#/components/schemas/smart_rollup_address"
              },
              "stakers": {
                "type": "object",
                "properties": {
                  "alice": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  },
                  "bob": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  }
                },
                "required": [
                  "alice",
                  "bob"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "rollup",
              "stakers"
            ]
          },
          {
            "title": "Smart_rollup_execute_outbox_message",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_execute_outbox_message"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "rollup": {
                "$ref": "#/components/schemas/smart_rollup_address"
              },
              "cemented_commitment": {
                "$ref": "#/components/schemas/smart_rollup_commitment_hash"
              },
              "output_proof": {
                "type": "string",
                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "rollup",
              "cemented_commitment",
              "output_proof"
            ]
          },
          {
            "title": "Smart_rollup_recover_bond",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_recover_bond"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "rollup": {
                "$ref": "#/components/schemas/smart_rollup_address"
              },
              "staker": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "rollup",
              "staker"
            ]
          },
          {
            "title": "Zk_rollup_origination",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "zk_rollup_origination"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "public_parameters": {
                "type": "string",
                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
              },
              "circuits_info": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/unistring"
                      },
                      {
                        "oneOf": [
                          {
                            "title": "Public",
                            "type": "object",
                            "properties": {
                              "public": {}
                            },
                            "required": [
                              "public"
                            ]
                          },
                          {
                            "title": "Private",
                            "type": "object",
                            "properties": {
                              "private": {}
                            },
                            "required": [
                              "private"
                            ]
                          },
                          {
                            "title": "Fee",
                            "type": "object",
                            "properties": {
                              "fee": {}
                            },
                            "required": [
                              "fee"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              "init_state": {
                "type": "array",
                "items": {
                  "type": "string",
                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                }
              },
              "nb_ops": {
                "type": "integer",
                "minimum": -1073741824,
                "maximum": 1073741823
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "public_parameters",
              "circuits_info",
              "init_state",
              "nb_ops"
            ]
          },
          {
            "title": "Zk_rollup_publish",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "zk_rollup_publish"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "zk_rollup": {
                "$ref": "#/components/schemas/Zk_rollup_hash"
              },
              "op": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "op_code": {
                            "type": "integer",
                            "minimum": -1073741824,
                            "maximum": 1073741823
                          },
                          "price": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "$ref": "#/components/schemas/script_expr"
                              },
                              "amount": {
                                "$ref": "#/components/schemas/bignum"
                              }
                            },
                            "required": [
                              "id",
                              "amount"
                            ]
                          },
                          "l1_dst": {
                            "$ref": "#/components/schemas/Signature.Public_key_hash"
                          },
                          "rollup_id": {
                            "$ref": "#/components/schemas/Zk_rollup_hash"
                          },
                          "payload": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                            }
                          }
                        },
                        "required": [
                          "op_code",
                          "price",
                          "l1_dst",
                          "rollup_id",
                          "payload"
                        ]
                      },
                      {
                        "nullable": true,
                        "oneOf": [
                          {
                            "title": "Some",
                            "type": "object",
                            "properties": {
                              "contents": {
                                "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                              },
                              "ty": {
                                "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                              },
                              "ticketer": {
                                "$ref": "#/components/schemas/alpha.contract_id"
                              }
                            },
                            "required": [
                              "contents",
                              "ty",
                              "ticketer"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "zk_rollup",
              "op"
            ]
          },
          {
            "title": "Zk_rollup_update",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "zk_rollup_update"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "zk_rollup": {
                "$ref": "#/components/schemas/Zk_rollup_hash"
              },
              "update": {
                "type": "object",
                "properties": {
                  "pending_pis": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/unistring"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "new_state": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                }
                              },
                              "fee": {
                                "type": "string",
                                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                              },
                              "exit_validity": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "new_state",
                              "fee",
                              "exit_validity"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "private_pis": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/unistring"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "new_state": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                }
                              },
                              "fee": {
                                "type": "string",
                                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                              }
                            },
                            "required": [
                              "new_state",
                              "fee"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "fee_pi": {
                    "type": "object",
                    "properties": {
                      "new_state": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                        }
                      }
                    },
                    "required": [
                      "new_state"
                    ]
                  },
                  "proof": {
                    "type": "string",
                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                  }
                },
                "required": [
                  "pending_pis",
                  "private_pis",
                  "fee_pi",
                  "proof"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "zk_rollup",
              "update"
            ]
          }
        ]
      },
      "alpha.operation.alpha.internal_operation_result.delegation": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              }
            },
            "required": [
              "status"
            ]
          }
        ]
      },
      "alpha.operation.alpha.internal_operation_result.event": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          }
        ]
      },
      "alpha.operation.alpha.internal_operation_result.origination": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "originated_contracts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.contract_id.originated"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_size": {
                "$ref": "#/components/schemas/bignum"
              },
              "paid_storage_size_diff": {
                "$ref": "#/components/schemas/bignum"
              },
              "lazy_storage_diff": {
                "$ref": "#/components/schemas/alpha.lazy_storage_diff"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "originated_contracts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.contract_id.originated"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_size": {
                "$ref": "#/components/schemas/bignum"
              },
              "paid_storage_size_diff": {
                "$ref": "#/components/schemas/bignum"
              },
              "lazy_storage_diff": {
                "$ref": "#/components/schemas/alpha.lazy_storage_diff"
              }
            },
            "required": [
              "status"
            ]
          }
        ]
      },
      "alpha.operation.alpha.internal_operation_result.transaction": {
        "oneOf": [
          {
            "title": "Applied",
            "oneOf": [
              {
                "title": "To_contract",
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "applied"
                    ]
                  },
                  "storage": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "ticket_receipt": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ticket_token": {
                          "type": "object",
                          "properties": {
                            "ticketer": {
                              "$ref": "#/components/schemas/alpha.contract_id"
                            },
                            "content_type": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            },
                            "content": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            }
                          },
                          "required": [
                            "ticketer",
                            "content_type",
                            "content"
                          ]
                        },
                        "updates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "account": {
                                "$ref": "#/components/schemas/alpha.transaction_destination"
                              },
                              "amount": {
                                "$ref": "#/components/schemas/bignum"
                              }
                            },
                            "required": [
                              "account",
                              "amount"
                            ]
                          }
                        }
                      },
                      "required": [
                        "ticket_token",
                        "updates"
                      ]
                    }
                  },
                  "originated_contracts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.contract_id.originated"
                    }
                  },
                  "consumed_milligas": {
                    "$ref": "#/components/schemas/positive_bignum"
                  },
                  "storage_size": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "paid_storage_size_diff": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "allocated_destination_contract": {
                    "type": "boolean"
                  },
                  "lazy_storage_diff": {
                    "$ref": "#/components/schemas/alpha.lazy_storage_diff"
                  }
                },
                "required": [
                  "status"
                ]
              },
              {
                "title": "To_smart_rollup",
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "applied"
                    ]
                  },
                  "consumed_milligas": {
                    "$ref": "#/components/schemas/positive_bignum"
                  },
                  "ticket_receipt": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ticket_token": {
                          "type": "object",
                          "properties": {
                            "ticketer": {
                              "$ref": "#/components/schemas/alpha.contract_id"
                            },
                            "content_type": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            },
                            "content": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            }
                          },
                          "required": [
                            "ticketer",
                            "content_type",
                            "content"
                          ]
                        },
                        "updates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "account": {
                                "$ref": "#/components/schemas/alpha.transaction_destination"
                              },
                              "amount": {
                                "$ref": "#/components/schemas/bignum"
                              }
                            },
                            "required": [
                              "account",
                              "amount"
                            ]
                          }
                        }
                      },
                      "required": [
                        "ticket_token",
                        "updates"
                      ]
                    }
                  }
                },
                "required": [
                  "status",
                  "ticket_receipt"
                ]
              }
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "oneOf": [
              {
                "title": "To_contract",
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "backtracked"
                    ]
                  },
                  "errors": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.error"
                    }
                  },
                  "storage": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "ticket_receipt": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ticket_token": {
                          "type": "object",
                          "properties": {
                            "ticketer": {
                              "$ref": "#/components/schemas/alpha.contract_id"
                            },
                            "content_type": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            },
                            "content": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            }
                          },
                          "required": [
                            "ticketer",
                            "content_type",
                            "content"
                          ]
                        },
                        "updates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "account": {
                                "$ref": "#/components/schemas/alpha.transaction_destination"
                              },
                              "amount": {
                                "$ref": "#/components/schemas/bignum"
                              }
                            },
                            "required": [
                              "account",
                              "amount"
                            ]
                          }
                        }
                      },
                      "required": [
                        "ticket_token",
                        "updates"
                      ]
                    }
                  },
                  "originated_contracts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.contract_id.originated"
                    }
                  },
                  "consumed_milligas": {
                    "$ref": "#/components/schemas/positive_bignum"
                  },
                  "storage_size": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "paid_storage_size_diff": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "allocated_destination_contract": {
                    "type": "boolean"
                  },
                  "lazy_storage_diff": {
                    "$ref": "#/components/schemas/alpha.lazy_storage_diff"
                  }
                },
                "required": [
                  "status"
                ]
              },
              {
                "title": "To_smart_rollup",
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "backtracked"
                    ]
                  },
                  "errors": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.error"
                    }
                  },
                  "consumed_milligas": {
                    "$ref": "#/components/schemas/positive_bignum"
                  },
                  "ticket_receipt": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ticket_token": {
                          "type": "object",
                          "properties": {
                            "ticketer": {
                              "$ref": "#/components/schemas/alpha.contract_id"
                            },
                            "content_type": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            },
                            "content": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            }
                          },
                          "required": [
                            "ticketer",
                            "content_type",
                            "content"
                          ]
                        },
                        "updates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "account": {
                                "$ref": "#/components/schemas/alpha.transaction_destination"
                              },
                              "amount": {
                                "$ref": "#/components/schemas/bignum"
                              }
                            },
                            "required": [
                              "account",
                              "amount"
                            ]
                          }
                        }
                      },
                      "required": [
                        "ticket_token",
                        "updates"
                      ]
                    }
                  }
                },
                "required": [
                  "status",
                  "ticket_receipt"
                ]
              }
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_contents_and_result": {
        "oneOf": [
          {
            "title": "Attestation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "attestation"
                ]
              },
              "slot": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "level": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "round": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "block_payload_hash": {
                "$ref": "#/components/schemas/value_hash"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "delegate": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  },
                  "consensus_power": {
                    "type": "integer",
                    "minimum": -1073741824,
                    "maximum": 1073741823
                  },
                  "consensus_key": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  }
                },
                "required": [
                  "delegate",
                  "consensus_power",
                  "consensus_key"
                ]
              }
            },
            "required": [
              "kind",
              "slot",
              "level",
              "round",
              "block_payload_hash",
              "metadata"
            ]
          },
          {
            "title": "Attestation_with_dal",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "attestation_with_dal"
                ]
              },
              "slot": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "level": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "round": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "block_payload_hash": {
                "$ref": "#/components/schemas/value_hash"
              },
              "dal_attestation": {
                "$ref": "#/components/schemas/bignum"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "delegate": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  },
                  "consensus_power": {
                    "type": "integer",
                    "minimum": -1073741824,
                    "maximum": 1073741823
                  },
                  "consensus_key": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  }
                },
                "required": [
                  "delegate",
                  "consensus_power",
                  "consensus_key"
                ]
              }
            },
            "required": [
              "kind",
              "slot",
              "level",
              "round",
              "block_payload_hash",
              "dal_attestation",
              "metadata"
            ]
          },
          {
            "title": "Preattestation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "preattestation"
                ]
              },
              "slot": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "level": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "round": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "block_payload_hash": {
                "$ref": "#/components/schemas/value_hash"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "delegate": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  },
                  "consensus_power": {
                    "type": "integer",
                    "minimum": -1073741824,
                    "maximum": 1073741823
                  },
                  "consensus_key": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  }
                },
                "required": [
                  "delegate",
                  "consensus_power",
                  "consensus_key"
                ]
              }
            },
            "required": [
              "kind",
              "slot",
              "level",
              "round",
              "block_payload_hash",
              "metadata"
            ]
          },
          {
            "title": "Double_attestation_evidence",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "double_attestation_evidence"
                ]
              },
              "op1": {
                "$ref": "#/components/schemas/alpha.inlined.attestation"
              },
              "op2": {
                "$ref": "#/components/schemas/alpha.inlined.attestation"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "forbidden_delegate": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  },
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  }
                }
              }
            },
            "required": [
              "kind",
              "op1",
              "op2",
              "metadata"
            ]
          },
          {
            "title": "Double_preattestation_evidence",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "double_preattestation_evidence"
                ]
              },
              "op1": {
                "$ref": "#/components/schemas/alpha.inlined.preattestation"
              },
              "op2": {
                "$ref": "#/components/schemas/alpha.inlined.preattestation"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "forbidden_delegate": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  },
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  }
                }
              }
            },
            "required": [
              "kind",
              "op1",
              "op2",
              "metadata"
            ]
          },
          {
            "title": "Seed_nonce_revelation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "seed_nonce_revelation"
                ]
              },
              "level": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "nonce": {
                "type": "string",
                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  }
                }
              }
            },
            "required": [
              "kind",
              "level",
              "nonce",
              "metadata"
            ]
          },
          {
            "title": "Vdf_revelation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "vdf_revelation"
                ]
              },
              "solution": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                    },
                    {
                      "type": "string",
                      "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                    }
                  ]
                }
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  }
                }
              }
            },
            "required": [
              "kind",
              "solution",
              "metadata"
            ]
          },
          {
            "title": "Double_baking_evidence",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "double_baking_evidence"
                ]
              },
              "bh1": {
                "$ref": "#/components/schemas/alpha.block_header.alpha.full_header"
              },
              "bh2": {
                "$ref": "#/components/schemas/alpha.block_header.alpha.full_header"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "forbidden_delegate": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  },
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  }
                }
              }
            },
            "required": [
              "kind",
              "bh1",
              "bh2",
              "metadata"
            ]
          },
          {
            "title": "Activate_account",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "activate_account"
                ]
              },
              "pkh": {
                "$ref": "#/components/schemas/Ed25519.Public_key_hash"
              },
              "secret": {
                "type": "string",
                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  }
                }
              }
            },
            "required": [
              "kind",
              "pkh",
              "secret",
              "metadata"
            ]
          },
          {
            "title": "Proposals",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "proposals"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "period": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "proposals": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Protocol_hash"
                }
              },
              "metadata": {
                "type": "object",
                "properties": {}
              }
            },
            "required": [
              "kind",
              "source",
              "period",
              "proposals",
              "metadata"
            ]
          },
          {
            "title": "Ballot",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "ballot"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "period": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "proposal": {
                "$ref": "#/components/schemas/Protocol_hash"
              },
              "ballot": {
                "type": "string",
                "enum": [
                  "nay",
                  "yay",
                  "pass"
                ]
              },
              "metadata": {
                "type": "object",
                "properties": {}
              }
            },
            "required": [
              "kind",
              "source",
              "period",
              "proposal",
              "ballot",
              "metadata"
            ]
          },
          {
            "title": "Drain_delegate",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "drain_delegate"
                ]
              },
              "consensus_key": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "destination": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "allocated_destination_contract": {
                    "type": "boolean"
                  }
                }
              }
            },
            "required": [
              "kind",
              "consensus_key",
              "delegate",
              "destination",
              "metadata"
            ]
          },
          {
            "title": "Reveal",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "reveal"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "public_key": {
                "$ref": "#/components/schemas/Signature.Public_key"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.reveal"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "public_key",
              "metadata"
            ]
          },
          {
            "title": "Transaction",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "transaction"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "amount": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "destination": {
                "$ref": "#/components/schemas/alpha.contract_id"
              },
              "parameters": {
                "type": "object",
                "properties": {
                  "entrypoint": {
                    "$ref": "#/components/schemas/alpha.entrypoint"
                  },
                  "value": {}
                },
                "required": [
                  "entrypoint",
                  "value"
                ]
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.transaction"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "amount",
              "destination",
              "metadata"
            ]
          },
          {
            "title": "Origination",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "origination"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "balance": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "script": {
                "$ref": "#/components/schemas/alpha.scripted.contracts"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.origination"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "balance",
              "script",
              "metadata"
            ]
          },
          {
            "title": "Delegation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "delegation"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.delegation"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "metadata"
            ]
          },
          {
            "title": "Register_global_constant",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "register_global_constant"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "value": {},
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.register_global_constant"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "value",
              "metadata"
            ]
          },
          {
            "title": "Set_deposits_limit",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "set_deposits_limit"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "limit": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.set_deposits_limit"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "metadata"
            ]
          },
          {
            "title": "Increase_paid_storage",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "increase_paid_storage"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "amount": {
                "$ref": "#/components/schemas/bignum"
              },
              "destination": {
                "$ref": "#/components/schemas/alpha.contract_id.originated"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.increase_paid_storage"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "amount",
              "destination",
              "metadata"
            ]
          },
          {
            "title": "Update_consensus_key",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "update_consensus_key"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "pk": {
                "$ref": "#/components/schemas/Signature.Public_key"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.update_consensus_key"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "pk",
              "metadata"
            ]
          },
          {
            "title": "Transfer_ticket",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "transfer_ticket"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "ticket_contents": {},
              "ticket_ty": {},
              "ticket_ticketer": {
                "$ref": "#/components/schemas/alpha.contract_id"
              },
              "ticket_amount": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "destination": {
                "$ref": "#/components/schemas/alpha.contract_id"
              },
              "entrypoint": {
                "$ref": "#/components/schemas/unistring"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.transfer_ticket"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "ticket_contents",
              "ticket_ty",
              "ticket_ticketer",
              "ticket_amount",
              "destination",
              "entrypoint",
              "metadata"
            ]
          },
          {
            "title": "Dal_publish_commitment",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "dal_publish_commitment"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "slot_header": {
                "type": "object",
                "properties": {
                  "slot_index": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  },
                  "commitment": {
                    "$ref": "#/components/schemas/DAL_commitment"
                  },
                  "commitment_proof": {
                    "type": "string",
                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                  }
                },
                "required": [
                  "slot_index",
                  "commitment",
                  "commitment_proof"
                ]
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.dal_publish_commitment"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "slot_header",
              "metadata"
            ]
          },
          {
            "title": "Smart_rollup_originate",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_originate"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "pvm_kind": {
                "type": "string",
                "enum": [
                  "wasm_2_0_0",
                  "arith",
                  "riscv"
                ]
              },
              "kernel": {
                "type": "string",
                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
              },
              "parameters_ty": {},
              "whitelist": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Signature.Public_key_hash"
                }
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.smart_rollup_originate"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "pvm_kind",
              "kernel",
              "parameters_ty",
              "metadata"
            ]
          },
          {
            "title": "Smart_rollup_add_messages",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_add_messages"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "message": {
                "type": "array",
                "items": {
                  "type": "string",
                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                }
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.smart_rollup_add_messages"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "message",
              "metadata"
            ]
          },
          {
            "title": "Smart_rollup_cement",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_cement"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "rollup": {
                "$ref": "#/components/schemas/smart_rollup_address"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.smart_rollup_cement"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "rollup",
              "metadata"
            ]
          },
          {
            "title": "Smart_rollup_publish",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_publish"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "rollup": {
                "$ref": "#/components/schemas/smart_rollup_address"
              },
              "commitment": {
                "type": "object",
                "properties": {
                  "compressed_state": {
                    "$ref": "#/components/schemas/smart_rollup_state_hash"
                  },
                  "inbox_level": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 2147483647
                  },
                  "predecessor": {
                    "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                  },
                  "number_of_ticks": {
                    "$ref": "#/components/schemas/int64"
                  }
                },
                "required": [
                  "compressed_state",
                  "inbox_level",
                  "predecessor",
                  "number_of_ticks"
                ]
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.smart_rollup_publish"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "rollup",
              "commitment",
              "metadata"
            ]
          },
          {
            "title": "Smart_rollup_refute",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_refute"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "rollup": {
                "$ref": "#/components/schemas/smart_rollup_address"
              },
              "opponent": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "refutation": {
                "oneOf": [
                  {
                    "title": "Start",
                    "type": "object",
                    "properties": {
                      "refutation_kind": {
                        "type": "string",
                        "enum": [
                          "start"
                        ]
                      },
                      "player_commitment_hash": {
                        "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                      },
                      "opponent_commitment_hash": {
                        "$ref": "#/components/schemas/smart_rollup_commitment_hash"
                      }
                    },
                    "required": [
                      "refutation_kind",
                      "player_commitment_hash",
                      "opponent_commitment_hash"
                    ]
                  },
                  {
                    "title": "Move",
                    "type": "object",
                    "properties": {
                      "refutation_kind": {
                        "type": "string",
                        "enum": [
                          "move"
                        ]
                      },
                      "choice": {
                        "$ref": "#/components/schemas/positive_bignum"
                      },
                      "step": {
                        "oneOf": [
                          {
                            "title": "Dissection",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "state": {
                                  "$ref": "#/components/schemas/smart_rollup_state_hash"
                                },
                                "tick": {
                                  "$ref": "#/components/schemas/positive_bignum"
                                }
                              },
                              "required": [
                                "tick"
                              ]
                            }
                          },
                          {
                            "title": "Proof",
                            "type": "object",
                            "properties": {
                              "pvm_step": {
                                "type": "string",
                                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                              },
                              "input_proof": {
                                "oneOf": [
                                  {
                                    "title": "inbox proof",
                                    "type": "object",
                                    "properties": {
                                      "input_proof_kind": {
                                        "type": "string",
                                        "enum": [
                                          "inbox_proof"
                                        ]
                                      },
                                      "level": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "maximum": 2147483647
                                      },
                                      "message_counter": {
                                        "$ref": "#/components/schemas/positive_bignum"
                                      },
                                      "serialized_proof": {
                                        "type": "string",
                                        "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                      }
                                    },
                                    "required": [
                                      "input_proof_kind",
                                      "level",
                                      "message_counter",
                                      "serialized_proof"
                                    ]
                                  },
                                  {
                                    "title": "reveal proof",
                                    "type": "object",
                                    "properties": {
                                      "input_proof_kind": {
                                        "type": "string",
                                        "enum": [
                                          "reveal_proof"
                                        ]
                                      },
                                      "reveal_proof": {
                                        "oneOf": [
                                          {
                                            "title": "raw data proof",
                                            "type": "object",
                                            "properties": {
                                              "reveal_proof_kind": {
                                                "type": "string",
                                                "enum": [
                                                  "raw_data_proof"
                                                ]
                                              },
                                              "raw_data": {
                                                "type": "string",
                                                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                              }
                                            },
                                            "required": [
                                              "reveal_proof_kind",
                                              "raw_data"
                                            ]
                                          },
                                          {
                                            "title": "metadata proof",
                                            "type": "object",
                                            "properties": {
                                              "reveal_proof_kind": {
                                                "type": "string",
                                                "enum": [
                                                  "metadata_proof"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "reveal_proof_kind"
                                            ]
                                          },
                                          {
                                            "title": "dal page proof",
                                            "type": "object",
                                            "properties": {
                                              "reveal_proof_kind": {
                                                "type": "string",
                                                "enum": [
                                                  "dal_page_proof"
                                                ]
                                              },
                                              "dal_page_id": {
                                                "type": "object",
                                                "properties": {
                                                  "published_level": {
                                                    "type": "integer",
                                                    "minimum": 0,
                                                    "maximum": 2147483647
                                                  },
                                                  "slot_index": {
                                                    "type": "integer",
                                                    "minimum": 0,
                                                    "maximum": 255
                                                  },
                                                  "page_index": {
                                                    "type": "integer",
                                                    "minimum": -32768,
                                                    "maximum": 32767
                                                  }
                                                },
                                                "required": [
                                                  "published_level",
                                                  "slot_index",
                                                  "page_index"
                                                ]
                                              },
                                              "dal_proof": {
                                                "type": "string",
                                                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                              }
                                            },
                                            "required": [
                                              "reveal_proof_kind",
                                              "dal_page_id",
                                              "dal_proof"
                                            ]
                                          },
                                          {
                                            "title": "dal parameters proof",
                                            "type": "object",
                                            "properties": {
                                              "reveal_proof_kind": {
                                                "type": "string",
                                                "enum": [
                                                  "dal_parameters_proof"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "reveal_proof_kind"
                                            ]
                                          }
                                        ]
                                      }
                                    },
                                    "required": [
                                      "input_proof_kind",
                                      "reveal_proof"
                                    ]
                                  },
                                  {
                                    "title": "first input",
                                    "type": "object",
                                    "properties": {
                                      "input_proof_kind": {
                                        "type": "string",
                                        "enum": [
                                          "first_input"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "input_proof_kind"
                                    ]
                                  }
                                ]
                              }
                            },
                            "required": [
                              "pvm_step"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "refutation_kind",
                      "choice",
                      "step"
                    ]
                  }
                ]
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.smart_rollup_refute"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "rollup",
              "opponent",
              "refutation",
              "metadata"
            ]
          },
          {
            "title": "Smart_rollup_timeout",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_timeout"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "rollup": {
                "$ref": "#/components/schemas/smart_rollup_address"
              },
              "stakers": {
                "type": "object",
                "properties": {
                  "alice": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  },
                  "bob": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  }
                },
                "required": [
                  "alice",
                  "bob"
                ]
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.smart_rollup_timeout"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "rollup",
              "stakers",
              "metadata"
            ]
          },
          {
            "title": "Smart_rollup_execute_outbox_message",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_execute_outbox_message"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "rollup": {
                "$ref": "#/components/schemas/smart_rollup_address"
              },
              "cemented_commitment": {
                "$ref": "#/components/schemas/smart_rollup_commitment_hash"
              },
              "output_proof": {
                "type": "string",
                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.smart_rollup_execute_outbox_message"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "rollup",
              "cemented_commitment",
              "output_proof",
              "metadata"
            ]
          },
          {
            "title": "Smart_rollup_recover_bond",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "smart_rollup_recover_bond"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "rollup": {
                "$ref": "#/components/schemas/smart_rollup_address"
              },
              "staker": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.smart_rollup_recover_bond"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "rollup",
              "staker",
              "metadata"
            ]
          },
          {
            "title": "Zk_rollup_origination",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "zk_rollup_origination"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "public_parameters": {
                "type": "string",
                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
              },
              "circuits_info": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/unistring"
                      },
                      {
                        "oneOf": [
                          {
                            "title": "Public",
                            "type": "object",
                            "properties": {
                              "public": {}
                            },
                            "required": [
                              "public"
                            ]
                          },
                          {
                            "title": "Private",
                            "type": "object",
                            "properties": {
                              "private": {}
                            },
                            "required": [
                              "private"
                            ]
                          },
                          {
                            "title": "Fee",
                            "type": "object",
                            "properties": {
                              "fee": {}
                            },
                            "required": [
                              "fee"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              "init_state": {
                "type": "array",
                "items": {
                  "type": "string",
                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                }
              },
              "nb_ops": {
                "type": "integer",
                "minimum": -1073741824,
                "maximum": 1073741823
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.zk_rollup_origination"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "public_parameters",
              "circuits_info",
              "init_state",
              "nb_ops",
              "metadata"
            ]
          },
          {
            "title": "Zk_rollup_publish",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "zk_rollup_publish"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "zk_rollup": {
                "$ref": "#/components/schemas/Zk_rollup_hash"
              },
              "op": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "op_code": {
                            "type": "integer",
                            "minimum": -1073741824,
                            "maximum": 1073741823
                          },
                          "price": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "$ref": "#/components/schemas/script_expr"
                              },
                              "amount": {
                                "$ref": "#/components/schemas/bignum"
                              }
                            },
                            "required": [
                              "id",
                              "amount"
                            ]
                          },
                          "l1_dst": {
                            "$ref": "#/components/schemas/Signature.Public_key_hash"
                          },
                          "rollup_id": {
                            "$ref": "#/components/schemas/Zk_rollup_hash"
                          },
                          "payload": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                            }
                          }
                        },
                        "required": [
                          "op_code",
                          "price",
                          "l1_dst",
                          "rollup_id",
                          "payload"
                        ]
                      },
                      {
                        "nullable": true,
                        "oneOf": [
                          {
                            "title": "Some",
                            "type": "object",
                            "properties": {
                              "contents": {
                                "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                              },
                              "ty": {
                                "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                              },
                              "ticketer": {
                                "$ref": "#/components/schemas/alpha.contract_id"
                              }
                            },
                            "required": [
                              "contents",
                              "ty",
                              "ticketer"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.zk_rollup_publish"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "zk_rollup",
              "op",
              "metadata"
            ]
          },
          {
            "title": "Zk_rollup_update",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "zk_rollup_update"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/alpha.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "zk_rollup": {
                "$ref": "#/components/schemas/Zk_rollup_hash"
              },
              "update": {
                "type": "object",
                "properties": {
                  "pending_pis": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/unistring"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "new_state": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                }
                              },
                              "fee": {
                                "type": "string",
                                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                              },
                              "exit_validity": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "new_state",
                              "fee",
                              "exit_validity"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "private_pis": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/unistring"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "new_state": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                }
                              },
                              "fee": {
                                "type": "string",
                                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                              }
                            },
                            "required": [
                              "new_state",
                              "fee"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "fee_pi": {
                    "type": "object",
                    "properties": {
                      "new_state": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                        }
                      }
                    },
                    "required": [
                      "new_state"
                    ]
                  },
                  "proof": {
                    "type": "string",
                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                  }
                },
                "required": [
                  "pending_pis",
                  "private_pis",
                  "fee_pi",
                  "proof"
                ]
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/alpha.operation.alpha.operation_result.zk_rollup_update"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.apply_internal_results.alpha.operation_result"
                    }
                  }
                },
                "required": [
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "zk_rollup",
              "update",
              "metadata"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.dal_publish_commitment": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "slot_header": {
                "type": "object",
                "properties": {
                  "version": {
                    "type": "string",
                    "enum": [
                      "0"
                    ]
                  },
                  "level": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 2147483647
                  },
                  "index": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  },
                  "commitment": {
                    "$ref": "#/components/schemas/DAL_commitment"
                  }
                },
                "required": [
                  "version",
                  "level",
                  "index",
                  "commitment"
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status",
              "slot_header"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "slot_header": {
                "type": "object",
                "properties": {
                  "version": {
                    "type": "string",
                    "enum": [
                      "0"
                    ]
                  },
                  "level": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 2147483647
                  },
                  "index": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  },
                  "commitment": {
                    "$ref": "#/components/schemas/DAL_commitment"
                  }
                },
                "required": [
                  "version",
                  "level",
                  "index",
                  "commitment"
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status",
              "slot_header"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.delegation": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              }
            },
            "required": [
              "status"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.increase_paid_storage": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.origination": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "originated_contracts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.contract_id.originated"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_size": {
                "$ref": "#/components/schemas/bignum"
              },
              "paid_storage_size_diff": {
                "$ref": "#/components/schemas/bignum"
              },
              "lazy_storage_diff": {
                "$ref": "#/components/schemas/alpha.lazy_storage_diff"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "originated_contracts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.contract_id.originated"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_size": {
                "$ref": "#/components/schemas/bignum"
              },
              "paid_storage_size_diff": {
                "$ref": "#/components/schemas/bignum"
              },
              "lazy_storage_diff": {
                "$ref": "#/components/schemas/alpha.lazy_storage_diff"
              }
            },
            "required": [
              "status"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.register_global_constant": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_size": {
                "$ref": "#/components/schemas/bignum"
              },
              "global_address": {
                "$ref": "#/components/schemas/script_expr"
              }
            },
            "required": [
              "status",
              "global_address"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_size": {
                "$ref": "#/components/schemas/bignum"
              },
              "global_address": {
                "$ref": "#/components/schemas/script_expr"
              }
            },
            "required": [
              "status",
              "global_address"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.reveal": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.set_deposits_limit": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.smart_rollup_add_messages": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.smart_rollup_cement": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "inbox_level": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "commitment_hash": {
                "$ref": "#/components/schemas/smart_rollup_commitment_hash"
              }
            },
            "required": [
              "status",
              "inbox_level",
              "commitment_hash"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "inbox_level": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "commitment_hash": {
                "$ref": "#/components/schemas/smart_rollup_commitment_hash"
              }
            },
            "required": [
              "status",
              "inbox_level",
              "commitment_hash"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.smart_rollup_execute_outbox_message": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "ticket_updates": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "ticket_token": {
                      "type": "object",
                      "properties": {
                        "ticketer": {
                          "$ref": "#/components/schemas/alpha.contract_id"
                        },
                        "content_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "content": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "ticketer",
                        "content_type",
                        "content"
                      ]
                    },
                    "updates": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "account": {
                            "$ref": "#/components/schemas/alpha.transaction_destination"
                          },
                          "amount": {
                            "$ref": "#/components/schemas/bignum"
                          }
                        },
                        "required": [
                          "account",
                          "amount"
                        ]
                      }
                    }
                  },
                  "required": [
                    "ticket_token",
                    "updates"
                  ]
                }
              },
              "whitelist_update": {
                "oneOf": [
                  {
                    "title": "Public",
                    "type": "object",
                    "properties": {
                      "kind": {
                        "type": "string",
                        "enum": [
                          "public"
                        ]
                      }
                    },
                    "required": [
                      "kind"
                    ]
                  },
                  {
                    "title": "Private",
                    "type": "object",
                    "properties": {
                      "kind": {
                        "type": "string",
                        "enum": [
                          "update"
                        ]
                      },
                      "whitelist": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Signature.Public_key_hash"
                        }
                      }
                    },
                    "required": [
                      "kind",
                      "whitelist"
                    ]
                  }
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "paid_storage_size_diff": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "status",
              "balance_updates",
              "ticket_updates"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "ticket_updates": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "ticket_token": {
                      "type": "object",
                      "properties": {
                        "ticketer": {
                          "$ref": "#/components/schemas/alpha.contract_id"
                        },
                        "content_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "content": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "ticketer",
                        "content_type",
                        "content"
                      ]
                    },
                    "updates": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "account": {
                            "$ref": "#/components/schemas/alpha.transaction_destination"
                          },
                          "amount": {
                            "$ref": "#/components/schemas/bignum"
                          }
                        },
                        "required": [
                          "account",
                          "amount"
                        ]
                      }
                    }
                  },
                  "required": [
                    "ticket_token",
                    "updates"
                  ]
                }
              },
              "whitelist_update": {
                "oneOf": [
                  {
                    "title": "Public",
                    "type": "object",
                    "properties": {
                      "kind": {
                        "type": "string",
                        "enum": [
                          "public"
                        ]
                      }
                    },
                    "required": [
                      "kind"
                    ]
                  },
                  {
                    "title": "Private",
                    "type": "object",
                    "properties": {
                      "kind": {
                        "type": "string",
                        "enum": [
                          "update"
                        ]
                      },
                      "whitelist": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Signature.Public_key_hash"
                        }
                      }
                    },
                    "required": [
                      "kind",
                      "whitelist"
                    ]
                  }
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "paid_storage_size_diff": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "status",
              "balance_updates",
              "ticket_updates"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.smart_rollup_originate": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "address": {
                "$ref": "#/components/schemas/smart_rollup_address"
              },
              "genesis_commitment_hash": {
                "$ref": "#/components/schemas/smart_rollup_commitment_hash"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "size": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "status",
              "balance_updates",
              "address",
              "genesis_commitment_hash",
              "size"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "address": {
                "$ref": "#/components/schemas/smart_rollup_address"
              },
              "genesis_commitment_hash": {
                "$ref": "#/components/schemas/smart_rollup_commitment_hash"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "size": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "status",
              "balance_updates",
              "address",
              "genesis_commitment_hash",
              "size"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.smart_rollup_publish": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "staked_hash": {
                "$ref": "#/components/schemas/smart_rollup_commitment_hash"
              },
              "published_at_level": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              }
            },
            "required": [
              "status",
              "staked_hash",
              "published_at_level",
              "balance_updates"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "staked_hash": {
                "$ref": "#/components/schemas/smart_rollup_commitment_hash"
              },
              "published_at_level": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              }
            },
            "required": [
              "status",
              "staked_hash",
              "published_at_level",
              "balance_updates"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.smart_rollup_recover_bond": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status",
              "balance_updates"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status",
              "balance_updates"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.smart_rollup_refute": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "game_status": {
                "oneOf": [
                  {
                    "title": "Ongoing",
                    "type": "string",
                    "enum": [
                      "ongoing"
                    ]
                  },
                  {
                    "title": "Ended",
                    "type": "object",
                    "properties": {
                      "result": {
                        "oneOf": [
                          {
                            "title": "Loser",
                            "type": "object",
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "loser"
                                ]
                              },
                              "reason": {
                                "oneOf": [
                                  {
                                    "title": "Conflict_resolved",
                                    "type": "string",
                                    "enum": [
                                      "conflict_resolved"
                                    ]
                                  },
                                  {
                                    "title": "Timeout",
                                    "type": "string",
                                    "enum": [
                                      "timeout"
                                    ]
                                  }
                                ]
                              },
                              "player": {
                                "$ref": "#/components/schemas/Signature.Public_key_hash"
                              }
                            },
                            "required": [
                              "kind",
                              "reason",
                              "player"
                            ]
                          },
                          {
                            "title": "Draw",
                            "type": "object",
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "draw"
                                ]
                              }
                            },
                            "required": [
                              "kind"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "result"
                    ]
                  }
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              }
            },
            "required": [
              "status",
              "game_status",
              "balance_updates"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "game_status": {
                "oneOf": [
                  {
                    "title": "Ongoing",
                    "type": "string",
                    "enum": [
                      "ongoing"
                    ]
                  },
                  {
                    "title": "Ended",
                    "type": "object",
                    "properties": {
                      "result": {
                        "oneOf": [
                          {
                            "title": "Loser",
                            "type": "object",
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "loser"
                                ]
                              },
                              "reason": {
                                "oneOf": [
                                  {
                                    "title": "Conflict_resolved",
                                    "type": "string",
                                    "enum": [
                                      "conflict_resolved"
                                    ]
                                  },
                                  {
                                    "title": "Timeout",
                                    "type": "string",
                                    "enum": [
                                      "timeout"
                                    ]
                                  }
                                ]
                              },
                              "player": {
                                "$ref": "#/components/schemas/Signature.Public_key_hash"
                              }
                            },
                            "required": [
                              "kind",
                              "reason",
                              "player"
                            ]
                          },
                          {
                            "title": "Draw",
                            "type": "object",
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "draw"
                                ]
                              }
                            },
                            "required": [
                              "kind"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "result"
                    ]
                  }
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              }
            },
            "required": [
              "status",
              "game_status",
              "balance_updates"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.smart_rollup_timeout": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "game_status": {
                "oneOf": [
                  {
                    "title": "Ongoing",
                    "type": "string",
                    "enum": [
                      "ongoing"
                    ]
                  },
                  {
                    "title": "Ended",
                    "type": "object",
                    "properties": {
                      "result": {
                        "oneOf": [
                          {
                            "title": "Loser",
                            "type": "object",
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "loser"
                                ]
                              },
                              "reason": {
                                "oneOf": [
                                  {
                                    "title": "Conflict_resolved",
                                    "type": "string",
                                    "enum": [
                                      "conflict_resolved"
                                    ]
                                  },
                                  {
                                    "title": "Timeout",
                                    "type": "string",
                                    "enum": [
                                      "timeout"
                                    ]
                                  }
                                ]
                              },
                              "player": {
                                "$ref": "#/components/schemas/Signature.Public_key_hash"
                              }
                            },
                            "required": [
                              "kind",
                              "reason",
                              "player"
                            ]
                          },
                          {
                            "title": "Draw",
                            "type": "object",
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "draw"
                                ]
                              }
                            },
                            "required": [
                              "kind"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "result"
                    ]
                  }
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              }
            },
            "required": [
              "status",
              "game_status",
              "balance_updates"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "game_status": {
                "oneOf": [
                  {
                    "title": "Ongoing",
                    "type": "string",
                    "enum": [
                      "ongoing"
                    ]
                  },
                  {
                    "title": "Ended",
                    "type": "object",
                    "properties": {
                      "result": {
                        "oneOf": [
                          {
                            "title": "Loser",
                            "type": "object",
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "loser"
                                ]
                              },
                              "reason": {
                                "oneOf": [
                                  {
                                    "title": "Conflict_resolved",
                                    "type": "string",
                                    "enum": [
                                      "conflict_resolved"
                                    ]
                                  },
                                  {
                                    "title": "Timeout",
                                    "type": "string",
                                    "enum": [
                                      "timeout"
                                    ]
                                  }
                                ]
                              },
                              "player": {
                                "$ref": "#/components/schemas/Signature.Public_key_hash"
                              }
                            },
                            "required": [
                              "kind",
                              "reason",
                              "player"
                            ]
                          },
                          {
                            "title": "Draw",
                            "type": "object",
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "draw"
                                ]
                              }
                            },
                            "required": [
                              "kind"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "result"
                    ]
                  }
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              }
            },
            "required": [
              "status",
              "game_status",
              "balance_updates"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.transaction": {
        "oneOf": [
          {
            "title": "Applied",
            "oneOf": [
              {
                "title": "To_contract",
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "applied"
                    ]
                  },
                  "storage": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "ticket_updates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ticket_token": {
                          "type": "object",
                          "properties": {
                            "ticketer": {
                              "$ref": "#/components/schemas/alpha.contract_id"
                            },
                            "content_type": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            },
                            "content": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            }
                          },
                          "required": [
                            "ticketer",
                            "content_type",
                            "content"
                          ]
                        },
                        "updates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "account": {
                                "$ref": "#/components/schemas/alpha.transaction_destination"
                              },
                              "amount": {
                                "$ref": "#/components/schemas/bignum"
                              }
                            },
                            "required": [
                              "account",
                              "amount"
                            ]
                          }
                        }
                      },
                      "required": [
                        "ticket_token",
                        "updates"
                      ]
                    }
                  },
                  "originated_contracts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.contract_id.originated"
                    }
                  },
                  "consumed_milligas": {
                    "$ref": "#/components/schemas/positive_bignum"
                  },
                  "storage_size": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "paid_storage_size_diff": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "allocated_destination_contract": {
                    "type": "boolean"
                  },
                  "lazy_storage_diff": {
                    "$ref": "#/components/schemas/alpha.lazy_storage_diff"
                  }
                },
                "required": [
                  "status"
                ]
              },
              {
                "title": "To_smart_rollup",
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "applied"
                    ]
                  },
                  "consumed_milligas": {
                    "$ref": "#/components/schemas/positive_bignum"
                  },
                  "ticket_updates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ticket_token": {
                          "type": "object",
                          "properties": {
                            "ticketer": {
                              "$ref": "#/components/schemas/alpha.contract_id"
                            },
                            "content_type": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            },
                            "content": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            }
                          },
                          "required": [
                            "ticketer",
                            "content_type",
                            "content"
                          ]
                        },
                        "updates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "account": {
                                "$ref": "#/components/schemas/alpha.transaction_destination"
                              },
                              "amount": {
                                "$ref": "#/components/schemas/bignum"
                              }
                            },
                            "required": [
                              "account",
                              "amount"
                            ]
                          }
                        }
                      },
                      "required": [
                        "ticket_token",
                        "updates"
                      ]
                    }
                  }
                },
                "required": [
                  "status",
                  "ticket_updates"
                ]
              }
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "oneOf": [
              {
                "title": "To_contract",
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "backtracked"
                    ]
                  },
                  "errors": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.error"
                    }
                  },
                  "storage": {
                    "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                  },
                  "balance_updates": {
                    "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
                  },
                  "ticket_updates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ticket_token": {
                          "type": "object",
                          "properties": {
                            "ticketer": {
                              "$ref": "#/components/schemas/alpha.contract_id"
                            },
                            "content_type": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            },
                            "content": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            }
                          },
                          "required": [
                            "ticketer",
                            "content_type",
                            "content"
                          ]
                        },
                        "updates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "account": {
                                "$ref": "#/components/schemas/alpha.transaction_destination"
                              },
                              "amount": {
                                "$ref": "#/components/schemas/bignum"
                              }
                            },
                            "required": [
                              "account",
                              "amount"
                            ]
                          }
                        }
                      },
                      "required": [
                        "ticket_token",
                        "updates"
                      ]
                    }
                  },
                  "originated_contracts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.contract_id.originated"
                    }
                  },
                  "consumed_milligas": {
                    "$ref": "#/components/schemas/positive_bignum"
                  },
                  "storage_size": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "paid_storage_size_diff": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "allocated_destination_contract": {
                    "type": "boolean"
                  },
                  "lazy_storage_diff": {
                    "$ref": "#/components/schemas/alpha.lazy_storage_diff"
                  }
                },
                "required": [
                  "status"
                ]
              },
              {
                "title": "To_smart_rollup",
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "backtracked"
                    ]
                  },
                  "errors": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/alpha.error"
                    }
                  },
                  "consumed_milligas": {
                    "$ref": "#/components/schemas/positive_bignum"
                  },
                  "ticket_updates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ticket_token": {
                          "type": "object",
                          "properties": {
                            "ticketer": {
                              "$ref": "#/components/schemas/alpha.contract_id"
                            },
                            "content_type": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            },
                            "content": {
                              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                            }
                          },
                          "required": [
                            "ticketer",
                            "content_type",
                            "content"
                          ]
                        },
                        "updates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "account": {
                                "$ref": "#/components/schemas/alpha.transaction_destination"
                              },
                              "amount": {
                                "$ref": "#/components/schemas/bignum"
                              }
                            },
                            "required": [
                              "account",
                              "amount"
                            ]
                          }
                        }
                      },
                      "required": [
                        "ticket_token",
                        "updates"
                      ]
                    }
                  }
                },
                "required": [
                  "status",
                  "ticket_updates"
                ]
              }
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.transfer_ticket": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "ticket_updates": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "ticket_token": {
                      "type": "object",
                      "properties": {
                        "ticketer": {
                          "$ref": "#/components/schemas/alpha.contract_id"
                        },
                        "content_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "content": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "ticketer",
                        "content_type",
                        "content"
                      ]
                    },
                    "updates": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "account": {
                            "$ref": "#/components/schemas/alpha.transaction_destination"
                          },
                          "amount": {
                            "$ref": "#/components/schemas/bignum"
                          }
                        },
                        "required": [
                          "account",
                          "amount"
                        ]
                      }
                    }
                  },
                  "required": [
                    "ticket_token",
                    "updates"
                  ]
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "paid_storage_size_diff": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "status",
              "balance_updates",
              "ticket_updates"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "ticket_updates": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "ticket_token": {
                      "type": "object",
                      "properties": {
                        "ticketer": {
                          "$ref": "#/components/schemas/alpha.contract_id"
                        },
                        "content_type": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        },
                        "content": {
                          "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "ticketer",
                        "content_type",
                        "content"
                      ]
                    },
                    "updates": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "account": {
                            "$ref": "#/components/schemas/alpha.transaction_destination"
                          },
                          "amount": {
                            "$ref": "#/components/schemas/bignum"
                          }
                        },
                        "required": [
                          "account",
                          "amount"
                        ]
                      }
                    }
                  },
                  "required": [
                    "ticket_token",
                    "updates"
                  ]
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "paid_storage_size_diff": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "status",
              "balance_updates",
              "ticket_updates"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.update_consensus_key": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.zk_rollup_origination": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "originated_zk_rollup": {
                "$ref": "#/components/schemas/Zk_rollup_hash"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "size": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "status",
              "balance_updates",
              "originated_zk_rollup",
              "size"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "originated_zk_rollup": {
                "$ref": "#/components/schemas/Zk_rollup_hash"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "size": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "status",
              "balance_updates",
              "originated_zk_rollup",
              "size"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.zk_rollup_publish": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "size": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "status",
              "balance_updates",
              "size"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "size": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "status",
              "balance_updates",
              "size"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_result.zk_rollup_update": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "paid_storage_size_diff": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "status",
              "balance_updates"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.error"
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/alpha.operation_metadata.alpha.balance_updates"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "paid_storage_size_diff": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "status",
              "balance_updates"
            ]
          }
        ]
      },
      "alpha.operation.alpha.operation_with_metadata": {
        "oneOf": [
          {
            "title": "Operation_with_metadata",
            "type": "object",
            "properties": {
              "contents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.operation.alpha.operation_contents_and_result"
                }
              },
              "signature": {
                "$ref": "#/components/schemas/Signature.V1"
              }
            },
            "required": [
              "contents"
            ]
          },
          {
            "title": "Operation_without_metadata",
            "type": "object",
            "properties": {
              "contents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alpha.operation.alpha.contents"
                }
              },
              "signature": {
                "$ref": "#/components/schemas/Signature.V1"
              }
            },
            "required": [
              "contents"
            ]
          }
        ]
      },
      "alpha.operation_metadata.alpha.balance_updates": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "title": "Contract",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "contract"
                  ]
                },
                "contract": {
                  "$ref": "#/components/schemas/alpha.contract_id"
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "contract",
                "change",
                "origin"
              ]
            },
            {
              "title": "Block_fees",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "accumulator"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "block fees"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Deposits",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "freezer"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "deposits"
                  ]
                },
                "staker": {
                  "$ref": "#/components/schemas/alpha.frozen_staker"
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "staker",
                "change",
                "origin"
              ]
            },
            {
              "title": "Nonce_revelation_rewards",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "minted"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "nonce revelation rewards"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Attesting_rewards",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "minted"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "attesting rewards"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Baking_rewards",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "minted"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "baking rewards"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Baking_bonuses",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "minted"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "baking bonuses"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Storage_fees",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "burned"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "storage fees"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Double_signing_punishments",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "burned"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "punishments"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Lost_attesting_rewards",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "burned"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "lost attesting rewards"
                  ]
                },
                "delegate": {
                  "$ref": "#/components/schemas/Signature.Public_key_hash"
                },
                "participation": {
                  "type": "boolean"
                },
                "revelation": {
                  "type": "boolean"
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "delegate",
                "participation",
                "revelation",
                "change",
                "origin"
              ]
            },
            {
              "title": "Liquidity_baking_subsidies",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "minted"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "subsidy"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Burned",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "burned"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "burned"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Commitments",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "commitment"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "commitment"
                  ]
                },
                "committer": {
                  "$ref": "#/components/schemas/Blinded public key hash"
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "committer",
                "change",
                "origin"
              ]
            },
            {
              "title": "Bootstrap",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "minted"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "bootstrap"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Invoice",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "minted"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "invoice"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Initial_commitments",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "minted"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "commitment"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Minted",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "minted"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "minted"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Frozen_bonds",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "freezer"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "bonds"
                  ]
                },
                "contract": {
                  "$ref": "#/components/schemas/alpha.contract_id"
                },
                "bond_id": {
                  "$ref": "#/components/schemas/alpha.bond_id"
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "contract",
                "bond_id",
                "change",
                "origin"
              ]
            },
            {
              "title": "Smart_rollup_refutation_punishments",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "burned"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "smart_rollup_refutation_punishments"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Smart_rollup_refutation_rewards",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "minted"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "smart_rollup_refutation_rewards"
                  ]
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "change",
                "origin"
              ]
            },
            {
              "title": "Unstaked_deposits",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "freezer"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "unstaked_deposits"
                  ]
                },
                "staker": {
                  "$ref": "#/components/schemas/alpha.staker"
                },
                "cycle": {
                  "type": "integer",
                  "minimum": -2147483648,
                  "maximum": 2147483647
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "staker",
                "cycle",
                "change",
                "origin"
              ]
            },
            {
              "title": "Staking_delegator_numerator",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "staking"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "delegator_numerator"
                  ]
                },
                "delegator": {
                  "$ref": "#/components/schemas/alpha.contract_id"
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "delegator",
                "change",
                "origin"
              ]
            },
            {
              "title": "Staking_delegate_denominator",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "staking"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "delegate_denominator"
                  ]
                },
                "delegate": {
                  "$ref": "#/components/schemas/Signature.Public_key_hash"
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                },
                "origin": {
                  "type": "string",
                  "enum": [
                    "block"
                  ]
                }
              },
              "required": [
                "kind",
                "category",
                "delegate",
                "change",
                "origin"
              ]
            }
          ]
        }
      },
      "alpha.per_block_votes": {
        "type": "object",
        "properties": {
          "liquidity_baking_vote": {
            "oneOf": [
              {
                "title": "per_block_vote_on",
                "type": "string",
                "enum": [
                  "on"
                ]
              },
              {
                "title": "per_block_vote_off",
                "type": "string",
                "enum": [
                  "off"
                ]
              },
              {
                "title": "per_block_vote_pass",
                "type": "string",
                "enum": [
                  "pass"
                ]
              }
            ]
          },
          "adaptive_issuance_vote": {
            "oneOf": [
              {
                "title": "per_block_vote_on",
                "type": "string",
                "enum": [
                  "on"
                ]
              },
              {
                "title": "per_block_vote_off",
                "type": "string",
                "enum": [
                  "off"
                ]
              },
              {
                "title": "per_block_vote_pass",
                "type": "string",
                "enum": [
                  "pass"
                ]
              }
            ]
          }
        },
        "required": [
          "liquidity_baking_vote",
          "adaptive_issuance_vote"
        ]
      },
      "alpha.sapling_state_id": {
        "title": "Sapling state identifier",
        "description": "A sapling state identifier",
        "oneOf": [
          {
            "$ref": "#/components/schemas/bignum"
          }
        ]
      },
      "alpha.scripted.contracts": {
        "type": "object",
        "properties": {
          "code": {},
          "storage": {}
        },
        "required": [
          "code",
          "storage"
        ]
      },
      "alpha.scripted.trace": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "location": {
              "$ref": "#/components/schemas/micheline.location"
            },
            "gas": {
              "$ref": "#/components/schemas/bignum"
            },
            "stack": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
              }
            }
          },
          "required": [
            "location",
            "gas",
            "stack"
          ]
        }
      },
      "alpha.staker": {
        "title": "unstaked_frozen_staker",
        "description": "Abstract notion of staker used in operation receipts for unstaked frozen deposits, either a single staker or all the stakers delegating to some delegate.",
        "oneOf": [
          {
            "title": "Single",
            "type": "object",
            "properties": {
              "contract": {
                "$ref": "#/components/schemas/alpha.contract_id"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              }
            },
            "required": [
              "contract",
              "delegate"
            ]
          },
          {
            "title": "Shared",
            "type": "object",
            "properties": {
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              }
            },
            "required": [
              "delegate"
            ]
          }
        ]
      },
      "alpha.transaction_destination": {
        "title": "A destination of a transaction",
        "description": "A destination notation compatible with the contract notation as given to an RPC or inside scripts. Can be a base58 implicit contract hash, a base58 originated contract hash, a base58 originated transaction rollup, or a base58 originated smart rollup.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "bignum": {
        "title": "Big number",
        "description": "Decimal representation of a big number",
        "type": "string"
      },
      "block_hash": {
        "title": "A block identifier (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "block_header.shell": {
        "title": "Shell header",
        "description": "Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.",
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "proto": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "predecessor": {
            "$ref": "#/components/schemas/block_hash"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp.protocol"
          },
          "validation_pass": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "operations_hash": {
            "$ref": "#/components/schemas/Operation_list_list_hash"
          },
          "fitness": {
            "$ref": "#/components/schemas/fitness"
          },
          "context": {
            "$ref": "#/components/schemas/Context_hash"
          }
        },
        "required": [
          "level",
          "proto",
          "predecessor",
          "timestamp",
          "validation_pass",
          "operations_hash",
          "fitness",
          "context"
        ]
      },
      "block_header_metadata": {
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string",
            "enum": [
              "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im"
            ]
          },
          "next_protocol": {
            "type": "string",
            "enum": [
              "ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK"
            ]
          },
          "test_chain_status": {
            "$ref": "#/components/schemas/test_chain_status"
          },
          "max_operations_ttl": {
            "type": "integer",
            "minimum": -1073741824,
            "maximum": 1073741823
          },
          "max_operation_data_length": {
            "type": "integer",
            "minimum": -1073741824,
            "maximum": 1073741823
          },
          "max_block_header_length": {
            "type": "integer",
            "minimum": -1073741824,
            "maximum": 1073741823
          },
          "max_operation_list_length": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "max_size": {
                  "type": "integer",
                  "minimum": -1073741824,
                  "maximum": 1073741823
                },
                "max_op": {
                  "type": "integer",
                  "minimum": -1073741824,
                  "maximum": 1073741823
                }
              },
              "required": [
                "max_size"
              ]
            }
          }
        },
        "required": [
          "protocol",
          "next_protocol",
          "test_chain_status",
          "max_operations_ttl",
          "max_operation_data_length",
          "max_block_header_length",
          "max_operation_list_length"
        ],
        "additionalProperties": {}
      },
      "cycle_nonce": {
        "title": "A nonce hash (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "dal_skip_list_pointer": {
        "title": "A hash that represents the skip list pointers (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "error": {
        "description": "An error trace. The full list of errors is available with the global RPC `GET errors`"
      },
      "fitness": {
        "title": "Block fitness",
        "description": "The fitness, or score, of a block, that allow the Tezos to decide which chain is the best. A fitness value is a list of byte sequences. They are compared as follows: shortest lists are smaller; lists of the same length are compared according to the lexicographical order.",
        "type": "array",
        "items": {
          "type": "string",
          "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
        }
      },
      "inode_tree": {
        "oneOf": [
          {
            "title": "Inode_tree",
            "type": "object",
            "properties": {
              "inode_tree": {
                "type": "object",
                "properties": {
                  "length": {
                    "$ref": "#/components/schemas/int64"
                  },
                  "proofs": {
                    "oneOf": [
                      {
                        "title": "sparse_proof",
                        "type": "object",
                        "properties": {
                          "sparse_proof": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 255
                                  },
                                  {
                                    "$ref": "#/components/schemas/inode_tree"
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "required": [
                          "sparse_proof"
                        ]
                      },
                      {
                        "title": "dense_proof",
                        "type": "object",
                        "properties": {
                          "dense_proof": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/inode_tree"
                            }
                          }
                        },
                        "required": [
                          "dense_proof"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "length",
                  "proofs"
                ]
              }
            },
            "required": [
              "inode_tree"
            ]
          },
          {
            "title": "other_inode_trees",
            "type": "object",
            "properties": {
              "other_inode_trees": {
                "oneOf": [
                  {
                    "title": "Inode_values",
                    "type": "object",
                    "properties": {
                      "inode_values": {
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "string",
                                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                              },
                              {
                                "$ref": "#/components/schemas/tree_encoding"
                              }
                            ]
                          }
                        }
                      }
                    },
                    "required": [
                      "inode_values"
                    ]
                  },
                  {
                    "title": "other_inode_trees",
                    "type": "object",
                    "properties": {
                      "other_inode_trees": {
                        "oneOf": [
                          {
                            "title": "Blinded_inode",
                            "type": "object",
                            "properties": {
                              "blinded_inode": {
                                "$ref": "#/components/schemas/Context_hash"
                              }
                            },
                            "required": [
                              "blinded_inode"
                            ]
                          },
                          {
                            "title": "Inode_extender",
                            "type": "object",
                            "properties": {
                              "inode_extender": {
                                "type": "object",
                                "properties": {
                                  "length": {
                                    "$ref": "#/components/schemas/int64"
                                  },
                                  "segment": {
                                    "type": "string",
                                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                  },
                                  "proof": {
                                    "$ref": "#/components/schemas/inode_tree"
                                  }
                                },
                                "required": [
                                  "length",
                                  "segment",
                                  "proof"
                                ]
                              }
                            },
                            "required": [
                              "inode_extender"
                            ]
                          },
                          {
                            "title": "None",
                            "type": "object",
                            "properties": {
                              "none": {}
                            },
                            "required": [
                              "none"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "other_inode_trees"
                    ]
                  }
                ]
              }
            },
            "required": [
              "other_inode_trees"
            ]
          }
        ]
      },
      "int64": {
        "title": "64 bit integers",
        "description": "Decimal representation of 64 bit integers",
        "type": "string"
      },
      "merkle_tree": {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/unistring"
              },
              {
                "oneOf": [
                  {
                    "title": "Hash",
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "$ref": "#/components/schemas/unistring"
                        }
                      ]
                    }
                  },
                  {
                    "title": "Data",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/raw_context"
                      }
                    ]
                  },
                  {
                    "title": "Continue",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/merkle_tree"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "micheline.alpha.michelson_v1.expression": {
        "oneOf": [
          {
            "title": "Int",
            "type": "object",
            "properties": {
              "int": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "int"
            ]
          },
          {
            "title": "String",
            "type": "object",
            "properties": {
              "string": {
                "$ref": "#/components/schemas/unistring"
              }
            },
            "required": [
              "string"
            ]
          },
          {
            "title": "Bytes",
            "type": "object",
            "properties": {
              "bytes": {
                "type": "string",
                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
              }
            },
            "required": [
              "bytes"
            ]
          },
          {
            "title": "Sequence",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
            }
          },
          {
            "title": "Prim__generic",
            "description": "Generic primitive (any number of args with or without annotations)",
            "type": "object",
            "properties": {
              "prim": {
                "$ref": "#/components/schemas/alpha.michelson.v1.primitives"
              },
              "args": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/micheline.alpha.michelson_v1.expression"
                }
              },
              "annots": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/unistring"
                }
              }
            },
            "required": [
              "prim"
            ]
          }
        ]
      },
      "micheline.location": {
        "title": "Canonical location in a Micheline expression",
        "description": "The location of a node in a Micheline expression tree in prefix order, with zero being the root and adding one for every basic node, sequence and primitive application.",
        "type": "integer",
        "minimum": -1073741824,
        "maximum": 1073741823
      },
      "next_operation": {
        "description": "An operation's shell header.",
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string",
            "enum": [
              "ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK"
            ]
          },
          "branch": {
            "$ref": "#/components/schemas/block_hash"
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/alpha.operation.alpha.contents"
            }
          },
          "signature": {
            "$ref": "#/components/schemas/Signature.V1"
          }
        },
        "required": [
          "protocol",
          "branch",
          "contents"
        ]
      },
      "operation": {
        "oneOf": [
          {
            "description": "An operation's shell header.",
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "enum": [
                  "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im"
                ]
              },
              "chain_id": {
                "$ref": "#/components/schemas/Chain_id"
              },
              "hash": {
                "$ref": "#/components/schemas/Operation_hash"
              },
              "branch": {
                "$ref": "#/components/schemas/block_hash"
              },
              "metadata": {
                "type": "string",
                "enum": [
                  "too large"
                ]
              }
            },
            "required": [
              "protocol",
              "chain_id",
              "hash",
              "branch",
              "metadata"
            ],
            "additionalProperties": {}
          },
          {
            "description": "An operation's shell header.",
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "enum": [
                  "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im"
                ]
              },
              "chain_id": {
                "$ref": "#/components/schemas/Chain_id"
              },
              "hash": {
                "$ref": "#/components/schemas/Operation_hash"
              },
              "branch": {
                "$ref": "#/components/schemas/block_hash"
              }
            },
            "required": [
              "protocol",
              "chain_id",
              "hash",
              "branch"
            ],
            "additionalProperties": {}
          },
          {
            "description": "An operation's shell header.",
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "enum": [
                  "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im"
                ]
              },
              "chain_id": {
                "$ref": "#/components/schemas/Chain_id"
              },
              "hash": {
                "$ref": "#/components/schemas/Operation_hash"
              },
              "branch": {
                "$ref": "#/components/schemas/block_hash"
              }
            },
            "required": [
              "protocol",
              "chain_id",
              "hash",
              "branch"
            ],
            "additionalProperties": {}
          }
        ]
      },
      "positive_bignum": {
        "title": "Positive big number",
        "description": "Decimal representation of a positive big number",
        "type": "string"
      },
      "random": {
        "title": "A random generation state (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "raw_block_header": {
        "title": "Shell header",
        "description": "Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.",
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "proto": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "predecessor": {
            "$ref": "#/components/schemas/block_hash"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp.protocol"
          },
          "validation_pass": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "operations_hash": {
            "$ref": "#/components/schemas/Operation_list_list_hash"
          },
          "fitness": {
            "$ref": "#/components/schemas/fitness"
          },
          "context": {
            "$ref": "#/components/schemas/Context_hash"
          },
          "content": {
            "oneOf": [
              {
                "title": "Activate",
                "type": "object",
                "properties": {
                  "command": {
                    "type": "string",
                    "enum": [
                      "activate"
                    ]
                  },
                  "hash": {
                    "$ref": "#/components/schemas/Protocol_hash"
                  },
                  "fitness": {
                    "$ref": "#/components/schemas/fitness"
                  },
                  "protocol_parameters": {
                    "type": "string",
                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                  }
                },
                "required": [
                  "command",
                  "hash",
                  "fitness",
                  "protocol_parameters"
                ]
              },
              {
                "title": "Activate_testchain",
                "type": "object",
                "properties": {
                  "command": {
                    "type": "string",
                    "enum": [
                      "activate_testchain"
                    ]
                  },
                  "hash": {
                    "$ref": "#/components/schemas/Protocol_hash"
                  },
                  "fitness": {
                    "$ref": "#/components/schemas/fitness"
                  },
                  "protocol_parameters": {
                    "type": "string",
                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                  },
                  "validity_time": {
                    "$ref": "#/components/schemas/int64"
                  }
                },
                "required": [
                  "command",
                  "hash",
                  "fitness",
                  "protocol_parameters",
                  "validity_time"
                ]
              }
            ]
          },
          "signature": {
            "$ref": "#/components/schemas/Signature.V0"
          }
        },
        "required": [
          "level",
          "proto",
          "predecessor",
          "timestamp",
          "validation_pass",
          "operations_hash",
          "fitness",
          "context",
          "content",
          "signature"
        ]
      },
      "raw_context": {
        "nullable": true,
        "oneOf": [
          {
            "title": "Key",
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
          },
          {
            "title": "Dir",
            "type": "object",
            "properties": {},
            "additionalProperties": {
              "$ref": "#/components/schemas/raw_context"
            }
          }
        ]
      },
      "sapling.DH.epk": {
        "type": "string",
        "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
      },
      "sapling.transaction.ciphertext": {
        "type": "object",
        "properties": {
          "cv": {
            "$ref": "#/components/schemas/sapling.transaction.commitment_value"
          },
          "epk": {
            "$ref": "#/components/schemas/sapling.DH.epk"
          },
          "payload_enc": {
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
          },
          "nonce_enc": {
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
          },
          "payload_out": {
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
          },
          "nonce_out": {
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
          }
        },
        "required": [
          "cv",
          "epk",
          "payload_enc",
          "nonce_enc",
          "payload_out",
          "nonce_out"
        ]
      },
      "sapling.transaction.commitment": {
        "type": "string",
        "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
      },
      "sapling.transaction.commitment_hash": {
        "type": "string",
        "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
      },
      "sapling.transaction.commitment_value": {
        "type": "string",
        "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
      },
      "sapling.transaction.nullifier": {
        "type": "string",
        "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
      },
      "script_expr": {
        "title": "A script expression ID (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "smart_rollup_address": {
        "title": "A smart rollup address (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "smart_rollup_commitment_hash": {
        "title": "The hash of a commitment of a smart rollup (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "smart_rollup_inbox_hash": {
        "title": "The hash of an inbox of a smart rollup (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "smart_rollup_merkelized_payload_hashes_hash": {
        "title": "The hash of the Merkelized payload hashes of a smart rollup inbox (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "smart_rollup_state_hash": {
        "title": "The hash of the VM state of a smart rollup (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "test_chain_status": {
        "description": "The status of the test chain: not_running (there is no test chain at the moment), forking (the test chain is being setup), running (the test chain is running).",
        "oneOf": [
          {
            "title": "Not_running",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "not_running"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Forking",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "forking"
                ]
              },
              "protocol": {
                "$ref": "#/components/schemas/Protocol_hash"
              },
              "expiration": {
                "$ref": "#/components/schemas/timestamp.protocol"
              }
            },
            "required": [
              "status",
              "protocol",
              "expiration"
            ]
          },
          {
            "title": "Running",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "running"
                ]
              },
              "chain_id": {
                "$ref": "#/components/schemas/Chain_id"
              },
              "genesis": {
                "$ref": "#/components/schemas/block_hash"
              },
              "protocol": {
                "$ref": "#/components/schemas/Protocol_hash"
              },
              "expiration": {
                "$ref": "#/components/schemas/timestamp.protocol"
              }
            },
            "required": [
              "status",
              "chain_id",
              "genesis",
              "protocol",
              "expiration"
            ]
          }
        ]
      },
      "timestamp.protocol": {
        "description": "A timestamp as seen by the protocol: second-level precision, epoch based.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "tree_encoding": {
        "oneOf": [
          {
            "title": "Inode",
            "type": "object",
            "properties": {
              "inode": {
                "type": "object",
                "properties": {
                  "length": {
                    "$ref": "#/components/schemas/int64"
                  },
                  "proofs": {
                    "oneOf": [
                      {
                        "title": "sparse_proof",
                        "type": "object",
                        "properties": {
                          "sparse_proof": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 255
                                  },
                                  {
                                    "$ref": "#/components/schemas/inode_tree"
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "required": [
                          "sparse_proof"
                        ]
                      },
                      {
                        "title": "dense_proof",
                        "type": "object",
                        "properties": {
                          "dense_proof": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/inode_tree"
                            }
                          }
                        },
                        "required": [
                          "dense_proof"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "length",
                  "proofs"
                ]
              }
            },
            "required": [
              "inode"
            ]
          },
          {
            "title": "other_trees",
            "type": "object",
            "properties": {
              "other_trees": {
                "oneOf": [
                  {
                    "title": "Node",
                    "type": "object",
                    "properties": {
                      "node": {
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "string",
                                "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                              },
                              {
                                "$ref": "#/components/schemas/tree_encoding"
                              }
                            ]
                          }
                        }
                      }
                    },
                    "required": [
                      "node"
                    ]
                  },
                  {
                    "title": "other_trees",
                    "type": "object",
                    "properties": {
                      "other_trees": {
                        "oneOf": [
                          {
                            "title": "Value",
                            "type": "object",
                            "properties": {
                              "value": {
                                "oneOf": [
                                  {
                                    "title": "short_bytes",
                                    "type": "string",
                                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                  },
                                  {
                                    "title": "medium_bytes",
                                    "type": "string",
                                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                  },
                                  {
                                    "title": "long_bytes",
                                    "description": "This case is void. No data is accepted."
                                  },
                                  {
                                    "title": "unlimited_bytes",
                                    "type": "string",
                                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                  }
                                ]
                              }
                            },
                            "required": [
                              "value"
                            ]
                          },
                          {
                            "title": "Blinded_value",
                            "type": "object",
                            "properties": {
                              "blinded_value": {
                                "$ref": "#/components/schemas/Context_hash"
                              }
                            },
                            "required": [
                              "blinded_value"
                            ]
                          },
                          {
                            "title": "Blinded_node",
                            "type": "object",
                            "properties": {
                              "blinded_node": {
                                "$ref": "#/components/schemas/Context_hash"
                              }
                            },
                            "required": [
                              "blinded_node"
                            ]
                          },
                          {
                            "title": "Extender",
                            "type": "object",
                            "properties": {
                              "extender": {
                                "type": "object",
                                "properties": {
                                  "length": {
                                    "$ref": "#/components/schemas/int64"
                                  },
                                  "segment": {
                                    "type": "string",
                                    "pattern": "^([a-zA-Z0-9][a-zA-Z0-9])*$"
                                  },
                                  "proof": {
                                    "$ref": "#/components/schemas/inode_tree"
                                  }
                                },
                                "required": [
                                  "length",
                                  "segment",
                                  "proof"
                                ]
                              }
                            },
                            "required": [
                              "extender"
                            ]
                          },
                          {
                            "title": "None",
                            "type": "object",
                            "properties": {
                              "none": {}
                            },
                            "required": [
                              "none"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "other_trees"
                    ]
                  }
                ]
              }
            },
            "required": [
              "other_trees"
            ]
          }
        ]
      },
      "unistring": {
        "title": "Universal string representation",
        "description": "Either a plain UTF8 string, or a sequence of bytes for strings that contain invalid byte sequences.",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "object",
            "properties": {
              "invalid_utf8_string": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 255
                }
              }
            },
            "required": [
              "invalid_utf8_string"
            ]
          }
        ]
      },
      "value_hash": {
        "title": "Hash of a consensus value (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      }
    }
  }
}
