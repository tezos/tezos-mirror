# TODO #2170: search for old/preceding protocol name AND number, and adapt

# You can set these variables from the command line.
SPHINXOPTS    = --write-all --fresh-env --nitpicky --fail-on-warning --keep-going --quiet
SPHINXBUILD   = poetry run sphinx-build
SOURCEDIR     = .
TMPDOCDIR     = /tmp/octezdoc
BUILDDIR      = _build
TOPBUILDDIR   = ../_build
TOPBUILDDIR_ABS  = $(abspath $(CURDIR)/$(TOPBUILDDIR))

DOCGENDIR     = doc_gen
DOCERRORDIR   = $(DOCGENDIR)/errors
P2PDOCEXE     = $(TOPBUILDDIR)/default/docs/$(DOCGENDIR)/p2p_doc.exe
RPCDOCEXE     = $(TOPBUILDDIR)/default/docs/$(DOCGENDIR)/rpc_doc.exe
ERRDOCEXE     = $(TOPBUILDDIR)/default/docs/$(DOCERRORDIR)/error_doc.exe

NAMED_PROTOS  = paris quebec
PROTOCOLS     = $(NAMED_PROTOS) alpha

# The following variables names are lowercase, so their names can be computed
# from the names of the corresponding protocol directories
paris_long    = PsParisCZo7KAh1Z1smVd9ZMZ1HHn5gkzbM94V3PLCpknFWhUAi
quebec_long  = PsQuebecnLByd3JwTiGadoG4nGWi3HYiLXUjkibeFV8dCFeVMUg
alpha_long    = ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK

paris_short   = PsParisC
quebec_short = PsQuebec
alpha_short   = alpha

SCRIPTSDIR    = scripts
CHECKXREFS    = $(SCRIPTSDIR)/check_proto_xrefs.py

# Build all documentation (with CLI manuals and odoc) but without old PROTOCOLS
.PHONY: odoc-lite
all: odoc-lite
	# Html needs the API pages for OCaml modules, generated by odoc, because of
	# the :package: custom roles in RST files; so run html *after* odoc
	${MAKE} html

# Build the full documentation including archived protocols; for publishing only
.PHONY: odoc
full: odoc
	# Same ordering constraint: html *after* odoc (see target "all")
	${MAKE} html

# Build html without odoc (if odoc already ran or if not checking custom roles)
.PHONY: html
html: octez-gen docexes-gen
	${MAKE} sphinx

# Build the manuals for a given protocol
%/octez-client.html:
	@../octez-client -protocol $($(@D)_long) man -verbosity 3 -format html | sed "s#${HOME}#\$$HOME#g" > $@
%/octez-baker.html:
	@../octez-baker-$($(@D)_short) man -verbosity 3 -format html | sed "s#${HOME}#\$$HOME#g" > $@
%/octez-accuser.html:
	@../octez-accuser-$($(@D)_short) man -verbosity 3 -format html | sed "s#${HOME}#\$$HOME#g" > $@

# Binary non-protocol specific manuals for clic binaries.
api/%.html:
	@../$* man -verbosity 3 -format html | sed "s#${HOME}#\$$HOME#g" > api/$*.html

# Binary non-protocol specific manuals for cmdliner binaries.
api/octez-node.txt:
	@../octez-node --help | grep -v '^Octez-node' | grep -v 'OCTEZ-NODE(1)' | \
		./scripts/man2txt.py -r > api/octez-node.txt
api/octez-dal-node.txt:
	@../octez-dal-node --help | grep -v '^Octez-dal-node' | grep -v 'OCTEZ-DAL-NODE(1)' | \
		./scripts/man2txt.py -r > api/octez-dal-node.txt
api/octez-dal-node-config-init.txt:
	@../octez-dal-node config init --help | grep -v '^Octez-dal-node' | grep -v 'OCTEZ-DAL-NODE(1)' | \
		./scripts/man2txt.py > api/octez-dal-node-config-init.txt

.PHONY: manuals
manuals: \
	 $(PROTOCOLS:%=%/octez-client.html) \
	 $(PROTOCOLS:%=%/octez-baker.html) \
	 $(PROTOCOLS:%=%/octez-accuser.html) \
	 api/octez-admin-client.html \
	 api/octez-signer.html \
	 api/octez-codec.html \
	 api/octez-snoop.html \
	 api/octez-dac-node.html \
	 api/octez-dac-client.html \
	 api/octez-smart-rollup-node.html \
	 api/octez-node.txt \
	 api/octez-dal-node.txt \
	 api/octez-dal-node-config-init.txt

.PHONY: odoc
odoc:
	$(MAKE) odoc-raw slim_mode=off odoc_errors=false

.PHONY: odoc-lite
odoc-lite:
	$(MAKE) odoc-raw slim_mode=on odoc_errors=true

.PHONY: odoc
odoc-raw:
	rm -rf $(TMPDOCDIR)/
	mkdir -p $(TMPDOCDIR)/
	cd ..; rsync --recursive --links --perms --exclude=target \
		$$(cat script-inputs/octez-source-content) \
		client-libs etherlink $(TMPDOCDIR)/
	cd $(TMPDOCDIR)/ && ./scripts/slim-mode.sh $$slim_mode
	ODOC_WARN_ERROR=$$odoc_errors dune build @doc --build-dir=$(TOPBUILDDIR_ABS) --root=$(TMPDOCDIR) >$(CURDIR)/odoc.log 2>&1; \
		RESULT=$$?; \
		(grep -B1 '^Error:' $(CURDIR)/odoc.log || true) ; \
		exit $$RESULT
	rm -rf $(CURDIR)/_build/api/odoc
	mkdir -p $(CURDIR)/_build/api
	cp -r $(TOPBUILDDIR_ABS)/default/_doc $(CURDIR)/_build/api/odoc
	rm -rf $(CURDIR)/_build/api/odoc/_odocls

.PHONY: linkcheck
# Run this after make html
linkcheck:
	@echo "Running linkcheck, outputs messages to $(BUILDDIR)/output.txt"
	@$(SPHINXBUILD) --builder linkcheck "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) >$@;\
		RESULT=$$?; cat $(BUILDDIR)/output.txt; exit $$RESULT

.PHONY: fixlinkcheck
fixlinkcheck:
	@scripts/update_links.sh

.PHONY: redirectcheck
# Run this after make html
redirectcheck:
	@cd $$(pwd)/.. ; ./scripts/lint.sh --check-redirects

# xrefs should be checked:
# - on the active protocol using its numeric name (not the "active" symlink)
# - on each other protocol including alpha, also checking label defs (option -l)
.PHONY: xrefscheck
xrefscheck:
	$(CHECKXREFS) quebec
	$(CHECKXREFS) paris
	$(CHECKXREFS) -l alpha

.PHONY: installcheck
installcheck:
	scripts/test_install_scripts.sh install-bin-noble
	scripts/test_install_scripts.sh install-bin-jammy
	scripts/test_install_scripts.sh install-bin-rc-jammy
	scripts/test_install_scripts.sh install-bin-rc-noble
	scripts/test_install_scripts.sh install-bin-bookworm
	scripts/test_install_scripts.sh install-bin-rc-bookworm
	scripts/test_install_scripts.sh install-opam-scratch
	scripts/test_install_scripts.sh install-opam-jammy
	scripts/test_install_scripts.sh compile-release-sources-bullseye
	scripts/test_install_scripts.sh compile-sources-bullseye
	scripts/test_install_scripts.sh compile-sources-mantic

# build dune targets together to avoid concurrent dunes
.PHONY: docexes
docexes:
	cd .. && dune build docs/$(DOCERRORDIR)/error_doc.exe docs/$(DOCGENDIR)/rpc_doc.exe docs/$(DOCGENDIR)/p2p_doc.exe

developer/metrics.csv:
	../octez-node dump-metrics > developer/metrics.csv

$(ERRDOCEXE): docexes
$(RPCDOCEXE): docexes
$(P2PDOCEXE): docexes

api/errors.rst: $(ERRDOCEXE)
	$(ERRDOCEXE) > api/errors.rst

shell/rpc.rst: $(RPCDOCEXE)
	$(RPCDOCEXE) index shell /shell/rpc_introduction.rst.inc > $@

%/rpc.rst: $(RPCDOCEXE)
	$(RPCDOCEXE) index $(@D) $($(@D)_long) /include/rpc_introduction.rst.inc > $@

user/default-acl.json: $(RPCDOCEXE)
	$(RPCDOCEXE) acl > $@

.PHONY: rpc
rpc: user/default-acl.json shell/rpc.rst \
	alpha/rpc.rst

# To be triggered manually when needed
.PHONY: rpc-protocols
rpc-protocols: $(NAMED_PROTOS:%=%/rpc.rst)

.PHONY: openapi
openapi:
	cd ..; ./src/bin_openapi/generate.sh
	@if ! git diff --quiet --ignore-matching-lines='^ *"version":' api/*.json ;\
		then echo "Error: docs/api/*.json have changed, commit them if you want to update the repo"; exit 1;\
		else echo "OK: Your docs/api/*.json are up to date";\
	fi

shell/p2p_api.rst: $(P2PDOCEXE) shell/p2p_usage.rst.inc
	@$(P2PDOCEXE) < shell/p2p_usage.rst.inc > shell/p2p_api.rst

.PHONY: install-dependencies
install-dependencies:
	@poetry install

user/node-config.json: user/node-config.sh
	cd ..; ./docs/user/node-config.sh >docs/$@

# Pages generated by running Octez binaries
.PHONY: octez-gen
octez-gen: developer/metrics.csv user/node-config.json manuals

# Pages generated by the generators under docs/doc_gen/
.PHONY: docexes-gen
docexes-gen: api/errors.rst shell/p2p_api.rst rpc

# Run Sphinx, assuming all generated pages have been built previously
.PHONY: sphinx
sphinx: install-dependencies
	(echo ':orphan:'; echo ''; cat ../CHANGES.rst) > CHANGES-dev.rst
	@$(SPHINXBUILD) --builder html "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS)
	@ln -s active "$(BUILDDIR)/paris" || true

# Syntax check RST files.
# Run Sphinx, but first create dummy version of all generated files,
# and write no output. Can be used to syntax check RST files.
sphinx-check: install-dependencies
	@(echo ':orphan:'; echo ''; cat ../CHANGES.rst) > CHANGES-dev.rst
# Build a dummy version of all prerequisites
	@${MAKE} --touch html >/dev/null
# Unless this 'alpha/rpc.rst' contains a title, a non-suppressable warning is raised:
	@echo "DUMMY TITLE" > alpha/rpc.rst
	@echo "===========" >> alpha/rpc.rst
# Unless this file contain the following lines, a non-suppressable warning is raised:
	@echo "OPTIONS" > api/octez-dal-node-config-init.txt
	@echo "COMMON OPTIONS" >> api/octez-dal-node-config-init.txt
# metrics.csv must actually contain some CSV rows with 4 fields each.
	@echo "a,b,c,d" > developer/metrics.csv
	@echo "1,2,3,4" >> developer/metrics.csv
# Build with dummy output
	@$(SPHINXBUILD) --builder dummy $(SPHINXOPTS) "$(SOURCEDIR)" "$(BUILDDIR)"

# pylint does not support pyproject.toml configuration for now
# It is configured by ./.pylint.rc
# In pylint, we ignore the following additional errors:
# - C0330: pylint is wrong (https://github.com/psf/black/issues/48)
PYLINTRC?=../.pylintrc
PYLINT=PYLINTRC=${PYLINTRC} poetry run pylint

# pycodestyle does not support pyproject.toml configuration for now
# https://github.com/PyCQA/pydocstyle/issues/447
#
# In pycodestyle we ignore the following additional errors w.r.t to defaults
# (i.e. E121,E123,E126,E226,E24,E704,W503)
# - E203 :: pycodestyle is wrong (https://github.com/psf/black/issues/315)
#           and black takes care of it
# - E231 :: same as E203
#
# Other error codes are detailed at https://www.flake8rules.com/
PYCODESTYLE=poetry run pycodestyle
PYCODESTYLE_OPTIONS=\
	--ignore=E121,E123,E126,E226,E24,E704,W503,E203,E231 \
	--max-line-length=80

TYPECHECK=poetry run mypy

BLACK=poetry run black

PYTHON_SRCS?=conf.py _extensions/*.py scripts/*.py

.PHONY: pylint
pylint:
	@echo "Linting with pylint, version:"
	@poetry run pylint --version | sed 's/^/  /'
	$(PYLINT) $(PYTHON_SRCS)

.PHONY: lint_black
lint_black:
	@echo "Running black formatter as style checker"
	$(BLACK) --check $(PYTHON_SRCS)

.PHONY: pycodestyle
pycodestyle:
	@echo "Linting with pycodestyle version `poetry run pycodestyle --version` (`poetry run which pycodestyle`)"
	$(PYCODESTYLE) $(PYCODESTYLE_OPTIONS) $(PYTHON_SRCS)

.PHONY: typecheck
typecheck:
	@echo "Typechecking with mypy version `poetry run mypy --version`"
	$(TYPECHECK) $(PYTHON_SRCS)

.PHONY: lint
lint: pylint pycodestyle lint_black typecheck

# black options are set in pyproject.toml
.PHONY: black
black:
	@echo "Running black formatter"
	$(BLACK) $(PYTHON_SRCS)

.PHONY: fmt
fmt: black

.PHONY: clean
clean:
	@-rm -Rf "$(BUILDDIR)" linkcheck odoc.log
	@-rm -f $(ERRDOCEXE) $(RPCDOCEXE) $(P2PDOCEXE)
	@-rm -Rf api/errors.rst developer/metrics.csv user/node-config.json alpha/rpc.rst shell/rpc.rst shell/p2p_api.rst user/default-acl.json CHANGES-dev.rst
	@-rm -Rf api/octez-*.html api/octez-*.txt paris/octez-*.html alpha/octez-*.html quebec/octez-*.html
	@-rm -Rf ../openapi-tmp
