//****************************************************************************//
//                                                                            //
// SPDX-License-Identifier: MIT                                               //
// Copyright (c) [2023] Serokell <hi@serokell.io>                             //
//                                                                            //
//****************************************************************************//

#![allow(dead_code, unused_imports)]
#![allow(clippy::all)]
#![cfg(not(tarpaulin_include))]

use crate::ast::*;
use crate::ast::annotations::*;
use crate::parser::ParserError;
use crate::parser::macros::expand_macro;
use crate::lexer::{LexerError, Prim, Noun, TztPrim as TzP, Tok};
use crate::lexer::macros::{MacroArgs, Macro};
use crate::typechecker as TC;
use crate::tzt::*;
use Noun::*;
use Noun as PT;
use typed_arena::Arena;
use num_bigint::BigInt;

grammar<'a>(arena: &'a Arena<Micheline<'a>>);

extern {
    type Error = ParserError;
    type Location = usize;

    enum Tok<'a> {
        "stack_elt" => Tok::Noun(TztPrim(TzP::Stack_elt)),
        "contract" => Tok::Noun(TztPrim(TzP::Contract)),
        "input" => Tok::Noun(TztPrim(TzP::input)),
        "output" => Tok::Noun(TztPrim(TzP::output)),
        "failed" => Tok::Noun(TztPrim(TzP::Failed)),
        "mutezOverflow" => Tok::Noun(TztPrim(TzP::MutezOverflow)),
        "generalOverflow" => Tok::Noun(TztPrim(TzP::GeneralOverflow)),
        "Overflow" => Tok::Noun(TztPrim(TzP::Overflow)),
        "StaticError" => Tok::Noun(TztPrim(TzP::StaticError)),
        "amount" => Tok::Noun(TztPrim(TzP::amount)),
        "balance" => Tok::Noun(TztPrim(TzP::balance)),
        "self" => Tok::Noun(TztPrim(TzP::self_)),
        "other_contracts" => Tok::Noun(TztPrim(TzP::other_contracts)),
        number => Tok::Number(<BigInt>),
        string => Tok::String(<String>),
        bytes => Tok::Bytes(<Vec<u8>>),
        ann => Tok::Annotation(<Annotation<'a>>),
        // parameter, code and chain_id lexemes are special-cased because
        // they're also used in the tzt syntax
        macro => Tok::Noun(Noun::MacroPrim(<Macro>)),
        "parameter" => Tok::Noun(PT::Prim(Prim::parameter)),
        "code" => Tok::Noun(PT::Prim(Prim::code)),
        "chain_id" => Tok::Noun(PT::Prim(Prim::chain_id)),
        prim => Tok::Noun(PT::Prim(<Prim>)),
        "(" => Tok::LParen,
        ")" => Tok::RParen,
        "{" => Tok::LBrace,
        "}" => Tok::RBrace,
        ";" => Tok::Semi,
        "_" => Tok::Noun(PT::TztPrim(TzP::Underscore))
    }
}

Prim: Prim = {
  "parameter" => Prim::parameter,
  "code" => Prim::code,
  "chain_id" => Prim::chain_id,
  prim => <>,
}

MichelineAtomic: Micheline<'a> = {
  number => Micheline::Int(<>),
  string => Micheline::String(<>),
  bytes => Micheline::Bytes(<>),
  Prim => Micheline::prim0(<>),
  macro =>? expand_macro(arena, &<>, MacroArgs::NoArgs).map_err(Into::into),
}

MacroArgs: MacroArgs<'a> = {
  <arg1:Micheline> => MacroArgs::OneArg(arg1),
  <arg1:Micheline> <arg2:Micheline> => MacroArgs::TwoArgs(arg1, arg2)
}

MichelineComplex: Micheline<'a> = {
  <prim:Prim> <anns:ann+> => Micheline::App(prim, &[], anns.into()),
  <prim:Prim> <anns:ann*> <args:Micheline+> => Micheline::App(prim, arena.alloc_extend(args), anns.into()),
  <m:macro> <anns:ann*> <args:MacroArgs> =>? expand_macro(arena, &m, args).map_err(Into::into),
}

pub MichelineNaked: Micheline<'a> = {
  MichelineComplex,
  Micheline,
}

pub Micheline: Micheline<'a> = {
  MichelineAtomic,
  "(" <MichelineNaked> ")",
  "{" <MichelineNakedSeq> "}",
}

MichelineNakedSeq: Micheline<'a> =
  semicolonSepSeq<MichelineNaked> => Micheline::Seq(arena.alloc_extend(<>));

pub MichelineTopLevel: Micheline<'a> = {
  MichelineNakedSeq,
}

semicolonSepSeq<T>: Vec<T> = {
  <mut tseq:(<T>";")*><i:T?> => {
    // A sequence of T-followed-by-a-semicolon matched by
    // `(<T>";")*` resulting in `Vec<T>` and bound to `ib`,
    // which can be optionally followed by a single trailing T,
    // matched by `<i:T?>.

    match i {
      Some(t) => {
        tseq.push(t);
        tseq
      },
      None => tseq
    }
  }
}

// For parsing TZT Tests

use TztEntity::*;
use TztOutput::*;

tztStackElt : (Micheline<'a>, Micheline<'a>) = {
  "stack_elt" <t:Micheline> <v:Micheline> => (t, v)
}

otherContractsElt : (Micheline<'a>, Micheline<'a>) = {
  "contract" <t:Micheline> <v:Micheline> => (t, v)
}

otherContractsSeq = semicolonSepSeq<otherContractsElt>;

otherContracts : Vec<(Micheline<'a>, Micheline<'a>)> = {
  "{" <s:otherContractsSeq> "}" => s
}

tztStackEltSeq = semicolonSepSeq<tztStackElt>;

tztStack : Vec<(Micheline<'a>, Micheline<'a>)> = {
  "{" <s:tztStackEltSeq> "}" => s
}

mutezAmount : i64 =
  <n:number> =>? i64::try_from(&n)
    .map_err(|_| ParserError::LexerError(LexerError::NumericLiteral(n.to_string())).into() );

use ErrorExpectation::*;
use InterpreterErrorExpectation::*;
tztEntity : TztEntity<'a> = {
  "code" <Micheline> => Code(<>),
  "input" <s:tztStack> => Input(s),
  "output" <s:tztStack> => Output(TztSuccess(s)),
  "output" "(" "failed" <v:Micheline> ")" => Output(TztError(InterpreterError(FailedWith(v)))),
  "output" "(" "mutezOverflow" <a1:mutezAmount> <a2:mutezAmount> ")" => Output(TztError(InterpreterError(MutezOverflow(a1, a2)))),
  "output" "(" "generalOverflow" <a1:number> <a2:number> ")" => Output(TztError(InterpreterError(GeneralOverflow(a1, a2)))),
  "output" "(" "StaticError" <s:string> ")" => Output(TztError(TypecheckerError(Some(s)))),
  "output" "(" "StaticError" "_"  ")" => Output(TztError(TypecheckerError(None))),
  "output" "Overflow" => Output(TztError(InterpreterError(Overflow))),
  "amount" <m:mutezAmount> => TztEntity::Amount(m),
  "balance" <m:mutezAmount> => TztEntity::Balance(m),
  "chain_id" <Micheline> => TztEntity::ChainId(<>),
  "parameter" <Micheline> => TztEntity::Parameter(<>),
  "self" <Micheline> => TztEntity::SelfAddr(<>),
  "other_contracts" <otherContracts> => TztEntity::OtherContracts(<>),
}

pub(crate) tztTestEntities : Vec<TztEntity<'a>> = semicolonSepSeq<tztEntity>;
