// SPDX-FileCopyrightText: 2023 Marigold <contact@marigold.dev>
//
// SPDX-License-Identifier: MIT

// Use this script to sign an ethereum transaction provided as a json, using a given private key.
// See transactions_example/*.json for examples of format.
// Note that a deployement transaction must not include a "to" field.
// Outputs:
// - the signed transaction,
// - the message hash,
// - and the "r", "s" and "v" parts of the signature.
//
// usage: node sign_tx.js ./relative/path/to/tx.json "privateKey"
// dependency: npm install--save '@warren-bank/ethereumjs-tx-sign'
// for faucet, use private key "cb9db6b5878db2fa20586e23b7f7b51c22a7c6ed0530daafc2615b116f170cd3"

// example: node sign_tx.js ./transactions_example/tx.json "e922354a3e5902b5ac474f3ff08a79cff43533826b8f451ae2190b65a9d26158"
// expected:
// tx = 0xf90339018506fc23ac008310000094000000000000000000000000000000000000000080b902d26060604052341561000c57fe5b60405160a0806102d2833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b84600060006101000a81548160ff02191690831515021790555083600060016101000a81548160ff021916908360ff1602179055508260018190555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600381600019169055505b50505050505b6101e7806100eb6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806337af7327146100675780634aa2762e146100b9578063bc109174146100e7578063d2a174e51461010d578063fab261f414610137575bfe5b341561006f57fe5b610077610163565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100c157fe5b6100c9610189565b60405180826000191660001916815260200191505060405180910390f35b34156100ef57fe5b6100f761018f565b6040518082815260200191505060405180910390f35b341561011557fe5b61011d610195565b604051808215151515815260200191505060405180910390f35b341561013f57fe5b6101476101a8565b604051808260ff1660ff16815260200191505060405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60015481565b600060009054906101000a900460ff1681565b600060019054906101000a900460ff16815600a165627a7a72305820ff945b9d7a6ff1e878bec54db295bb00226acfa2fb89419a3f9798c76963b16500291ba08aecbf204ffac9c31638c4cf508c5a83600fb755b869235aefe0708f460f8126a043b5fb3bd40cc632fa8f274e4bc5503c72a34b6349344b2d1b48b45055a3e110
// msgHash = 3c74ed8cf6d9695ac4de8e5dda38ac3719b3f42e913e0109344a5fcbd1ff8562
// r = 8aecbf204ffac9c31638c4cf508c5a83600fb755b869235aefe0708f460f8126
// s = 43b5fb3bd40cc632fa8f274e4bc5503c72a34b6349344b2d1b48b45055a3e110

const { sign } = require('./lib/signature')

// get args
let jsonFile = process.argv[2]
let privateKey = process.argv[3]

// create json object from tx.json
let json = require(jsonFile);
let signedTx = sign(json, privateKey);
console.log(`tx = 0x${signedTx.rawTx}`);
console.log("msgHash = " + signedTx.msgHash);
console.log("r = " + signedTx.r);
console.log("s = " + signedTx.s);
console.log("v = " + signedTx.v);