// SPDX-FileCopyrightText: 2022-2023 TriliTech <contact@trili.tech>
// SPDX-FileCopyrightText: 2023-2024 Nomadic Labs <contact@nomadic-labs.com>
//
// SPDX-License-Identifier: MIT

use crate::access_record::AccessRecord;
use crate::handler::Withdrawal;
use evm::executor::stack::Log;
use evm::gasometer::Gasometer;
use evm::Config;
use primitive_types::H160;
use std::collections::BTreeSet;

/// Data related to the current transaction layer
pub struct TransactionLayerData<'config> {
    /// Gasometer for the current transaction layer. If this value is
    /// `None`, then the current transaction has no gas limit and no
    /// gas accounting.
    pub gasometer: Option<Gasometer<'config>>,
    /// Whether the current transaction is static or not, ie, if the
    /// transaction is allowed to update durable storage.
    pub is_static: bool,
    /// The log records gathered in this layer of transactions and any
    /// committed sub layers.
    pub logs: Vec<Log>,
    /// The addresses of contracts that have been deleted as part of
    /// the current transaction.
    pub deleted_contracts: BTreeSet<H160>,
    /// Any withdrawals generated by the current transaction level and
    /// successful sub-levels.
    pub withdrawals: Vec<Withdrawal>,
    /// Keep track of accessed adresses and storages indices.
    /// See EIP-2929 and YP section 6.1
    pub accessed_storage_keys: AccessRecord,
}

impl<'config> TransactionLayerData<'config> {
    /// Create the data associated with one layer of transactions -
    /// one Ethereum transaction context. It initially has no log
    /// records. If the gas limit is `None`, then there will be no
    /// accounting for gas usage throughout the transaction, ie, there
    /// will be no gasometer.
    pub fn new(
        is_static: bool,
        gas_limit: Option<u64>,
        config: &'config Config,
        accessed_storage_keys: AccessRecord,
    ) -> Self {
        TransactionLayerData {
            gasometer: gas_limit.map(|gl| Gasometer::new(gl, config)),
            is_static,
            logs: vec![],
            deleted_contracts: BTreeSet::new(),
            withdrawals: vec![],
            accessed_storage_keys,
        }
    }
}
