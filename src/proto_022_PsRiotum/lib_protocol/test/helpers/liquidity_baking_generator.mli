(*****************************************************************************)
(*                                                                           *)
(* Open Source License                                                       *)
(* Copyright (c) 2021 Nomadic Labs <contact@nomadic-labs.com>                *)
(*                                                                           *)
(* Permission is hereby granted, free of charge, to any person obtaining a   *)
(* copy of this software and associated documentation files (the "Software"),*)
(* to deal in the Software without restriction, including without limitation *)
(* the rights to use, copy, modify, merge, publish, distribute, sublicense,  *)
(* and/or sell copies of the Software, and to permit persons to whom the     *)
(* Software is furnished to do so, subject to the following conditions:      *)
(*                                                                           *)
(* The above copyright notice and this permission notice shall be included   *)
(* in all copies or substantial portions of the Software.                    *)
(*                                                                           *)
(* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR*)
(* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  *)
(* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL   *)
(* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER*)
(* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING   *)
(* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER       *)
(* DEALINGS IN THE SOFTWARE.                                                 *)
(*                                                                           *)
(*****************************************************************************)

(** This module provides a set of abstractions to reason about the
    so-called “liquidity baking” feature[1].

    [1]: https://gitlab.com/tezos/tzip/-/blob/367628e1a576c3926bedc1d6107b2945607c2605/drafts/current/draft-liquidity_baking.md

    We remind that this feature is built upon three smart contracts:
    (1) a CPMM contract initially based on Dexter 2, and (2) two
    tokens contracts.

    Our purpose for Liquidity Baking is to easily express and test
    invariants regarding the execution of these contracts.  To that
    end, we have introduced a set of dedicated types to describe
    arbitrary contexts in terms of account balances (see
    [Liquidity_baking_machine.specs]), along with [build] functions
    that turn a description of a context into concrete states.

    In this module, we provide QCheck2 generators which allow to
    construct arbitrary specifications for states, and so-called
    scenarios ({i i.e.}, sequences of entrypoint calls). *)

open Liquidity_baking_machine

(** [gen_specs max_tzbtc max_liquidity] constructs arbitrary Liquidity
    Baking [specs] for an initial state, where at most [max_tzbtc] and
    [max_liquidity] are shared among an arbitrary number of implicit
    accounts. *)
val gen_specs : tzbtc -> liquidity -> specs QCheck2.Gen.t

(** [gen_scenario max_tzbtc max_liquidity size] constructs arbitrary
    Liquidity Baking [specs] with a semantics similar to [gen_specs], along with sequences of {b valid}
    scenarios ({i i.e.}, sequences of entrypoint calls) of length
    [size]. By valid, we mean that running the scenario using a
    Liquidity baking machine initialized with the [specs] should
    succeed. *)
val gen_scenario :
  tzbtc -> liquidity -> int -> (specs * contract_id step list) QCheck2.Gen.t

(** [print_scenario scenario] produces a string representation of [scenario],
    as produced by [gen_scenario]. *)
val print_scenario : specs * contract_id step list -> string

(** [gen_adversary_scenario max_tzbtc max_liquidity size] constructs
    arbitrary scenarios that can be used to challenge the “no global
    gain” property of Liquidity Baking.

    The key idea of this property is the following: a given contract
    cannot profit from Liquidity Baking if they are the only one to
    interact with the CPMM (in the absence of subsidies). The scenario
    generated by [gen_adversary_scenario] only consists in [step]
    performed by one contract. This contract is identified by the
    [contract_id] returned by this function. *)
val gen_adversary_scenario :
  tzbtc ->
  liquidity ->
  int ->
  (specs * contract_id * contract_id step list) QCheck2.Gen.t

(** [print_adversary_scenario scenario] produces a string representation of [scenario],
    as produced by [gen_adversary_scenario]. *)
val print_adversary_scenario :
  specs * contract_id * contract_id step list -> string
