// SPDX-FileCopyrightText: 2024 TriliTech <contact@trili.tech>
//
// SPDX-License-Identifier: MIT

mod mstatus;
mod xip;

use super::{
    effects::{handle_csr_effect, NoEffect},
    root::RootCSRegister,
    CSRegisters,
};
use crate::{
    bits::Bits64,
    state_backend::{
        hash::{Hash, HashError, RootHashable},
        AllocatedOf, Choreographer, EffectCell, EffectCellLayout, Layout, ManagerAlloc,
        ManagerBase, ManagerRead, ManagerReadWrite, ManagerWrite, PlacedOf, Ref,
    },
};
use mstatus::MStatusLayout;
pub(super) use mstatus::MStatusValue;
use xip::{XipCell, XipCellLayout};

/// Representation of a value in a CSR
pub type CSRRepr = u64;

/// Value of a Control or State register
#[derive(
    Copy,
    Clone,
    Debug,
    derive_more::Display,
    derive_more::From,
    derive_more::Into,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
)]
#[repr(transparent)]
pub struct CSRValue(CSRRepr);

impl CSRValue {
    /// Access the underlying representation.
    pub fn repr(self) -> CSRRepr {
        self.0
    }
}

impl Bits64 for CSRValue {
    const WIDTH: usize = CSRRepr::WIDTH;

    fn from_bits(value: u64) -> Self {
        Self(value)
    }

    fn to_bits(&self) -> u64 {
        self.repr()
    }
}

type RawValue<M> = EffectCell<CSRRepr, NoEffect, M>;

/// Values of all control and state registers
pub type CSRValues<M> = CSRValuesF<RawValue<M>, MStatusValue<M>, XipCell>;

impl<M: ManagerBase> CSRValues<M> {
    /// Bind the CSR values to the given allocated regions.
    pub fn bind(space: AllocatedOf<CSRValuesLayout, M>) -> Self {
        space.map(MStatusValue::bind, XipCell::bind::<M>, EffectCell::bind)
    }

    /// Obtain a structure with references to the bound regions of this type.
    pub fn struct_ref(&self) -> AllocatedOf<CSRValuesLayout, Ref<'_, M>> {
        self.as_ref().map(
            |mstatus| mstatus.struct_ref(),
            |xip| xip.struct_ref(),
            |raw| raw.struct_ref(),
        )
    }
}

impl<M: ManagerBase> CSRegisters<M> {
    /// Perform a general read of a CSR.
    #[inline(always)]
    pub(super) fn general_raw_read(&self, csr: RootCSRegister) -> CSRRepr
    where
        M: ManagerRead,
    {
        self.registers
            .select_ref(csr, MStatusValue::read, XipCell::read, RawValue::read)
    }

    /// Perform a general write of a CSR.
    #[inline(always)]
    pub(super) fn general_raw_write(&mut self, csr: RootCSRegister, value: CSRRepr)
    where
        M: ManagerWrite,
    {
        let effect = self.registers.select_mut(
            csr,
            |mstatus| mstatus.write(value),
            |mip| mip.write(value),
            |raw| raw.write(value),
        );

        handle_csr_effect(self, effect);
    }

    /// Perform a general replace of a CSR.
    #[inline(always)]
    pub(super) fn general_raw_replace(&mut self, csr: RootCSRegister, value: CSRRepr) -> CSRRepr
    where
        M: ManagerReadWrite,
    {
        let (old_value, effect) = self.registers.select_mut(
            csr,
            |mstatus| mstatus.replace(value),
            |mip| mip.replace(value),
            |raw| raw.replace(value),
        );

        handle_csr_effect(self, effect);

        old_value
    }
}

/// Layout for the values of CSRs
pub struct CSRValuesLayout;

impl Layout for CSRValuesLayout {
    type Placed = CSRValuesF<
        PlacedOf<EffectCellLayout<CSRRepr>>,
        PlacedOf<MStatusLayout>,
        PlacedOf<XipCellLayout>,
    >;

    type Allocated<M: ManagerBase> = CSRValuesF<
        AllocatedOf<EffectCellLayout<CSRRepr>, M>,
        AllocatedOf<MStatusLayout, M>,
        AllocatedOf<XipCellLayout, M>,
    >;

    fn place_with(alloc: &mut Choreographer) -> Self::Placed {
        let alloc = std::cell::RefCell::new(alloc);
        Self::Placed::new(
            || MStatusLayout::place_with(&mut alloc.borrow_mut()),
            || XipCellLayout::place_with(&mut alloc.borrow_mut()),
            || EffectCellLayout::<CSRRepr>::place_with(&mut alloc.borrow_mut()),
        )
    }

    fn allocate<M: ManagerAlloc>(backend: &mut M, placed: Self::Placed) -> Self::Allocated<M> {
        let backend = std::cell::RefCell::new(backend);
        placed.map(
            |placed| MStatusLayout::allocate(*backend.borrow_mut(), placed),
            |placed| XipCellLayout::allocate(*backend.borrow_mut(), placed),
            |placed| EffectCellLayout::<CSRRepr>::allocate(*backend.borrow_mut(), placed),
        )
    }
}

#[derive(Default, Debug, Clone, PartialEq, Eq, serde::Serialize, serde::Deserialize)]
pub struct CSRValuesF<Raw, MStatus, MIP> {
    pub mstatus: MStatus,
    pub mnscratch: Raw,
    pub mnepc: Raw,
    pub mncause: Raw,
    pub mnstatus: Raw,
    pub cycle: Raw,
    pub time: Raw,
    pub instret: Raw,
    pub mcycle: Raw,
    pub minstret: Raw,
    pub hpmcounter3: Raw,
    pub hpmcounter4: Raw,
    pub hpmcounter5: Raw,
    pub hpmcounter6: Raw,
    pub hpmcounter7: Raw,
    pub hpmcounter8: Raw,
    pub hpmcounter9: Raw,
    pub hpmcounter10: Raw,
    pub hpmcounter11: Raw,
    pub hpmcounter12: Raw,
    pub hpmcounter13: Raw,
    pub hpmcounter14: Raw,
    pub hpmcounter15: Raw,
    pub hpmcounter16: Raw,
    pub hpmcounter17: Raw,
    pub hpmcounter18: Raw,
    pub hpmcounter19: Raw,
    pub hpmcounter20: Raw,
    pub hpmcounter21: Raw,
    pub hpmcounter22: Raw,
    pub hpmcounter23: Raw,
    pub hpmcounter24: Raw,
    pub hpmcounter25: Raw,
    pub hpmcounter26: Raw,
    pub hpmcounter27: Raw,
    pub hpmcounter28: Raw,
    pub hpmcounter29: Raw,
    pub hpmcounter30: Raw,
    pub hpmcounter31: Raw,
    pub mhpmcounter3: Raw,
    pub mhpmcounter4: Raw,
    pub mhpmcounter5: Raw,
    pub mhpmcounter6: Raw,
    pub mhpmcounter7: Raw,
    pub mhpmcounter8: Raw,
    pub mhpmcounter9: Raw,
    pub mhpmcounter10: Raw,
    pub mhpmcounter11: Raw,
    pub mhpmcounter12: Raw,
    pub mhpmcounter13: Raw,
    pub mhpmcounter14: Raw,
    pub mhpmcounter15: Raw,
    pub mhpmcounter16: Raw,
    pub mhpmcounter17: Raw,
    pub mhpmcounter18: Raw,
    pub mhpmcounter19: Raw,
    pub mhpmcounter20: Raw,
    pub mhpmcounter21: Raw,
    pub mhpmcounter22: Raw,
    pub mhpmcounter23: Raw,
    pub mhpmcounter24: Raw,
    pub mhpmcounter25: Raw,
    pub mhpmcounter26: Raw,
    pub mhpmcounter27: Raw,
    pub mhpmcounter28: Raw,
    pub mhpmcounter29: Raw,
    pub mhpmcounter30: Raw,
    pub mhpmcounter31: Raw,
    pub mhpmevent3: Raw,
    pub mhpmevent4: Raw,
    pub mhpmevent5: Raw,
    pub mhpmevent6: Raw,
    pub mhpmevent7: Raw,
    pub mhpmevent8: Raw,
    pub mhpmevent9: Raw,
    pub mhpmevent10: Raw,
    pub mhpmevent11: Raw,
    pub mhpmevent12: Raw,
    pub mhpmevent13: Raw,
    pub mhpmevent14: Raw,
    pub mhpmevent15: Raw,
    pub mhpmevent16: Raw,
    pub mhpmevent17: Raw,
    pub mhpmevent18: Raw,
    pub mhpmevent19: Raw,
    pub mhpmevent20: Raw,
    pub mhpmevent21: Raw,
    pub mhpmevent22: Raw,
    pub mhpmevent23: Raw,
    pub mhpmevent24: Raw,
    pub mhpmevent25: Raw,
    pub mhpmevent26: Raw,
    pub mhpmevent27: Raw,
    pub mhpmevent28: Raw,
    pub mhpmevent29: Raw,
    pub mhpmevent30: Raw,
    pub mhpmevent31: Raw,
    pub mcountinhibit: Raw,
    pub scounteren: Raw,
    pub mcounteren: Raw,
    pub fcsr: Raw,
    pub pmpcfg0: Raw,
    pub pmpcfg2: Raw,
    pub pmpcfg4: Raw,
    pub pmpcfg6: Raw,
    pub pmpcfg8: Raw,
    pub pmpcfg10: Raw,
    pub pmpcfg12: Raw,
    pub pmpcfg14: Raw,
    pub pmpaddr0: Raw,
    pub pmpaddr1: Raw,
    pub pmpaddr2: Raw,
    pub pmpaddr3: Raw,
    pub pmpaddr4: Raw,
    pub pmpaddr5: Raw,
    pub pmpaddr6: Raw,
    pub pmpaddr7: Raw,
    pub pmpaddr8: Raw,
    pub pmpaddr9: Raw,
    pub pmpaddr10: Raw,
    pub pmpaddr11: Raw,
    pub pmpaddr12: Raw,
    pub pmpaddr13: Raw,
    pub pmpaddr14: Raw,
    pub pmpaddr15: Raw,
    pub pmpaddr16: Raw,
    pub pmpaddr17: Raw,
    pub pmpaddr18: Raw,
    pub pmpaddr19: Raw,
    pub pmpaddr20: Raw,
    pub pmpaddr21: Raw,
    pub pmpaddr22: Raw,
    pub pmpaddr23: Raw,
    pub pmpaddr24: Raw,
    pub pmpaddr25: Raw,
    pub pmpaddr26: Raw,
    pub pmpaddr27: Raw,
    pub pmpaddr28: Raw,
    pub pmpaddr29: Raw,
    pub pmpaddr30: Raw,
    pub pmpaddr31: Raw,
    pub pmpaddr32: Raw,
    pub pmpaddr33: Raw,
    pub pmpaddr34: Raw,
    pub pmpaddr35: Raw,
    pub pmpaddr36: Raw,
    pub pmpaddr37: Raw,
    pub pmpaddr38: Raw,
    pub pmpaddr39: Raw,
    pub pmpaddr40: Raw,
    pub pmpaddr41: Raw,
    pub pmpaddr42: Raw,
    pub pmpaddr43: Raw,
    pub pmpaddr44: Raw,
    pub pmpaddr45: Raw,
    pub pmpaddr46: Raw,
    pub pmpaddr47: Raw,
    pub pmpaddr48: Raw,
    pub pmpaddr49: Raw,
    pub pmpaddr50: Raw,
    pub pmpaddr51: Raw,
    pub pmpaddr52: Raw,
    pub pmpaddr53: Raw,
    pub pmpaddr54: Raw,
    pub pmpaddr55: Raw,
    pub pmpaddr56: Raw,
    pub pmpaddr57: Raw,
    pub pmpaddr58: Raw,
    pub pmpaddr59: Raw,
    pub pmpaddr60: Raw,
    pub pmpaddr61: Raw,
    pub pmpaddr62: Raw,
    pub pmpaddr63: Raw,
    pub mhartid: Raw,
    pub mvendorid: Raw,
    pub marchid: Raw,
    pub mimpid: Raw,
    pub misa: Raw,
    pub mscratch: Raw,
    pub sscratch: Raw,
    pub stvec: Raw,
    pub mtvec: Raw,
    pub mie: Raw,
    pub satp: Raw,
    pub scause: Raw,
    pub mcause: Raw,
    pub sepc: Raw,
    pub mepc: Raw,
    pub stval: Raw,
    pub mtval: Raw,
    pub mtval2: Raw,
    pub mip: MIP,
    pub mtinst: Raw,
    pub senvcfg: Raw,
    pub menvcfg: Raw,
    pub mconfigptr: Raw,
    pub medeleg: Raw,
    pub mideleg: Raw,
    pub mseccfg: Raw,
    pub scontext: Raw,
    pub hstatus: Raw,
    pub hedeleg: Raw,
    pub hideleg: Raw,
    pub hie: Raw,
    pub hcounteren: Raw,
    pub hgeie: Raw,
    pub htval: Raw,
    pub hip: Raw,
    pub hvip: Raw,
    pub htinst: Raw,
    pub hgeip: Raw,
    pub henvcfg: Raw,
    pub hgatp: Raw,
    pub hcontext: Raw,
    pub htimedelta: Raw,
    pub vsstatus: Raw,
    pub vsie: Raw,
    pub vstvec: Raw,
    pub vsscratch: Raw,
    pub vsepc: Raw,
    pub vscause: Raw,
    pub vstval: Raw,
    pub vsip: Raw,
    pub vsatp: Raw,
    pub tselect: Raw,
    pub tdata1: Raw,
    pub tdata2: Raw,
    pub tdata3: Raw,
    pub tcontrol: Raw,
    pub mcontext: Raw,
    pub dcsr: Raw,
    pub dpc: Raw,
    pub dscratch0: Raw,
    pub dscratch1: Raw,
}

impl<Raw, MStatus, MIP> CSRValuesF<Raw, MStatus, MIP> {
    /// Create a new CSR values structure. The given functions are used to initialise each CSR
    /// value.
    #[inline]
    fn new(
        make_mstatus: impl FnOnce() -> MStatus,
        make_mip: impl FnOnce() -> MIP,
        mut make_raw: impl FnMut() -> Raw,
    ) -> Self {
        CSRValuesF::<(), (), ()>::default().map(|_| make_mstatus(), |_| make_mip(), |_| make_raw())
    }

    /// Transform each field representing a CSR value into a different type.
    #[inline]
    fn map<Raw2, MStatus2, MIP2>(
        self,
        map_mstatus: impl FnOnce(MStatus) -> MStatus2,
        map_mip: impl FnOnce(MIP) -> MIP2,
        mut map_raw: impl FnMut(Raw) -> Raw2,
    ) -> CSRValuesF<Raw2, MStatus2, MIP2> {
        CSRValuesF {
            mstatus: map_mstatus(self.mstatus),
            mnscratch: map_raw(self.mnscratch),
            mnepc: map_raw(self.mnepc),
            mncause: map_raw(self.mncause),
            mnstatus: map_raw(self.mnstatus),
            cycle: map_raw(self.cycle),
            time: map_raw(self.time),
            instret: map_raw(self.instret),
            mcycle: map_raw(self.mcycle),
            minstret: map_raw(self.minstret),
            hpmcounter3: map_raw(self.hpmcounter3),
            hpmcounter4: map_raw(self.hpmcounter4),
            hpmcounter5: map_raw(self.hpmcounter5),
            hpmcounter6: map_raw(self.hpmcounter6),
            hpmcounter7: map_raw(self.hpmcounter7),
            hpmcounter8: map_raw(self.hpmcounter8),
            hpmcounter9: map_raw(self.hpmcounter9),
            hpmcounter10: map_raw(self.hpmcounter10),
            hpmcounter11: map_raw(self.hpmcounter11),
            hpmcounter12: map_raw(self.hpmcounter12),
            hpmcounter13: map_raw(self.hpmcounter13),
            hpmcounter14: map_raw(self.hpmcounter14),
            hpmcounter15: map_raw(self.hpmcounter15),
            hpmcounter16: map_raw(self.hpmcounter16),
            hpmcounter17: map_raw(self.hpmcounter17),
            hpmcounter18: map_raw(self.hpmcounter18),
            hpmcounter19: map_raw(self.hpmcounter19),
            hpmcounter20: map_raw(self.hpmcounter20),
            hpmcounter21: map_raw(self.hpmcounter21),
            hpmcounter22: map_raw(self.hpmcounter22),
            hpmcounter23: map_raw(self.hpmcounter23),
            hpmcounter24: map_raw(self.hpmcounter24),
            hpmcounter25: map_raw(self.hpmcounter25),
            hpmcounter26: map_raw(self.hpmcounter26),
            hpmcounter27: map_raw(self.hpmcounter27),
            hpmcounter28: map_raw(self.hpmcounter28),
            hpmcounter29: map_raw(self.hpmcounter29),
            hpmcounter30: map_raw(self.hpmcounter30),
            hpmcounter31: map_raw(self.hpmcounter31),
            mhpmcounter3: map_raw(self.mhpmcounter3),
            mhpmcounter4: map_raw(self.mhpmcounter4),
            mhpmcounter5: map_raw(self.mhpmcounter5),
            mhpmcounter6: map_raw(self.mhpmcounter6),
            mhpmcounter7: map_raw(self.mhpmcounter7),
            mhpmcounter8: map_raw(self.mhpmcounter8),
            mhpmcounter9: map_raw(self.mhpmcounter9),
            mhpmcounter10: map_raw(self.mhpmcounter10),
            mhpmcounter11: map_raw(self.mhpmcounter11),
            mhpmcounter12: map_raw(self.mhpmcounter12),
            mhpmcounter13: map_raw(self.mhpmcounter13),
            mhpmcounter14: map_raw(self.mhpmcounter14),
            mhpmcounter15: map_raw(self.mhpmcounter15),
            mhpmcounter16: map_raw(self.mhpmcounter16),
            mhpmcounter17: map_raw(self.mhpmcounter17),
            mhpmcounter18: map_raw(self.mhpmcounter18),
            mhpmcounter19: map_raw(self.mhpmcounter19),
            mhpmcounter20: map_raw(self.mhpmcounter20),
            mhpmcounter21: map_raw(self.mhpmcounter21),
            mhpmcounter22: map_raw(self.mhpmcounter22),
            mhpmcounter23: map_raw(self.mhpmcounter23),
            mhpmcounter24: map_raw(self.mhpmcounter24),
            mhpmcounter25: map_raw(self.mhpmcounter25),
            mhpmcounter26: map_raw(self.mhpmcounter26),
            mhpmcounter27: map_raw(self.mhpmcounter27),
            mhpmcounter28: map_raw(self.mhpmcounter28),
            mhpmcounter29: map_raw(self.mhpmcounter29),
            mhpmcounter30: map_raw(self.mhpmcounter30),
            mhpmcounter31: map_raw(self.mhpmcounter31),
            mhpmevent3: map_raw(self.mhpmevent3),
            mhpmevent4: map_raw(self.mhpmevent4),
            mhpmevent5: map_raw(self.mhpmevent5),
            mhpmevent6: map_raw(self.mhpmevent6),
            mhpmevent7: map_raw(self.mhpmevent7),
            mhpmevent8: map_raw(self.mhpmevent8),
            mhpmevent9: map_raw(self.mhpmevent9),
            mhpmevent10: map_raw(self.mhpmevent10),
            mhpmevent11: map_raw(self.mhpmevent11),
            mhpmevent12: map_raw(self.mhpmevent12),
            mhpmevent13: map_raw(self.mhpmevent13),
            mhpmevent14: map_raw(self.mhpmevent14),
            mhpmevent15: map_raw(self.mhpmevent15),
            mhpmevent16: map_raw(self.mhpmevent16),
            mhpmevent17: map_raw(self.mhpmevent17),
            mhpmevent18: map_raw(self.mhpmevent18),
            mhpmevent19: map_raw(self.mhpmevent19),
            mhpmevent20: map_raw(self.mhpmevent20),
            mhpmevent21: map_raw(self.mhpmevent21),
            mhpmevent22: map_raw(self.mhpmevent22),
            mhpmevent23: map_raw(self.mhpmevent23),
            mhpmevent24: map_raw(self.mhpmevent24),
            mhpmevent25: map_raw(self.mhpmevent25),
            mhpmevent26: map_raw(self.mhpmevent26),
            mhpmevent27: map_raw(self.mhpmevent27),
            mhpmevent28: map_raw(self.mhpmevent28),
            mhpmevent29: map_raw(self.mhpmevent29),
            mhpmevent30: map_raw(self.mhpmevent30),
            mhpmevent31: map_raw(self.mhpmevent31),
            mcountinhibit: map_raw(self.mcountinhibit),
            scounteren: map_raw(self.scounteren),
            mcounteren: map_raw(self.mcounteren),
            fcsr: map_raw(self.fcsr),
            pmpcfg0: map_raw(self.pmpcfg0),
            pmpcfg2: map_raw(self.pmpcfg2),
            pmpcfg4: map_raw(self.pmpcfg4),
            pmpcfg6: map_raw(self.pmpcfg6),
            pmpcfg8: map_raw(self.pmpcfg8),
            pmpcfg10: map_raw(self.pmpcfg10),
            pmpcfg12: map_raw(self.pmpcfg12),
            pmpcfg14: map_raw(self.pmpcfg14),
            pmpaddr0: map_raw(self.pmpaddr0),
            pmpaddr1: map_raw(self.pmpaddr1),
            pmpaddr2: map_raw(self.pmpaddr2),
            pmpaddr3: map_raw(self.pmpaddr3),
            pmpaddr4: map_raw(self.pmpaddr4),
            pmpaddr5: map_raw(self.pmpaddr5),
            pmpaddr6: map_raw(self.pmpaddr6),
            pmpaddr7: map_raw(self.pmpaddr7),
            pmpaddr8: map_raw(self.pmpaddr8),
            pmpaddr9: map_raw(self.pmpaddr9),
            pmpaddr10: map_raw(self.pmpaddr10),
            pmpaddr11: map_raw(self.pmpaddr11),
            pmpaddr12: map_raw(self.pmpaddr12),
            pmpaddr13: map_raw(self.pmpaddr13),
            pmpaddr14: map_raw(self.pmpaddr14),
            pmpaddr15: map_raw(self.pmpaddr15),
            pmpaddr16: map_raw(self.pmpaddr16),
            pmpaddr17: map_raw(self.pmpaddr17),
            pmpaddr18: map_raw(self.pmpaddr18),
            pmpaddr19: map_raw(self.pmpaddr19),
            pmpaddr20: map_raw(self.pmpaddr20),
            pmpaddr21: map_raw(self.pmpaddr21),
            pmpaddr22: map_raw(self.pmpaddr22),
            pmpaddr23: map_raw(self.pmpaddr23),
            pmpaddr24: map_raw(self.pmpaddr24),
            pmpaddr25: map_raw(self.pmpaddr25),
            pmpaddr26: map_raw(self.pmpaddr26),
            pmpaddr27: map_raw(self.pmpaddr27),
            pmpaddr28: map_raw(self.pmpaddr28),
            pmpaddr29: map_raw(self.pmpaddr29),
            pmpaddr30: map_raw(self.pmpaddr30),
            pmpaddr31: map_raw(self.pmpaddr31),
            pmpaddr32: map_raw(self.pmpaddr32),
            pmpaddr33: map_raw(self.pmpaddr33),
            pmpaddr34: map_raw(self.pmpaddr34),
            pmpaddr35: map_raw(self.pmpaddr35),
            pmpaddr36: map_raw(self.pmpaddr36),
            pmpaddr37: map_raw(self.pmpaddr37),
            pmpaddr38: map_raw(self.pmpaddr38),
            pmpaddr39: map_raw(self.pmpaddr39),
            pmpaddr40: map_raw(self.pmpaddr40),
            pmpaddr41: map_raw(self.pmpaddr41),
            pmpaddr42: map_raw(self.pmpaddr42),
            pmpaddr43: map_raw(self.pmpaddr43),
            pmpaddr44: map_raw(self.pmpaddr44),
            pmpaddr45: map_raw(self.pmpaddr45),
            pmpaddr46: map_raw(self.pmpaddr46),
            pmpaddr47: map_raw(self.pmpaddr47),
            pmpaddr48: map_raw(self.pmpaddr48),
            pmpaddr49: map_raw(self.pmpaddr49),
            pmpaddr50: map_raw(self.pmpaddr50),
            pmpaddr51: map_raw(self.pmpaddr51),
            pmpaddr52: map_raw(self.pmpaddr52),
            pmpaddr53: map_raw(self.pmpaddr53),
            pmpaddr54: map_raw(self.pmpaddr54),
            pmpaddr55: map_raw(self.pmpaddr55),
            pmpaddr56: map_raw(self.pmpaddr56),
            pmpaddr57: map_raw(self.pmpaddr57),
            pmpaddr58: map_raw(self.pmpaddr58),
            pmpaddr59: map_raw(self.pmpaddr59),
            pmpaddr60: map_raw(self.pmpaddr60),
            pmpaddr61: map_raw(self.pmpaddr61),
            pmpaddr62: map_raw(self.pmpaddr62),
            pmpaddr63: map_raw(self.pmpaddr63),
            mhartid: map_raw(self.mhartid),
            mvendorid: map_raw(self.mvendorid),
            marchid: map_raw(self.marchid),
            mimpid: map_raw(self.mimpid),
            misa: map_raw(self.misa),
            mscratch: map_raw(self.mscratch),
            sscratch: map_raw(self.sscratch),
            stvec: map_raw(self.stvec),
            mtvec: map_raw(self.mtvec),
            mie: map_raw(self.mie),
            satp: map_raw(self.satp),
            scause: map_raw(self.scause),
            mcause: map_raw(self.mcause),
            sepc: map_raw(self.sepc),
            mepc: map_raw(self.mepc),
            stval: map_raw(self.stval),
            mtval: map_raw(self.mtval),
            mtval2: map_raw(self.mtval2),
            mip: map_mip(self.mip),
            mtinst: map_raw(self.mtinst),
            senvcfg: map_raw(self.senvcfg),
            menvcfg: map_raw(self.menvcfg),
            mconfigptr: map_raw(self.mconfigptr),
            medeleg: map_raw(self.medeleg),
            mideleg: map_raw(self.mideleg),
            mseccfg: map_raw(self.mseccfg),
            scontext: map_raw(self.scontext),
            hstatus: map_raw(self.hstatus),
            hedeleg: map_raw(self.hedeleg),
            hideleg: map_raw(self.hideleg),
            hie: map_raw(self.hie),
            hcounteren: map_raw(self.hcounteren),
            hgeie: map_raw(self.hgeie),
            htval: map_raw(self.htval),
            hip: map_raw(self.hip),
            hvip: map_raw(self.hvip),
            htinst: map_raw(self.htinst),
            hgeip: map_raw(self.hgeip),
            henvcfg: map_raw(self.henvcfg),
            hgatp: map_raw(self.hgatp),
            hcontext: map_raw(self.hcontext),
            htimedelta: map_raw(self.htimedelta),
            vsstatus: map_raw(self.vsstatus),
            vsie: map_raw(self.vsie),
            vstvec: map_raw(self.vstvec),
            vsscratch: map_raw(self.vsscratch),
            vsepc: map_raw(self.vsepc),
            vscause: map_raw(self.vscause),
            vstval: map_raw(self.vstval),
            vsip: map_raw(self.vsip),
            vsatp: map_raw(self.vsatp),
            tselect: map_raw(self.tselect),
            tdata1: map_raw(self.tdata1),
            tdata2: map_raw(self.tdata2),
            tdata3: map_raw(self.tdata3),
            tcontrol: map_raw(self.tcontrol),
            mcontext: map_raw(self.mcontext),
            dcsr: map_raw(self.dcsr),
            dpc: map_raw(self.dpc),
            dscratch0: map_raw(self.dscratch0),
            dscratch1: map_raw(self.dscratch1),
        }
    }

    /// Create a referencing structure of the CSR values.
    #[inline]
    fn as_ref(&self) -> CSRValuesF<&Raw, &MStatus, &MIP> {
        CSRValuesF {
            mstatus: &self.mstatus,
            mnscratch: &self.mnscratch,
            mnepc: &self.mnepc,
            mncause: &self.mncause,
            mnstatus: &self.mnstatus,
            cycle: &self.cycle,
            time: &self.time,
            instret: &self.instret,
            mcycle: &self.mcycle,
            minstret: &self.minstret,
            hpmcounter3: &self.hpmcounter3,
            hpmcounter4: &self.hpmcounter4,
            hpmcounter5: &self.hpmcounter5,
            hpmcounter6: &self.hpmcounter6,
            hpmcounter7: &self.hpmcounter7,
            hpmcounter8: &self.hpmcounter8,
            hpmcounter9: &self.hpmcounter9,
            hpmcounter10: &self.hpmcounter10,
            hpmcounter11: &self.hpmcounter11,
            hpmcounter12: &self.hpmcounter12,
            hpmcounter13: &self.hpmcounter13,
            hpmcounter14: &self.hpmcounter14,
            hpmcounter15: &self.hpmcounter15,
            hpmcounter16: &self.hpmcounter16,
            hpmcounter17: &self.hpmcounter17,
            hpmcounter18: &self.hpmcounter18,
            hpmcounter19: &self.hpmcounter19,
            hpmcounter20: &self.hpmcounter20,
            hpmcounter21: &self.hpmcounter21,
            hpmcounter22: &self.hpmcounter22,
            hpmcounter23: &self.hpmcounter23,
            hpmcounter24: &self.hpmcounter24,
            hpmcounter25: &self.hpmcounter25,
            hpmcounter26: &self.hpmcounter26,
            hpmcounter27: &self.hpmcounter27,
            hpmcounter28: &self.hpmcounter28,
            hpmcounter29: &self.hpmcounter29,
            hpmcounter30: &self.hpmcounter30,
            hpmcounter31: &self.hpmcounter31,
            mhpmcounter3: &self.mhpmcounter3,
            mhpmcounter4: &self.mhpmcounter4,
            mhpmcounter5: &self.mhpmcounter5,
            mhpmcounter6: &self.mhpmcounter6,
            mhpmcounter7: &self.mhpmcounter7,
            mhpmcounter8: &self.mhpmcounter8,
            mhpmcounter9: &self.mhpmcounter9,
            mhpmcounter10: &self.mhpmcounter10,
            mhpmcounter11: &self.mhpmcounter11,
            mhpmcounter12: &self.mhpmcounter12,
            mhpmcounter13: &self.mhpmcounter13,
            mhpmcounter14: &self.mhpmcounter14,
            mhpmcounter15: &self.mhpmcounter15,
            mhpmcounter16: &self.mhpmcounter16,
            mhpmcounter17: &self.mhpmcounter17,
            mhpmcounter18: &self.mhpmcounter18,
            mhpmcounter19: &self.mhpmcounter19,
            mhpmcounter20: &self.mhpmcounter20,
            mhpmcounter21: &self.mhpmcounter21,
            mhpmcounter22: &self.mhpmcounter22,
            mhpmcounter23: &self.mhpmcounter23,
            mhpmcounter24: &self.mhpmcounter24,
            mhpmcounter25: &self.mhpmcounter25,
            mhpmcounter26: &self.mhpmcounter26,
            mhpmcounter27: &self.mhpmcounter27,
            mhpmcounter28: &self.mhpmcounter28,
            mhpmcounter29: &self.mhpmcounter29,
            mhpmcounter30: &self.mhpmcounter30,
            mhpmcounter31: &self.mhpmcounter31,
            mhpmevent3: &self.mhpmevent3,
            mhpmevent4: &self.mhpmevent4,
            mhpmevent5: &self.mhpmevent5,
            mhpmevent6: &self.mhpmevent6,
            mhpmevent7: &self.mhpmevent7,
            mhpmevent8: &self.mhpmevent8,
            mhpmevent9: &self.mhpmevent9,
            mhpmevent10: &self.mhpmevent10,
            mhpmevent11: &self.mhpmevent11,
            mhpmevent12: &self.mhpmevent12,
            mhpmevent13: &self.mhpmevent13,
            mhpmevent14: &self.mhpmevent14,
            mhpmevent15: &self.mhpmevent15,
            mhpmevent16: &self.mhpmevent16,
            mhpmevent17: &self.mhpmevent17,
            mhpmevent18: &self.mhpmevent18,
            mhpmevent19: &self.mhpmevent19,
            mhpmevent20: &self.mhpmevent20,
            mhpmevent21: &self.mhpmevent21,
            mhpmevent22: &self.mhpmevent22,
            mhpmevent23: &self.mhpmevent23,
            mhpmevent24: &self.mhpmevent24,
            mhpmevent25: &self.mhpmevent25,
            mhpmevent26: &self.mhpmevent26,
            mhpmevent27: &self.mhpmevent27,
            mhpmevent28: &self.mhpmevent28,
            mhpmevent29: &self.mhpmevent29,
            mhpmevent30: &self.mhpmevent30,
            mhpmevent31: &self.mhpmevent31,
            mcountinhibit: &self.mcountinhibit,
            scounteren: &self.scounteren,
            mcounteren: &self.mcounteren,
            fcsr: &self.fcsr,
            pmpcfg0: &self.pmpcfg0,
            pmpcfg2: &self.pmpcfg2,
            pmpcfg4: &self.pmpcfg4,
            pmpcfg6: &self.pmpcfg6,
            pmpcfg8: &self.pmpcfg8,
            pmpcfg10: &self.pmpcfg10,
            pmpcfg12: &self.pmpcfg12,
            pmpcfg14: &self.pmpcfg14,
            pmpaddr0: &self.pmpaddr0,
            pmpaddr1: &self.pmpaddr1,
            pmpaddr2: &self.pmpaddr2,
            pmpaddr3: &self.pmpaddr3,
            pmpaddr4: &self.pmpaddr4,
            pmpaddr5: &self.pmpaddr5,
            pmpaddr6: &self.pmpaddr6,
            pmpaddr7: &self.pmpaddr7,
            pmpaddr8: &self.pmpaddr8,
            pmpaddr9: &self.pmpaddr9,
            pmpaddr10: &self.pmpaddr10,
            pmpaddr11: &self.pmpaddr11,
            pmpaddr12: &self.pmpaddr12,
            pmpaddr13: &self.pmpaddr13,
            pmpaddr14: &self.pmpaddr14,
            pmpaddr15: &self.pmpaddr15,
            pmpaddr16: &self.pmpaddr16,
            pmpaddr17: &self.pmpaddr17,
            pmpaddr18: &self.pmpaddr18,
            pmpaddr19: &self.pmpaddr19,
            pmpaddr20: &self.pmpaddr20,
            pmpaddr21: &self.pmpaddr21,
            pmpaddr22: &self.pmpaddr22,
            pmpaddr23: &self.pmpaddr23,
            pmpaddr24: &self.pmpaddr24,
            pmpaddr25: &self.pmpaddr25,
            pmpaddr26: &self.pmpaddr26,
            pmpaddr27: &self.pmpaddr27,
            pmpaddr28: &self.pmpaddr28,
            pmpaddr29: &self.pmpaddr29,
            pmpaddr30: &self.pmpaddr30,
            pmpaddr31: &self.pmpaddr31,
            pmpaddr32: &self.pmpaddr32,
            pmpaddr33: &self.pmpaddr33,
            pmpaddr34: &self.pmpaddr34,
            pmpaddr35: &self.pmpaddr35,
            pmpaddr36: &self.pmpaddr36,
            pmpaddr37: &self.pmpaddr37,
            pmpaddr38: &self.pmpaddr38,
            pmpaddr39: &self.pmpaddr39,
            pmpaddr40: &self.pmpaddr40,
            pmpaddr41: &self.pmpaddr41,
            pmpaddr42: &self.pmpaddr42,
            pmpaddr43: &self.pmpaddr43,
            pmpaddr44: &self.pmpaddr44,
            pmpaddr45: &self.pmpaddr45,
            pmpaddr46: &self.pmpaddr46,
            pmpaddr47: &self.pmpaddr47,
            pmpaddr48: &self.pmpaddr48,
            pmpaddr49: &self.pmpaddr49,
            pmpaddr50: &self.pmpaddr50,
            pmpaddr51: &self.pmpaddr51,
            pmpaddr52: &self.pmpaddr52,
            pmpaddr53: &self.pmpaddr53,
            pmpaddr54: &self.pmpaddr54,
            pmpaddr55: &self.pmpaddr55,
            pmpaddr56: &self.pmpaddr56,
            pmpaddr57: &self.pmpaddr57,
            pmpaddr58: &self.pmpaddr58,
            pmpaddr59: &self.pmpaddr59,
            pmpaddr60: &self.pmpaddr60,
            pmpaddr61: &self.pmpaddr61,
            pmpaddr62: &self.pmpaddr62,
            pmpaddr63: &self.pmpaddr63,
            mhartid: &self.mhartid,
            mvendorid: &self.mvendorid,
            marchid: &self.marchid,
            mimpid: &self.mimpid,
            misa: &self.misa,
            mscratch: &self.mscratch,
            sscratch: &self.sscratch,
            stvec: &self.stvec,
            mtvec: &self.mtvec,
            mie: &self.mie,
            satp: &self.satp,
            scause: &self.scause,
            mcause: &self.mcause,
            sepc: &self.sepc,
            mepc: &self.mepc,
            stval: &self.stval,
            mtval: &self.mtval,
            mtval2: &self.mtval2,
            mip: &self.mip,
            mtinst: &self.mtinst,
            senvcfg: &self.senvcfg,
            menvcfg: &self.menvcfg,
            mconfigptr: &self.mconfigptr,
            medeleg: &self.medeleg,
            mideleg: &self.mideleg,
            mseccfg: &self.mseccfg,
            scontext: &self.scontext,
            hstatus: &self.hstatus,
            hedeleg: &self.hedeleg,
            hideleg: &self.hideleg,
            hie: &self.hie,
            hcounteren: &self.hcounteren,
            hgeie: &self.hgeie,
            htval: &self.htval,
            hip: &self.hip,
            hvip: &self.hvip,
            htinst: &self.htinst,
            hgeip: &self.hgeip,
            henvcfg: &self.henvcfg,
            hgatp: &self.hgatp,
            hcontext: &self.hcontext,
            htimedelta: &self.htimedelta,
            vsstatus: &self.vsstatus,
            vsie: &self.vsie,
            vstvec: &self.vstvec,
            vsscratch: &self.vsscratch,
            vsepc: &self.vsepc,
            vscause: &self.vscause,
            vstval: &self.vstval,
            vsip: &self.vsip,
            vsatp: &self.vsatp,
            tselect: &self.tselect,
            tdata1: &self.tdata1,
            tdata2: &self.tdata2,
            tdata3: &self.tdata3,
            tcontrol: &self.tcontrol,
            mcontext: &self.mcontext,
            dcsr: &self.dcsr,
            dpc: &self.dpc,
            dscratch0: &self.dscratch0,
            dscratch1: &self.dscratch1,
        }
    }

    /// Select a field representing a CSR value and apply a function to it, returing its result.
    #[inline(always)]
    fn select_ref<R>(
        &self,
        csr: RootCSRegister,
        fold_mstatus: impl FnOnce(&MStatus) -> R,
        fold_mip: impl FnOnce(&MIP) -> R,
        fold_raw: impl FnOnce(&Raw) -> R,
    ) -> R {
        match csr {
            RootCSRegister::mstatus => fold_mstatus(&self.mstatus),
            RootCSRegister::mip => fold_mip(&self.mip),
            RootCSRegister::mnscratch => fold_raw(&self.mnscratch),
            RootCSRegister::mnepc => fold_raw(&self.mnepc),
            RootCSRegister::mncause => fold_raw(&self.mncause),
            RootCSRegister::mnstatus => fold_raw(&self.mnstatus),
            RootCSRegister::cycle => fold_raw(&self.cycle),
            RootCSRegister::time => fold_raw(&self.time),
            RootCSRegister::instret => fold_raw(&self.instret),
            RootCSRegister::mcycle => fold_raw(&self.mcycle),
            RootCSRegister::minstret => fold_raw(&self.minstret),
            RootCSRegister::hpmcounter3 => fold_raw(&self.hpmcounter3),
            RootCSRegister::hpmcounter4 => fold_raw(&self.hpmcounter4),
            RootCSRegister::hpmcounter5 => fold_raw(&self.hpmcounter5),
            RootCSRegister::hpmcounter6 => fold_raw(&self.hpmcounter6),
            RootCSRegister::hpmcounter7 => fold_raw(&self.hpmcounter7),
            RootCSRegister::hpmcounter8 => fold_raw(&self.hpmcounter8),
            RootCSRegister::hpmcounter9 => fold_raw(&self.hpmcounter9),
            RootCSRegister::hpmcounter10 => fold_raw(&self.hpmcounter10),
            RootCSRegister::hpmcounter11 => fold_raw(&self.hpmcounter11),
            RootCSRegister::hpmcounter12 => fold_raw(&self.hpmcounter12),
            RootCSRegister::hpmcounter13 => fold_raw(&self.hpmcounter13),
            RootCSRegister::hpmcounter14 => fold_raw(&self.hpmcounter14),
            RootCSRegister::hpmcounter15 => fold_raw(&self.hpmcounter15),
            RootCSRegister::hpmcounter16 => fold_raw(&self.hpmcounter16),
            RootCSRegister::hpmcounter17 => fold_raw(&self.hpmcounter17),
            RootCSRegister::hpmcounter18 => fold_raw(&self.hpmcounter18),
            RootCSRegister::hpmcounter19 => fold_raw(&self.hpmcounter19),
            RootCSRegister::hpmcounter20 => fold_raw(&self.hpmcounter20),
            RootCSRegister::hpmcounter21 => fold_raw(&self.hpmcounter21),
            RootCSRegister::hpmcounter22 => fold_raw(&self.hpmcounter22),
            RootCSRegister::hpmcounter23 => fold_raw(&self.hpmcounter23),
            RootCSRegister::hpmcounter24 => fold_raw(&self.hpmcounter24),
            RootCSRegister::hpmcounter25 => fold_raw(&self.hpmcounter25),
            RootCSRegister::hpmcounter26 => fold_raw(&self.hpmcounter26),
            RootCSRegister::hpmcounter27 => fold_raw(&self.hpmcounter27),
            RootCSRegister::hpmcounter28 => fold_raw(&self.hpmcounter28),
            RootCSRegister::hpmcounter29 => fold_raw(&self.hpmcounter29),
            RootCSRegister::hpmcounter30 => fold_raw(&self.hpmcounter30),
            RootCSRegister::hpmcounter31 => fold_raw(&self.hpmcounter31),
            RootCSRegister::mhpmcounter3 => fold_raw(&self.mhpmcounter3),
            RootCSRegister::mhpmcounter4 => fold_raw(&self.mhpmcounter4),
            RootCSRegister::mhpmcounter5 => fold_raw(&self.mhpmcounter5),
            RootCSRegister::mhpmcounter6 => fold_raw(&self.mhpmcounter6),
            RootCSRegister::mhpmcounter7 => fold_raw(&self.mhpmcounter7),
            RootCSRegister::mhpmcounter8 => fold_raw(&self.mhpmcounter8),
            RootCSRegister::mhpmcounter9 => fold_raw(&self.mhpmcounter9),
            RootCSRegister::mhpmcounter10 => fold_raw(&self.mhpmcounter10),
            RootCSRegister::mhpmcounter11 => fold_raw(&self.mhpmcounter11),
            RootCSRegister::mhpmcounter12 => fold_raw(&self.mhpmcounter12),
            RootCSRegister::mhpmcounter13 => fold_raw(&self.mhpmcounter13),
            RootCSRegister::mhpmcounter14 => fold_raw(&self.mhpmcounter14),
            RootCSRegister::mhpmcounter15 => fold_raw(&self.mhpmcounter15),
            RootCSRegister::mhpmcounter16 => fold_raw(&self.mhpmcounter16),
            RootCSRegister::mhpmcounter17 => fold_raw(&self.mhpmcounter17),
            RootCSRegister::mhpmcounter18 => fold_raw(&self.mhpmcounter18),
            RootCSRegister::mhpmcounter19 => fold_raw(&self.mhpmcounter19),
            RootCSRegister::mhpmcounter20 => fold_raw(&self.mhpmcounter20),
            RootCSRegister::mhpmcounter21 => fold_raw(&self.mhpmcounter21),
            RootCSRegister::mhpmcounter22 => fold_raw(&self.mhpmcounter22),
            RootCSRegister::mhpmcounter23 => fold_raw(&self.mhpmcounter23),
            RootCSRegister::mhpmcounter24 => fold_raw(&self.mhpmcounter24),
            RootCSRegister::mhpmcounter25 => fold_raw(&self.mhpmcounter25),
            RootCSRegister::mhpmcounter26 => fold_raw(&self.mhpmcounter26),
            RootCSRegister::mhpmcounter27 => fold_raw(&self.mhpmcounter27),
            RootCSRegister::mhpmcounter28 => fold_raw(&self.mhpmcounter28),
            RootCSRegister::mhpmcounter29 => fold_raw(&self.mhpmcounter29),
            RootCSRegister::mhpmcounter30 => fold_raw(&self.mhpmcounter30),
            RootCSRegister::mhpmcounter31 => fold_raw(&self.mhpmcounter31),
            RootCSRegister::mhpmevent3 => fold_raw(&self.mhpmevent3),
            RootCSRegister::mhpmevent4 => fold_raw(&self.mhpmevent4),
            RootCSRegister::mhpmevent5 => fold_raw(&self.mhpmevent5),
            RootCSRegister::mhpmevent6 => fold_raw(&self.mhpmevent6),
            RootCSRegister::mhpmevent7 => fold_raw(&self.mhpmevent7),
            RootCSRegister::mhpmevent8 => fold_raw(&self.mhpmevent8),
            RootCSRegister::mhpmevent9 => fold_raw(&self.mhpmevent9),
            RootCSRegister::mhpmevent10 => fold_raw(&self.mhpmevent10),
            RootCSRegister::mhpmevent11 => fold_raw(&self.mhpmevent11),
            RootCSRegister::mhpmevent12 => fold_raw(&self.mhpmevent12),
            RootCSRegister::mhpmevent13 => fold_raw(&self.mhpmevent13),
            RootCSRegister::mhpmevent14 => fold_raw(&self.mhpmevent14),
            RootCSRegister::mhpmevent15 => fold_raw(&self.mhpmevent15),
            RootCSRegister::mhpmevent16 => fold_raw(&self.mhpmevent16),
            RootCSRegister::mhpmevent17 => fold_raw(&self.mhpmevent17),
            RootCSRegister::mhpmevent18 => fold_raw(&self.mhpmevent18),
            RootCSRegister::mhpmevent19 => fold_raw(&self.mhpmevent19),
            RootCSRegister::mhpmevent20 => fold_raw(&self.mhpmevent20),
            RootCSRegister::mhpmevent21 => fold_raw(&self.mhpmevent21),
            RootCSRegister::mhpmevent22 => fold_raw(&self.mhpmevent22),
            RootCSRegister::mhpmevent23 => fold_raw(&self.mhpmevent23),
            RootCSRegister::mhpmevent24 => fold_raw(&self.mhpmevent24),
            RootCSRegister::mhpmevent25 => fold_raw(&self.mhpmevent25),
            RootCSRegister::mhpmevent26 => fold_raw(&self.mhpmevent26),
            RootCSRegister::mhpmevent27 => fold_raw(&self.mhpmevent27),
            RootCSRegister::mhpmevent28 => fold_raw(&self.mhpmevent28),
            RootCSRegister::mhpmevent29 => fold_raw(&self.mhpmevent29),
            RootCSRegister::mhpmevent30 => fold_raw(&self.mhpmevent30),
            RootCSRegister::mhpmevent31 => fold_raw(&self.mhpmevent31),
            RootCSRegister::mcountinhibit => fold_raw(&self.mcountinhibit),
            RootCSRegister::scounteren => fold_raw(&self.scounteren),
            RootCSRegister::mcounteren => fold_raw(&self.mcounteren),
            RootCSRegister::fcsr => fold_raw(&self.fcsr),
            RootCSRegister::pmpcfg0 => fold_raw(&self.pmpcfg0),
            RootCSRegister::pmpcfg2 => fold_raw(&self.pmpcfg2),
            RootCSRegister::pmpcfg4 => fold_raw(&self.pmpcfg4),
            RootCSRegister::pmpcfg6 => fold_raw(&self.pmpcfg6),
            RootCSRegister::pmpcfg8 => fold_raw(&self.pmpcfg8),
            RootCSRegister::pmpcfg10 => fold_raw(&self.pmpcfg10),
            RootCSRegister::pmpcfg12 => fold_raw(&self.pmpcfg12),
            RootCSRegister::pmpcfg14 => fold_raw(&self.pmpcfg14),
            RootCSRegister::pmpaddr0 => fold_raw(&self.pmpaddr0),
            RootCSRegister::pmpaddr1 => fold_raw(&self.pmpaddr1),
            RootCSRegister::pmpaddr2 => fold_raw(&self.pmpaddr2),
            RootCSRegister::pmpaddr3 => fold_raw(&self.pmpaddr3),
            RootCSRegister::pmpaddr4 => fold_raw(&self.pmpaddr4),
            RootCSRegister::pmpaddr5 => fold_raw(&self.pmpaddr5),
            RootCSRegister::pmpaddr6 => fold_raw(&self.pmpaddr6),
            RootCSRegister::pmpaddr7 => fold_raw(&self.pmpaddr7),
            RootCSRegister::pmpaddr8 => fold_raw(&self.pmpaddr8),
            RootCSRegister::pmpaddr9 => fold_raw(&self.pmpaddr9),
            RootCSRegister::pmpaddr10 => fold_raw(&self.pmpaddr10),
            RootCSRegister::pmpaddr11 => fold_raw(&self.pmpaddr11),
            RootCSRegister::pmpaddr12 => fold_raw(&self.pmpaddr12),
            RootCSRegister::pmpaddr13 => fold_raw(&self.pmpaddr13),
            RootCSRegister::pmpaddr14 => fold_raw(&self.pmpaddr14),
            RootCSRegister::pmpaddr15 => fold_raw(&self.pmpaddr15),
            RootCSRegister::pmpaddr16 => fold_raw(&self.pmpaddr16),
            RootCSRegister::pmpaddr17 => fold_raw(&self.pmpaddr17),
            RootCSRegister::pmpaddr18 => fold_raw(&self.pmpaddr18),
            RootCSRegister::pmpaddr19 => fold_raw(&self.pmpaddr19),
            RootCSRegister::pmpaddr20 => fold_raw(&self.pmpaddr20),
            RootCSRegister::pmpaddr21 => fold_raw(&self.pmpaddr21),
            RootCSRegister::pmpaddr22 => fold_raw(&self.pmpaddr22),
            RootCSRegister::pmpaddr23 => fold_raw(&self.pmpaddr23),
            RootCSRegister::pmpaddr24 => fold_raw(&self.pmpaddr24),
            RootCSRegister::pmpaddr25 => fold_raw(&self.pmpaddr25),
            RootCSRegister::pmpaddr26 => fold_raw(&self.pmpaddr26),
            RootCSRegister::pmpaddr27 => fold_raw(&self.pmpaddr27),
            RootCSRegister::pmpaddr28 => fold_raw(&self.pmpaddr28),
            RootCSRegister::pmpaddr29 => fold_raw(&self.pmpaddr29),
            RootCSRegister::pmpaddr30 => fold_raw(&self.pmpaddr30),
            RootCSRegister::pmpaddr31 => fold_raw(&self.pmpaddr31),
            RootCSRegister::pmpaddr32 => fold_raw(&self.pmpaddr32),
            RootCSRegister::pmpaddr33 => fold_raw(&self.pmpaddr33),
            RootCSRegister::pmpaddr34 => fold_raw(&self.pmpaddr34),
            RootCSRegister::pmpaddr35 => fold_raw(&self.pmpaddr35),
            RootCSRegister::pmpaddr36 => fold_raw(&self.pmpaddr36),
            RootCSRegister::pmpaddr37 => fold_raw(&self.pmpaddr37),
            RootCSRegister::pmpaddr38 => fold_raw(&self.pmpaddr38),
            RootCSRegister::pmpaddr39 => fold_raw(&self.pmpaddr39),
            RootCSRegister::pmpaddr40 => fold_raw(&self.pmpaddr40),
            RootCSRegister::pmpaddr41 => fold_raw(&self.pmpaddr41),
            RootCSRegister::pmpaddr42 => fold_raw(&self.pmpaddr42),
            RootCSRegister::pmpaddr43 => fold_raw(&self.pmpaddr43),
            RootCSRegister::pmpaddr44 => fold_raw(&self.pmpaddr44),
            RootCSRegister::pmpaddr45 => fold_raw(&self.pmpaddr45),
            RootCSRegister::pmpaddr46 => fold_raw(&self.pmpaddr46),
            RootCSRegister::pmpaddr47 => fold_raw(&self.pmpaddr47),
            RootCSRegister::pmpaddr48 => fold_raw(&self.pmpaddr48),
            RootCSRegister::pmpaddr49 => fold_raw(&self.pmpaddr49),
            RootCSRegister::pmpaddr50 => fold_raw(&self.pmpaddr50),
            RootCSRegister::pmpaddr51 => fold_raw(&self.pmpaddr51),
            RootCSRegister::pmpaddr52 => fold_raw(&self.pmpaddr52),
            RootCSRegister::pmpaddr53 => fold_raw(&self.pmpaddr53),
            RootCSRegister::pmpaddr54 => fold_raw(&self.pmpaddr54),
            RootCSRegister::pmpaddr55 => fold_raw(&self.pmpaddr55),
            RootCSRegister::pmpaddr56 => fold_raw(&self.pmpaddr56),
            RootCSRegister::pmpaddr57 => fold_raw(&self.pmpaddr57),
            RootCSRegister::pmpaddr58 => fold_raw(&self.pmpaddr58),
            RootCSRegister::pmpaddr59 => fold_raw(&self.pmpaddr59),
            RootCSRegister::pmpaddr60 => fold_raw(&self.pmpaddr60),
            RootCSRegister::pmpaddr61 => fold_raw(&self.pmpaddr61),
            RootCSRegister::pmpaddr62 => fold_raw(&self.pmpaddr62),
            RootCSRegister::pmpaddr63 => fold_raw(&self.pmpaddr63),
            RootCSRegister::mhartid => fold_raw(&self.mhartid),
            RootCSRegister::mvendorid => fold_raw(&self.mvendorid),
            RootCSRegister::marchid => fold_raw(&self.marchid),
            RootCSRegister::mimpid => fold_raw(&self.mimpid),
            RootCSRegister::misa => fold_raw(&self.misa),
            RootCSRegister::mscratch => fold_raw(&self.mscratch),
            RootCSRegister::sscratch => fold_raw(&self.sscratch),
            RootCSRegister::stvec => fold_raw(&self.stvec),
            RootCSRegister::mtvec => fold_raw(&self.mtvec),
            RootCSRegister::mie => fold_raw(&self.mie),
            RootCSRegister::satp => fold_raw(&self.satp),
            RootCSRegister::scause => fold_raw(&self.scause),
            RootCSRegister::mcause => fold_raw(&self.mcause),
            RootCSRegister::sepc => fold_raw(&self.sepc),
            RootCSRegister::mepc => fold_raw(&self.mepc),
            RootCSRegister::stval => fold_raw(&self.stval),
            RootCSRegister::mtval => fold_raw(&self.mtval),
            RootCSRegister::mtval2 => fold_raw(&self.mtval2),
            RootCSRegister::mtinst => fold_raw(&self.mtinst),
            RootCSRegister::senvcfg => fold_raw(&self.senvcfg),
            RootCSRegister::menvcfg => fold_raw(&self.menvcfg),
            RootCSRegister::mconfigptr => fold_raw(&self.mconfigptr),
            RootCSRegister::medeleg => fold_raw(&self.medeleg),
            RootCSRegister::mideleg => fold_raw(&self.mideleg),
            RootCSRegister::mseccfg => fold_raw(&self.mseccfg),
            RootCSRegister::scontext => fold_raw(&self.scontext),
            RootCSRegister::hstatus => fold_raw(&self.hstatus),
            RootCSRegister::hedeleg => fold_raw(&self.hedeleg),
            RootCSRegister::hideleg => fold_raw(&self.hideleg),
            RootCSRegister::hie => fold_raw(&self.hie),
            RootCSRegister::hcounteren => fold_raw(&self.hcounteren),
            RootCSRegister::hgeie => fold_raw(&self.hgeie),
            RootCSRegister::htval => fold_raw(&self.htval),
            RootCSRegister::hip => fold_raw(&self.hip),
            RootCSRegister::hvip => fold_raw(&self.hvip),
            RootCSRegister::htinst => fold_raw(&self.htinst),
            RootCSRegister::hgeip => fold_raw(&self.hgeip),
            RootCSRegister::henvcfg => fold_raw(&self.henvcfg),
            RootCSRegister::hgatp => fold_raw(&self.hgatp),
            RootCSRegister::hcontext => fold_raw(&self.hcontext),
            RootCSRegister::htimedelta => fold_raw(&self.htimedelta),
            RootCSRegister::vsstatus => fold_raw(&self.vsstatus),
            RootCSRegister::vsie => fold_raw(&self.vsie),
            RootCSRegister::vstvec => fold_raw(&self.vstvec),
            RootCSRegister::vsscratch => fold_raw(&self.vsscratch),
            RootCSRegister::vsepc => fold_raw(&self.vsepc),
            RootCSRegister::vscause => fold_raw(&self.vscause),
            RootCSRegister::vstval => fold_raw(&self.vstval),
            RootCSRegister::vsip => fold_raw(&self.vsip),
            RootCSRegister::vsatp => fold_raw(&self.vsatp),
            RootCSRegister::tselect => fold_raw(&self.tselect),
            RootCSRegister::tdata1 => fold_raw(&self.tdata1),
            RootCSRegister::tdata2 => fold_raw(&self.tdata2),
            RootCSRegister::tdata3 => fold_raw(&self.tdata3),
            RootCSRegister::tcontrol => fold_raw(&self.tcontrol),
            RootCSRegister::mcontext => fold_raw(&self.mcontext),
            RootCSRegister::dcsr => fold_raw(&self.dcsr),
            RootCSRegister::dpc => fold_raw(&self.dpc),
            RootCSRegister::dscratch0 => fold_raw(&self.dscratch0),
            RootCSRegister::dscratch1 => fold_raw(&self.dscratch1),
        }
    }

    /// Select a field representing a CSR value and apply a function to it, returing its result.
    #[inline(always)]
    fn select_mut<R>(
        &mut self,
        csr: RootCSRegister,
        fold_mstatus: impl FnOnce(&mut MStatus) -> R,
        fold_mip: impl FnOnce(&mut MIP) -> R,
        fold_raw: impl FnOnce(&mut Raw) -> R,
    ) -> R {
        match csr {
            RootCSRegister::mstatus => fold_mstatus(&mut self.mstatus),
            RootCSRegister::mip => fold_mip(&mut self.mip),
            RootCSRegister::mnscratch => fold_raw(&mut self.mnscratch),
            RootCSRegister::mnepc => fold_raw(&mut self.mnepc),
            RootCSRegister::mncause => fold_raw(&mut self.mncause),
            RootCSRegister::mnstatus => fold_raw(&mut self.mnstatus),
            RootCSRegister::cycle => fold_raw(&mut self.cycle),
            RootCSRegister::time => fold_raw(&mut self.time),
            RootCSRegister::instret => fold_raw(&mut self.instret),
            RootCSRegister::mcycle => fold_raw(&mut self.mcycle),
            RootCSRegister::minstret => fold_raw(&mut self.minstret),
            RootCSRegister::hpmcounter3 => fold_raw(&mut self.hpmcounter3),
            RootCSRegister::hpmcounter4 => fold_raw(&mut self.hpmcounter4),
            RootCSRegister::hpmcounter5 => fold_raw(&mut self.hpmcounter5),
            RootCSRegister::hpmcounter6 => fold_raw(&mut self.hpmcounter6),
            RootCSRegister::hpmcounter7 => fold_raw(&mut self.hpmcounter7),
            RootCSRegister::hpmcounter8 => fold_raw(&mut self.hpmcounter8),
            RootCSRegister::hpmcounter9 => fold_raw(&mut self.hpmcounter9),
            RootCSRegister::hpmcounter10 => fold_raw(&mut self.hpmcounter10),
            RootCSRegister::hpmcounter11 => fold_raw(&mut self.hpmcounter11),
            RootCSRegister::hpmcounter12 => fold_raw(&mut self.hpmcounter12),
            RootCSRegister::hpmcounter13 => fold_raw(&mut self.hpmcounter13),
            RootCSRegister::hpmcounter14 => fold_raw(&mut self.hpmcounter14),
            RootCSRegister::hpmcounter15 => fold_raw(&mut self.hpmcounter15),
            RootCSRegister::hpmcounter16 => fold_raw(&mut self.hpmcounter16),
            RootCSRegister::hpmcounter17 => fold_raw(&mut self.hpmcounter17),
            RootCSRegister::hpmcounter18 => fold_raw(&mut self.hpmcounter18),
            RootCSRegister::hpmcounter19 => fold_raw(&mut self.hpmcounter19),
            RootCSRegister::hpmcounter20 => fold_raw(&mut self.hpmcounter20),
            RootCSRegister::hpmcounter21 => fold_raw(&mut self.hpmcounter21),
            RootCSRegister::hpmcounter22 => fold_raw(&mut self.hpmcounter22),
            RootCSRegister::hpmcounter23 => fold_raw(&mut self.hpmcounter23),
            RootCSRegister::hpmcounter24 => fold_raw(&mut self.hpmcounter24),
            RootCSRegister::hpmcounter25 => fold_raw(&mut self.hpmcounter25),
            RootCSRegister::hpmcounter26 => fold_raw(&mut self.hpmcounter26),
            RootCSRegister::hpmcounter27 => fold_raw(&mut self.hpmcounter27),
            RootCSRegister::hpmcounter28 => fold_raw(&mut self.hpmcounter28),
            RootCSRegister::hpmcounter29 => fold_raw(&mut self.hpmcounter29),
            RootCSRegister::hpmcounter30 => fold_raw(&mut self.hpmcounter30),
            RootCSRegister::hpmcounter31 => fold_raw(&mut self.hpmcounter31),
            RootCSRegister::mhpmcounter3 => fold_raw(&mut self.mhpmcounter3),
            RootCSRegister::mhpmcounter4 => fold_raw(&mut self.mhpmcounter4),
            RootCSRegister::mhpmcounter5 => fold_raw(&mut self.mhpmcounter5),
            RootCSRegister::mhpmcounter6 => fold_raw(&mut self.mhpmcounter6),
            RootCSRegister::mhpmcounter7 => fold_raw(&mut self.mhpmcounter7),
            RootCSRegister::mhpmcounter8 => fold_raw(&mut self.mhpmcounter8),
            RootCSRegister::mhpmcounter9 => fold_raw(&mut self.mhpmcounter9),
            RootCSRegister::mhpmcounter10 => fold_raw(&mut self.mhpmcounter10),
            RootCSRegister::mhpmcounter11 => fold_raw(&mut self.mhpmcounter11),
            RootCSRegister::mhpmcounter12 => fold_raw(&mut self.mhpmcounter12),
            RootCSRegister::mhpmcounter13 => fold_raw(&mut self.mhpmcounter13),
            RootCSRegister::mhpmcounter14 => fold_raw(&mut self.mhpmcounter14),
            RootCSRegister::mhpmcounter15 => fold_raw(&mut self.mhpmcounter15),
            RootCSRegister::mhpmcounter16 => fold_raw(&mut self.mhpmcounter16),
            RootCSRegister::mhpmcounter17 => fold_raw(&mut self.mhpmcounter17),
            RootCSRegister::mhpmcounter18 => fold_raw(&mut self.mhpmcounter18),
            RootCSRegister::mhpmcounter19 => fold_raw(&mut self.mhpmcounter19),
            RootCSRegister::mhpmcounter20 => fold_raw(&mut self.mhpmcounter20),
            RootCSRegister::mhpmcounter21 => fold_raw(&mut self.mhpmcounter21),
            RootCSRegister::mhpmcounter22 => fold_raw(&mut self.mhpmcounter22),
            RootCSRegister::mhpmcounter23 => fold_raw(&mut self.mhpmcounter23),
            RootCSRegister::mhpmcounter24 => fold_raw(&mut self.mhpmcounter24),
            RootCSRegister::mhpmcounter25 => fold_raw(&mut self.mhpmcounter25),
            RootCSRegister::mhpmcounter26 => fold_raw(&mut self.mhpmcounter26),
            RootCSRegister::mhpmcounter27 => fold_raw(&mut self.mhpmcounter27),
            RootCSRegister::mhpmcounter28 => fold_raw(&mut self.mhpmcounter28),
            RootCSRegister::mhpmcounter29 => fold_raw(&mut self.mhpmcounter29),
            RootCSRegister::mhpmcounter30 => fold_raw(&mut self.mhpmcounter30),
            RootCSRegister::mhpmcounter31 => fold_raw(&mut self.mhpmcounter31),
            RootCSRegister::mhpmevent3 => fold_raw(&mut self.mhpmevent3),
            RootCSRegister::mhpmevent4 => fold_raw(&mut self.mhpmevent4),
            RootCSRegister::mhpmevent5 => fold_raw(&mut self.mhpmevent5),
            RootCSRegister::mhpmevent6 => fold_raw(&mut self.mhpmevent6),
            RootCSRegister::mhpmevent7 => fold_raw(&mut self.mhpmevent7),
            RootCSRegister::mhpmevent8 => fold_raw(&mut self.mhpmevent8),
            RootCSRegister::mhpmevent9 => fold_raw(&mut self.mhpmevent9),
            RootCSRegister::mhpmevent10 => fold_raw(&mut self.mhpmevent10),
            RootCSRegister::mhpmevent11 => fold_raw(&mut self.mhpmevent11),
            RootCSRegister::mhpmevent12 => fold_raw(&mut self.mhpmevent12),
            RootCSRegister::mhpmevent13 => fold_raw(&mut self.mhpmevent13),
            RootCSRegister::mhpmevent14 => fold_raw(&mut self.mhpmevent14),
            RootCSRegister::mhpmevent15 => fold_raw(&mut self.mhpmevent15),
            RootCSRegister::mhpmevent16 => fold_raw(&mut self.mhpmevent16),
            RootCSRegister::mhpmevent17 => fold_raw(&mut self.mhpmevent17),
            RootCSRegister::mhpmevent18 => fold_raw(&mut self.mhpmevent18),
            RootCSRegister::mhpmevent19 => fold_raw(&mut self.mhpmevent19),
            RootCSRegister::mhpmevent20 => fold_raw(&mut self.mhpmevent20),
            RootCSRegister::mhpmevent21 => fold_raw(&mut self.mhpmevent21),
            RootCSRegister::mhpmevent22 => fold_raw(&mut self.mhpmevent22),
            RootCSRegister::mhpmevent23 => fold_raw(&mut self.mhpmevent23),
            RootCSRegister::mhpmevent24 => fold_raw(&mut self.mhpmevent24),
            RootCSRegister::mhpmevent25 => fold_raw(&mut self.mhpmevent25),
            RootCSRegister::mhpmevent26 => fold_raw(&mut self.mhpmevent26),
            RootCSRegister::mhpmevent27 => fold_raw(&mut self.mhpmevent27),
            RootCSRegister::mhpmevent28 => fold_raw(&mut self.mhpmevent28),
            RootCSRegister::mhpmevent29 => fold_raw(&mut self.mhpmevent29),
            RootCSRegister::mhpmevent30 => fold_raw(&mut self.mhpmevent30),
            RootCSRegister::mhpmevent31 => fold_raw(&mut self.mhpmevent31),
            RootCSRegister::mcountinhibit => fold_raw(&mut self.mcountinhibit),
            RootCSRegister::scounteren => fold_raw(&mut self.scounteren),
            RootCSRegister::mcounteren => fold_raw(&mut self.mcounteren),
            RootCSRegister::fcsr => fold_raw(&mut self.fcsr),
            RootCSRegister::pmpcfg0 => fold_raw(&mut self.pmpcfg0),
            RootCSRegister::pmpcfg2 => fold_raw(&mut self.pmpcfg2),
            RootCSRegister::pmpcfg4 => fold_raw(&mut self.pmpcfg4),
            RootCSRegister::pmpcfg6 => fold_raw(&mut self.pmpcfg6),
            RootCSRegister::pmpcfg8 => fold_raw(&mut self.pmpcfg8),
            RootCSRegister::pmpcfg10 => fold_raw(&mut self.pmpcfg10),
            RootCSRegister::pmpcfg12 => fold_raw(&mut self.pmpcfg12),
            RootCSRegister::pmpcfg14 => fold_raw(&mut self.pmpcfg14),
            RootCSRegister::pmpaddr0 => fold_raw(&mut self.pmpaddr0),
            RootCSRegister::pmpaddr1 => fold_raw(&mut self.pmpaddr1),
            RootCSRegister::pmpaddr2 => fold_raw(&mut self.pmpaddr2),
            RootCSRegister::pmpaddr3 => fold_raw(&mut self.pmpaddr3),
            RootCSRegister::pmpaddr4 => fold_raw(&mut self.pmpaddr4),
            RootCSRegister::pmpaddr5 => fold_raw(&mut self.pmpaddr5),
            RootCSRegister::pmpaddr6 => fold_raw(&mut self.pmpaddr6),
            RootCSRegister::pmpaddr7 => fold_raw(&mut self.pmpaddr7),
            RootCSRegister::pmpaddr8 => fold_raw(&mut self.pmpaddr8),
            RootCSRegister::pmpaddr9 => fold_raw(&mut self.pmpaddr9),
            RootCSRegister::pmpaddr10 => fold_raw(&mut self.pmpaddr10),
            RootCSRegister::pmpaddr11 => fold_raw(&mut self.pmpaddr11),
            RootCSRegister::pmpaddr12 => fold_raw(&mut self.pmpaddr12),
            RootCSRegister::pmpaddr13 => fold_raw(&mut self.pmpaddr13),
            RootCSRegister::pmpaddr14 => fold_raw(&mut self.pmpaddr14),
            RootCSRegister::pmpaddr15 => fold_raw(&mut self.pmpaddr15),
            RootCSRegister::pmpaddr16 => fold_raw(&mut self.pmpaddr16),
            RootCSRegister::pmpaddr17 => fold_raw(&mut self.pmpaddr17),
            RootCSRegister::pmpaddr18 => fold_raw(&mut self.pmpaddr18),
            RootCSRegister::pmpaddr19 => fold_raw(&mut self.pmpaddr19),
            RootCSRegister::pmpaddr20 => fold_raw(&mut self.pmpaddr20),
            RootCSRegister::pmpaddr21 => fold_raw(&mut self.pmpaddr21),
            RootCSRegister::pmpaddr22 => fold_raw(&mut self.pmpaddr22),
            RootCSRegister::pmpaddr23 => fold_raw(&mut self.pmpaddr23),
            RootCSRegister::pmpaddr24 => fold_raw(&mut self.pmpaddr24),
            RootCSRegister::pmpaddr25 => fold_raw(&mut self.pmpaddr25),
            RootCSRegister::pmpaddr26 => fold_raw(&mut self.pmpaddr26),
            RootCSRegister::pmpaddr27 => fold_raw(&mut self.pmpaddr27),
            RootCSRegister::pmpaddr28 => fold_raw(&mut self.pmpaddr28),
            RootCSRegister::pmpaddr29 => fold_raw(&mut self.pmpaddr29),
            RootCSRegister::pmpaddr30 => fold_raw(&mut self.pmpaddr30),
            RootCSRegister::pmpaddr31 => fold_raw(&mut self.pmpaddr31),
            RootCSRegister::pmpaddr32 => fold_raw(&mut self.pmpaddr32),
            RootCSRegister::pmpaddr33 => fold_raw(&mut self.pmpaddr33),
            RootCSRegister::pmpaddr34 => fold_raw(&mut self.pmpaddr34),
            RootCSRegister::pmpaddr35 => fold_raw(&mut self.pmpaddr35),
            RootCSRegister::pmpaddr36 => fold_raw(&mut self.pmpaddr36),
            RootCSRegister::pmpaddr37 => fold_raw(&mut self.pmpaddr37),
            RootCSRegister::pmpaddr38 => fold_raw(&mut self.pmpaddr38),
            RootCSRegister::pmpaddr39 => fold_raw(&mut self.pmpaddr39),
            RootCSRegister::pmpaddr40 => fold_raw(&mut self.pmpaddr40),
            RootCSRegister::pmpaddr41 => fold_raw(&mut self.pmpaddr41),
            RootCSRegister::pmpaddr42 => fold_raw(&mut self.pmpaddr42),
            RootCSRegister::pmpaddr43 => fold_raw(&mut self.pmpaddr43),
            RootCSRegister::pmpaddr44 => fold_raw(&mut self.pmpaddr44),
            RootCSRegister::pmpaddr45 => fold_raw(&mut self.pmpaddr45),
            RootCSRegister::pmpaddr46 => fold_raw(&mut self.pmpaddr46),
            RootCSRegister::pmpaddr47 => fold_raw(&mut self.pmpaddr47),
            RootCSRegister::pmpaddr48 => fold_raw(&mut self.pmpaddr48),
            RootCSRegister::pmpaddr49 => fold_raw(&mut self.pmpaddr49),
            RootCSRegister::pmpaddr50 => fold_raw(&mut self.pmpaddr50),
            RootCSRegister::pmpaddr51 => fold_raw(&mut self.pmpaddr51),
            RootCSRegister::pmpaddr52 => fold_raw(&mut self.pmpaddr52),
            RootCSRegister::pmpaddr53 => fold_raw(&mut self.pmpaddr53),
            RootCSRegister::pmpaddr54 => fold_raw(&mut self.pmpaddr54),
            RootCSRegister::pmpaddr55 => fold_raw(&mut self.pmpaddr55),
            RootCSRegister::pmpaddr56 => fold_raw(&mut self.pmpaddr56),
            RootCSRegister::pmpaddr57 => fold_raw(&mut self.pmpaddr57),
            RootCSRegister::pmpaddr58 => fold_raw(&mut self.pmpaddr58),
            RootCSRegister::pmpaddr59 => fold_raw(&mut self.pmpaddr59),
            RootCSRegister::pmpaddr60 => fold_raw(&mut self.pmpaddr60),
            RootCSRegister::pmpaddr61 => fold_raw(&mut self.pmpaddr61),
            RootCSRegister::pmpaddr62 => fold_raw(&mut self.pmpaddr62),
            RootCSRegister::pmpaddr63 => fold_raw(&mut self.pmpaddr63),
            RootCSRegister::mhartid => fold_raw(&mut self.mhartid),
            RootCSRegister::mvendorid => fold_raw(&mut self.mvendorid),
            RootCSRegister::marchid => fold_raw(&mut self.marchid),
            RootCSRegister::mimpid => fold_raw(&mut self.mimpid),
            RootCSRegister::misa => fold_raw(&mut self.misa),
            RootCSRegister::mscratch => fold_raw(&mut self.mscratch),
            RootCSRegister::sscratch => fold_raw(&mut self.sscratch),
            RootCSRegister::stvec => fold_raw(&mut self.stvec),
            RootCSRegister::mtvec => fold_raw(&mut self.mtvec),
            RootCSRegister::mie => fold_raw(&mut self.mie),
            RootCSRegister::satp => fold_raw(&mut self.satp),
            RootCSRegister::scause => fold_raw(&mut self.scause),
            RootCSRegister::mcause => fold_raw(&mut self.mcause),
            RootCSRegister::sepc => fold_raw(&mut self.sepc),
            RootCSRegister::mepc => fold_raw(&mut self.mepc),
            RootCSRegister::stval => fold_raw(&mut self.stval),
            RootCSRegister::mtval => fold_raw(&mut self.mtval),
            RootCSRegister::mtval2 => fold_raw(&mut self.mtval2),
            RootCSRegister::mtinst => fold_raw(&mut self.mtinst),
            RootCSRegister::senvcfg => fold_raw(&mut self.senvcfg),
            RootCSRegister::menvcfg => fold_raw(&mut self.menvcfg),
            RootCSRegister::mconfigptr => fold_raw(&mut self.mconfigptr),
            RootCSRegister::medeleg => fold_raw(&mut self.medeleg),
            RootCSRegister::mideleg => fold_raw(&mut self.mideleg),
            RootCSRegister::mseccfg => fold_raw(&mut self.mseccfg),
            RootCSRegister::scontext => fold_raw(&mut self.scontext),
            RootCSRegister::hstatus => fold_raw(&mut self.hstatus),
            RootCSRegister::hedeleg => fold_raw(&mut self.hedeleg),
            RootCSRegister::hideleg => fold_raw(&mut self.hideleg),
            RootCSRegister::hie => fold_raw(&mut self.hie),
            RootCSRegister::hcounteren => fold_raw(&mut self.hcounteren),
            RootCSRegister::hgeie => fold_raw(&mut self.hgeie),
            RootCSRegister::htval => fold_raw(&mut self.htval),
            RootCSRegister::hip => fold_raw(&mut self.hip),
            RootCSRegister::hvip => fold_raw(&mut self.hvip),
            RootCSRegister::htinst => fold_raw(&mut self.htinst),
            RootCSRegister::hgeip => fold_raw(&mut self.hgeip),
            RootCSRegister::henvcfg => fold_raw(&mut self.henvcfg),
            RootCSRegister::hgatp => fold_raw(&mut self.hgatp),
            RootCSRegister::hcontext => fold_raw(&mut self.hcontext),
            RootCSRegister::htimedelta => fold_raw(&mut self.htimedelta),
            RootCSRegister::vsstatus => fold_raw(&mut self.vsstatus),
            RootCSRegister::vsie => fold_raw(&mut self.vsie),
            RootCSRegister::vstvec => fold_raw(&mut self.vstvec),
            RootCSRegister::vsscratch => fold_raw(&mut self.vsscratch),
            RootCSRegister::vsepc => fold_raw(&mut self.vsepc),
            RootCSRegister::vscause => fold_raw(&mut self.vscause),
            RootCSRegister::vstval => fold_raw(&mut self.vstval),
            RootCSRegister::vsip => fold_raw(&mut self.vsip),
            RootCSRegister::vsatp => fold_raw(&mut self.vsatp),
            RootCSRegister::tselect => fold_raw(&mut self.tselect),
            RootCSRegister::tdata1 => fold_raw(&mut self.tdata1),
            RootCSRegister::tdata2 => fold_raw(&mut self.tdata2),
            RootCSRegister::tdata3 => fold_raw(&mut self.tdata3),
            RootCSRegister::tcontrol => fold_raw(&mut self.tcontrol),
            RootCSRegister::mcontext => fold_raw(&mut self.mcontext),
            RootCSRegister::dcsr => fold_raw(&mut self.dcsr),
            RootCSRegister::dpc => fold_raw(&mut self.dpc),
            RootCSRegister::dscratch0 => fold_raw(&mut self.dscratch0),
            RootCSRegister::dscratch1 => fold_raw(&mut self.dscratch1),
        }
    }
}

impl<Raw: serde::Serialize, MStatus: serde::Serialize, MIP: serde::Serialize> RootHashable
    for CSRValuesF<Raw, MStatus, MIP>
{
    fn hash(&self) -> Result<Hash, HashError> {
        Hash::blake2b_hash(self)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::sync::atomic::{AtomicUsize, Ordering};
    use strum::IntoEnumIterator;

    /// Ensure that [`CSRValues::fold_ref`] and [`CSRValuesF::fold_mut`] refer to the same CSR
    /// value field provided the same [`RootCSRegister`].
    #[test]
    fn fold_ref_mut_consistent() {
        let counter = AtomicUsize::new(0);

        let mut example = CSRValuesF::new(
            || counter.fetch_add(1, Ordering::SeqCst),
            || counter.fetch_add(1, Ordering::SeqCst),
            || counter.fetch_add(1, Ordering::SeqCst),
        );

        for csr in RootCSRegister::iter() {
            let lhs = example.select_ref(csr, |x| *x, |x| *x, |x| *x);
            let rhs = example.select_mut(csr, |x| *x, |x| *x, |x| *x);
            assert_eq!(lhs, rhs);
        }
    }

    /// Ensure that [`CSRValues::as_ref`] obtained correct references.
    #[test]
    fn as_ref_consistent() {
        let counter = AtomicUsize::new(0);

        let example = CSRValuesF::new(
            || counter.fetch_add(1, Ordering::SeqCst),
            || counter.fetch_add(1, Ordering::SeqCst),
            || counter.fetch_add(1, Ordering::SeqCst),
        );

        let example_copy = example.as_ref().map(|x| *x, |x| *x, |x| *x);

        assert_eq!(example, example_copy);
    }
}
