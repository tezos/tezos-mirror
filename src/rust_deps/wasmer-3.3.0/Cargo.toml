[package]
name = "wasmer-workspace"
version = "3.3.0"
description = "Wasmer workspace"
authors = ["Wasmer Engineering Team <engineering@wasmer.io>"]
repository = "https://github.com/wasmerio/wasmer"
license = "MIT"
edition = "2018"
publish = false
autoexamples = false

[dependencies]
wasmer = { version = "=3.3.0", path = "lib/api", default-features = false }
wasmer-compiler = { version = "=3.3.0", path = "lib/compiler", features = [
  "compiler",
], optional = true }
wasmer-compiler-cranelift = { version = "=3.3.0", path = "lib/compiler-cranelift", optional = true }
wasmer-compiler-singlepass = { version = "=3.3.0", path = "lib/compiler-singlepass", optional = true }
wasmer-compiler-llvm = { version = "=3.3.0", path = "lib/compiler-llvm", optional = true }
wasmer-emscripten = { version = "=3.3.0", path = "lib/emscripten", optional = true }
wasmer-wasix = { version = "0.4.0", path = "lib/wasi", optional = true }
wasmer-wast = { version = "=3.3.0", path = "tests/lib/wast", optional = true }
wasi-test-generator = { version = "=3.3.0", path = "tests/wasi-wast", optional = true }
wasmer-cache = { version = "=3.3.0", path = "lib/cache", optional = true }
wasmer-types = { version = "=3.3.0", path = "lib/types" }
wasmer-middlewares = { version = "=3.3.0", path = "lib/middlewares", optional = true }
cfg-if = "1.0"

[workspace]
members = ["lib/c-api"]
exclude = ["lib/wasi-web"]
resolver = "2"

[build-dependencies]
test-generator = { path = "tests/lib/test-generator" }
build-deps = "0.1.4"
anyhow = "1.0"
glob = "0.3"
rustc_version = "0.4"

[dev-dependencies]
wasmer = { version = "=3.3.0", path = "lib/api", default-features = false, features = [
] }
anyhow = "1.0"
criterion = "0.3"
lazy_static = "1.4"
serial_test = "0.5"
compiler-test-derive = { path = "tests/lib/compiler-test-derive" }
tempfile = "3.4.0"
# For logging tests using the `RUST_LOG=debug` when testing
test-log = { version = "0.2", default-features = false, features = ["trace"] }
tracing = { version = "0.1", default-features = false, features = ["log"] }
tracing-subscriber = { version = "0.3", default-features = false, features = [
  "env-filter",
  "fmt",
] }

[features]
# Don't add the compiler features in default, please add them on the Makefile
# since we might want to autoconfigure them depending on the availability on the host.
default = [
  "wat",
  "wast",
  "cache",
  "wasi",
  "engine",
  "emscripten",
  "middlewares",
]
# backend means that the `wasmer` crate will be compiled with the `wasmer-compiler` or the `jsc`.
# That means: that is able to execute modules
backend = []
jsc = ["wasmer/jsc", "backend", "wat", "wasmer/std"]
engine = ["universal"]
universal = []
cache = ["wasmer-cache"]
wast = ["wasmer-wast"]
wasi = ["wasmer-wasix"]
emscripten = ["wasmer-emscripten"]
wat = ["wasmer/wat"]
compiler = ["wasmer/compiler", "backend", "wasmer-compiler/translator"]
singlepass = ["compiler", "wasmer-compiler-singlepass", "wasmer/singlepass"]
cranelift = ["compiler", "wasmer-compiler-cranelift", "wasmer/cranelift"]
llvm = ["compiler", "wasmer-compiler-llvm", "wasmer/llvm"]
middlewares = ["wasmer-middlewares"]
wasmer-artifact-load = ["wasmer-compiler/wasmer-artifact-load"]
wasmer-artifact-create = ["wasmer-compiler/wasmer-artifact-create"]
static-artifact-load = ["wasmer-compiler/static-artifact-load"]
static-artifact-create = ["wasmer-compiler/static-artifact-create"]

# Testing features
test-singlepass = ["singlepass"]
test-cranelift = ["cranelift"]
test-llvm = ["llvm"]

test-universal = ["test-generator/test-universal"]

# Specifies that we're running in coverage testing mode. This disables tests
# that raise signals because that interferes with tarpaulin.
coverage = []

#[profile.release]
#debug = true

[[bench]]
name = "static_and_dynamic_functions"
harness = false

[[example]]
name = "early-exit"
path = "examples/early_exit.rs"
required-features = ["backend"]

[[example]]
name = "engine"
path = "examples/engine.rs"
required-features = ["cranelift"]

[[example]]
name = "engine-headless"
path = "examples/engine_headless.rs"
required-features = ["cranelift"]

[[example]]
name = "platform-headless-ios"
path = "examples/platform_ios_headless.rs"
required-features = ["cranelift"]

[[example]]
name = "cross-compilation"
path = "examples/engine_cross_compilation.rs"
required-features = ["cranelift"]

[[example]]
name = "compiler-singlepass"
path = "examples/compiler_singlepass.rs"
required-features = ["singlepass"]

[[example]]
name = "compiler-cranelift"
path = "examples/compiler_cranelift.rs"
required-features = ["cranelift"]

[[example]]
name = "compiler-llvm"
path = "examples/compiler_llvm.rs"
required-features = ["llvm"]

[[example]]
name = "exported-function"
path = "examples/exports_function.rs"
required-features = ["backend"]

[[example]]
name = "exported-global"
path = "examples/exports_global.rs"
required-features = ["backend"]

[[example]]
name = "exported-memory"
path = "examples/exports_memory.rs"
required-features = ["backend"]

[[example]]
name = "imported-function"
path = "examples/imports_function.rs"
required-features = ["backend"]

[[example]]
name = "imported-global"
path = "examples/imports_global.rs"
required-features = ["backend"]

[[example]]
name = "tunables-limit-memory"
path = "examples/tunables_limit_memory.rs"
required-features = ["cranelift"]

[[example]]
name = "wasi"
path = "examples/wasi.rs"
required-features = ["backend", "wasi"]

[[example]]
name = "wasi-manual-setup"
path = "examples/wasi_manual_setup.rs"
required-features = ["backend", "wasi"]

[[example]]
name = "wasi-pipes"
path = "examples/wasi_pipes.rs"
required-features = ["backend", "wasi"]

[[example]]
name = "table"
path = "examples/table.rs"
required-features = ["backend"]

[[example]]
name = "memory"
path = "examples/memory.rs"
required-features = ["backend"]

[[example]]
name = "instance"
path = "examples/instance.rs"
required-features = ["backend"]

[[example]]
name = "errors"
path = "examples/errors.rs"
required-features = ["sys"]

[[example]]
name = "imported-function-env"
path = "examples/imports_function_env.rs"
required-features = ["backend"]

[[example]]
name = "imported-function-env-global"
path = "examples/imports_function_env_global.rs"
required-features = ["backend"]

[[example]]
name = "hello-world"
path = "examples/hello_world.rs"
required-features = ["backend"]

[[example]]
name = "metering"
path = "examples/metering.rs"
required-features = ["cranelift"]

[[example]]
name = "imports-exports"
path = "examples/imports_exports.rs"
required-features = ["backend"]

[[example]]
name = "features"
path = "examples/features.rs"
required-features = ["cranelift"]
