
variant method {
  get,
  head,
  post,
  put,
  delete,
  connect,
  options,
  trace,
  patch,
  other(string),
}

record header {
  key: string,
  value: list<u8>,
}

type header-list = list<header>

// File descriptor.
type fd = u32

// Timeout in milliseconds.
type timeout-ms = u32

record redirect-follow {
  max: u32,
}

variant redirect-policy {
  // Do not follow redirects.
  no-follow,
  // Follow, with an upper bound.
  follow(redirect-follow),
}

variant body {
  data(list<u8>),
  fd(fd),
}

record request {
  url: string,
  method: method,
  headers: header-list,
  // File descriptor.
  body: option<body>,

  timeout: option<timeout-ms>,
  redirect-policy: option<redirect-policy>,
}

record response {
  status: u16,
  headers: header-list,
  body: body,
  // Chain of followed redirects.
  redirect-urls: option<list<string>>,
}

variant create-client-error {
  permission-denied(string),
}

variant request-error {
  permission-denied(string),
  invalid-request(string),
  // HTTP protocol error.
  http(string),
  // IO error.
  io(string),
}

resource client {
  static new: func() -> expected<client, string>
  send: func(request: request) -> expected<response, string>
}
