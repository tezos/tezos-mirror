# Helper image using the latest rust compiler
# instead of using - && curl -sSf https://sh.rustup.rs | ash -s -- -y
ARG BUILD_IMAGE
# hadolint ignore=DL3006
FROM ${BUILD_IMAGE} AS cast-binary

# Use alpine /bin/ash and set shell options
# See https://docs.docker.com/build/building/best-practices/#using-pipes
SHELL ["/bin/ash", "-euo", "pipefail", "-c"]

ENV PATH="/root/.cargo/bin:${PATH}"
ENV RUSTFLAGS="-C linker=clang -C link-arg=-fuse-ld=lld"

# hadolint ignore=DL3018,DL3019
RUN apk update \
 && apk add --no-cache curl git file make jq websocat gcc clang lld \
 && apk add --no-cache ca-certificates build-base musl-dev libusb-dev linux-headers procps-ng

RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | ash -s -- -y

# add config.toml to use https://crates.io/crates/crates-io-proxy
COPY .cargo/config.toml /root/.cargo/

# Foundry releases nightly build. We pick the commit of the day (at the time
# of proposing the change)
RUN cargo install \
 --git https://github.com/foundry-rs/foundry/ foundry-cast \
 --profile release \
 --force --locked \
 --tag nightly-07a1f67114565968b188d1abf42fe2c5c57bfca5 \
 && cp /root/.cargo/bin/cast /bin

# runtime + end-to-end test dependencies
#
# This image builds on the runtime dependencies and additionally includes:
#
# - ocamlformat and bisect-ppx-report, copied from the
#   build image.
# - eth-cli, installed from npm
# - some utilities used in the Tezt integration test suite: git, file
# - some utilities used in the [unified_coverage] job: make
#
# This image is intended for
# - Running end-to-end tests (mostly Tezt) in the tezos/tezos CI.

# this is needed because we COPY --from=build below
# hadolint ignore=DL3006
FROM build as build

ARG OCAML_IMAGE
ARG BUILD_IMAGE

# hadolint ignore=DL3006
FROM monitoring as e2etest

LABEL org.opencontainers.image.title="e2etest"

USER root

# SHELL already set in runtime

WORKDIR /tmp

# Automatically set if you use Docker buildx
ARG TARGETARCH

# Retrieve ocamlformat, used in the snoop tests.
ARG OCAML_VERSION
COPY --from=build \
    /home/tezos/.opam/ocaml-base-compiler.${OCAML_VERSION}/bin/ocamlformat \
    /home/tezos/.opam/ocaml-base-compiler.${OCAML_VERSION}/bin/bisect-ppx-report \
    /bin/

COPY --from=cast-binary /bin/cast /bin/

# TODO: https://gitlab.com/tezos/tezos/-/issues/5026
# We could install npm via nvm if we tackle this issue.
# In the meantime, removes nvm installed in test and
# install npm via apk.

# Fixing some ipv6 issues on the runner. Always prioritizing ipv4
ENV NODE_OPTIONS="--dns-result-order=ipv4first"

# We need curl since a bunch of tezt tests use curl.
# Same, some tests use [file].

# Use alpine /bin/ash and set shell options
# See https://docs.docker.com/build/building/best-practices/#using-pipes
SHELL ["/bin/ash", "-euo", "pipefail", "-c"]

# hadolint ignore=DL3018,DL3019
RUN apk update \
 && apk add --no-cache git file make websocat gcc clang lld \
 && apk add --no-cache ca-certificates build-base musl-dev libusb-dev linux-headers procps-ng npm

# Install dal SRS setup (need curl)
COPY scripts/install_dal_trusted_setup.sh scripts/version.sh /tmp/
RUN mkdir -p /usr/share/dal-trusted-setup && \
    DAL_TRUSTED_SETUP=/usr/share/dal-trusted-setup \
    sh /tmp/install_dal_trusted_setup.sh && \
    rm /tmp/install_dal_trusted_setup.sh /tmp/version.sh

# Set NPM registry
# NPM_REGISTRY_DOMAIN and NPM_REGISTRY are set in the GitLab CI/CD
ARG NPM_REGISTRY_DOMAIN
ARG NPM_REGISTRY

COPY e2etest/package.json e2etest/package-lock.json /usr/local/lib/
# Etherlink tests have hardcoded /usr/local/lib as path,
# and `npm ci` installs the node_modules directory locally
# hadolint ignore=DL3003
RUN --mount=type=secret,id=npm_token \
    if [ -n "$NPM_REGISTRY" ] ; then \
      npm set registry "$NPM_REGISTRY" && \
      npm set //"${NPM_REGISTRY_DOMAIN}":_authToken="$(cat /run/secrets/npm_token)"; \
    fi \
    && cd /usr/local/lib/ && npm ci

USER tezos
WORKDIR /home/tezos
