# This file was automatically generated, do not edit.
# Edit file ci/bin/main.ml instead.

stages:
- start
- images
- sanity
- build
- test
- test_coverage
- manual

oc.docker:ci:amd64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: images
  tags:
  - gcp
  dependencies: []
  timeout: 90 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./images/ci_create_ci_images.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
    ARCH: amd64
  artifacts:
    reports:
      dotenv: ci_image_tag.env

oc.docker:jsonnet:amd64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: images
  tags:
  - gcp
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/docker_initialize.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_jsonnet_build.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
  artifacts:
    reports:
      dotenv: jsonnet_image_tag.env

oc.docker:client-libs-dependencies:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: images
  tags:
  - gcp
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_client_libs_dependencies_build.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
  artifacts:
    reports:
      dotenv: client_libs_dependencies_image_tag.env

oc.docker:rust-toolchain:amd64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: images
  tags:
  - gcp
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_rust_toolchain_build.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
    IMAGE: ${GCP_PROTECTED_REGISTRY}/tezos/tezos/debian-rust:unstable
  artifacts:
    reports:
      dotenv: rust_toolchain_image_tag.env

oc.docker:rust-sdk-bindings:amd64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: images
  tags:
  - gcp
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/docker_initialize.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_rust_sdk_bindings_build.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
  artifacts:
    reports:
      dotenv: rust_sdk_bindings_image_tag.env

oc.docker:ci:arm64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: images
  tags:
  - gcp_arm64
  dependencies: []
  timeout: 90 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./images/ci_create_ci_images.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
    ARCH: arm64
  artifacts:
    reports:
      dotenv: ci_image_tag.env
  retry:
    max: 1
    when:
    - runner_system_failure

trigger:
  image: datadog/ci:v2.44.0
  stage: start
  tags:
  - gcp
  rules:
  - if: $GITLAB_USER_LOGIN != "nomadic-margebot" && $CI_MERGE_REQUEST_ASSIGNEES !~
      /nomadic-margebot/ && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
    when: manual
    allow_failure: false
  - when: always
  needs: []
  dependencies: []
  timeout: 10 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - echo 'Trigger pipeline!'
  - CI_MERGE_REQUEST_IID=${CI_MERGE_REQUEST_IID:-none}
  - DATADOG_SITE=datadoghq.eu datadog-ci tag --level pipeline --tags pipeline_type:$PIPELINE_TYPE
    --tags mr_number:$CI_MERGE_REQUEST_IID
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

sanity_ci:
  image: ${ci_image_name_protected}/build:amd64--master
  stage: sanity
  tags:
  - gcp
  needs: []
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - make --silent -C manifest check
  - make --silent -C ci check
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

docker:hadolint:
  image: hadolint/hadolint:2.12.0-alpine
  stage: sanity
  tags:
  - gcp
  rules:
  - changes:
    - Dockerfile
    - build.Dockerfile
    when: on_success
  needs: []
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - hadolint build.Dockerfile
  - hadolint Dockerfile
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.ocaml_fmt:
  image: ${ci_image_name_protected}/build:amd64--master
  stage: sanity
  tags:
  - gcp
  rules:
  - changes:
    - '**/*.ml'
    - '**/*.mli'
    - '**/.ocamlformat'
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    when: on_success
  needs: []
  dependencies: []
  timeout: 60 minutes
  cache:
    key: dune_cache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - scripts/lint.sh --check-ocamlformat
  - dune build --profile=dev @fmt
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache

oc.semgrep:
  image: returntocorp/semgrep-agent:sha-c6cd7cf
  stage: sanity
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - devtools/**/*
    - scripts/semgrep/**/*
    - src/**/*
    - tezt/**/*
    when: on_success
  needs: []
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - echo "OCaml code linting. For information on how to reproduce locally, check out
    scripts/semgrep/README.md"
  - sh ./scripts/semgrep/lint-all-ocaml-sources.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.misc_checks:
  image: ${ci_image_name_protected}/test:amd64--master
  stage: sanity
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - client-libs/**/*
    - contrib/**/*
    - devtools/**/*
    - docs/**/*
    - etherlink/**/*
    - scripts/**/*
    - src/**/*
    - tezt/**/*
    when: on_success
  needs: []
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . $HOME/.venv/bin/activate
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/lint_misc_check.sh
  - scripts/check_wasm_pvm_regressions.sh check
  - etherlink/scripts/check_evm_store_migrations.sh check
  - ./scripts/check_rollup_node_sql_migrations.sh check
  - ./src/lib_dal_node/scripts/check_dal_store_migrations.sh check
  - ./scripts/ci/lint_check_licenses.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

check_jsonnet:
  image: ${jsonnet_image_name_protected}:master
  stage: sanity
  tags:
  - gcp
  rules:
  - changes:
    - '**/*.jsonnet'
    when: on_success
  needs: []
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - cd grafazos/
  - jb install github.com/grafana/grafonnet/gen/grafonnet-v11.1.0@1ce5aec
  - cd ../
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - scripts/lint.sh --check-jsonnet-format
  - scripts/lint.sh --check-jsonnet-lint
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

check_rust_fmt:
  image: ${rust_toolchain_image_name_protected}:master
  stage: sanity
  tags:
  - gcp
  rules:
  - changes:
    - '**/*.rs'
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    when: on_success
  needs: []
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - scripts/check-format-rust.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

nix:
  image: nixos/nix:2.22.1
  stage: sanity
  tags:
  - gcp
  rules:
  - changes:
    - '**/*.nix'
    - flake.lock
    - scripts/version.sh
    when: on_success
  needs: []
  dependencies: []
  timeout: 60 minutes
  cache:
    key: nix-store
    paths:
    - /nix/store
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - mkdir -p ~/.config/nix
  - echo 'extra-experimental-features = flakes nix-command' > ~/.config/nix/nix.conf
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - nix run .#ci-check-version-sh-lock
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  artifacts:
    paths:
    - flake.lock
    when: on_failure

commit_titles:
  image: ${ci_image_name_protected}/prebuild:amd64--master
  stage: sanity
  tags:
  - gcp
  needs: []
  dependencies: []
  allow_failure:
    exit_codes: 65
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/check_commit_messages.sh || exit $?
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.build_arm64-released:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_arm64
  rules:
  - if: $CI_MERGE_REQUEST_LABELS =~ /(?:^|,)ci--arm64(?:$|,)/
    when: on_success
  - when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:arm64
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/build_full_unreleased.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: arm64
    EXECUTABLE_FILES: script-inputs/released-executables
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - src/proto_*/parameters/*.json
    when: on_success

oc.build_arm64-extra-dev:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_arm64
  rules:
  - if: $CI_MERGE_REQUEST_LABELS =~ /(?:^|,)ci--arm64(?:$|,)/
    when: on_success
  - when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:arm64
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/build_full_unreleased.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: arm64
    EXECUTABLE_FILES: script-inputs/dev-executables
    BUILD_EXTRA: src/bin_tps_evaluation/main_tps_evaluation.exe src/bin_octogram/octogram_main.exe
      tezt/tests/main.exe
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - octez-teztale-*
    - src/proto_*/parameters/*.json
    - _build/default/src/lib_protocol_compiler/bin/main_native.exe
    - _build/default/tezt/tests/main.exe
    - _build/default/contrib/octez_injector_server/octez_injector_server.exe
    - etherlink-governance-observer
    when: on_success

oc.build_arm64-extra-exp:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_arm64
  rules:
  - if: $CI_MERGE_REQUEST_LABELS =~ /(?:^|,)ci--arm64(?:$|,)/
    when: on_success
  - when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:arm64
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/build_full_unreleased.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: arm64
    EXECUTABLE_FILES: script-inputs/experimental-executables
    BUILD_EXTRA: src/bin_tps_evaluation/main_tps_evaluation.exe src/bin_octogram/octogram_main.exe
      tezt/tests/main.exe
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - octez-teztale-*
    - src/proto_*/parameters/*.json
    - _build/default/src/lib_protocol_compiler/bin/main_native.exe
    - _build/default/tezt/tests/main.exe
    - _build/default/contrib/octez_injector_server/octez_injector_server.exe
    - etherlink-governance-observer
    when: on_success

oc.build:static-x86_64-linux-binaries:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_very_high_cpu_ramfs
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/build_static_binaries.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: x86_64
    EXECUTABLE_FILES: script-inputs/octez-released-executables script-inputs/octez-experimental-executables
    DUNE_BUILD_JOBS: -j 12
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    paths:
    - octez-binaries/$ARCH/*

oc.build:static-arm64-linux-binaries:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_arm64
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:arm64
  - trigger
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/build_static_binaries.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: arm64
    EXECUTABLE_FILES: script-inputs/octez-released-executables script-inputs/octez-experimental-executables
    DUNE_BUILD_JOBS: -j 12
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    paths:
    - octez-binaries/$ARCH/*

oc.build_x86_64-released:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_very_high_cpu_ramfs
  rules:
  - changes:
    - '**/*.rst'
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - brassaia/**/*.ml*
    - client-libs/**/*.ml*
    - data-encoding/**/*
    - data-encoding/**/*.ml*
    - docs/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - etherlink/**/*.ml*
    - grafazos/doc/**/*
    - irmin/**/*
    - irmin/**/*.ml*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - script-inputs/**/*/
    - scripts/**/*
    - scripts/**/*/
    - sdk/**/*
    - src/**/*
    - src/**/*.ml*
    - tezt/**/*
    - tezt/**/*.ml*
    - tzt_reference_test_suite/**/*
    - vendors/**/*.ml*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/build_full_unreleased.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: x86_64
    EXECUTABLE_FILES: script-inputs/released-executables
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - src/proto_*/parameters/*.json
    when: on_success

oc.build_amd64-extra-dev:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_very_high_cpu
  rules:
  - changes:
    - '**/*.rst'
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - brassaia/**/*.ml*
    - client-libs/**/*.ml*
    - data-encoding/**/*
    - data-encoding/**/*.ml*
    - docs/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - etherlink/**/*.ml*
    - grafazos/doc/**/*
    - irmin/**/*
    - irmin/**/*.ml*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - script-inputs/**/*/
    - scripts/**/*
    - scripts/**/*/
    - sdk/**/*
    - src/**/*
    - src/**/*.ml*
    - tezt/**/*
    - tezt/**/*.ml*
    - tzt_reference_test_suite/**/*
    - vendors/**/*.ml*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  - key: dune-build-cache-$CI_PIPELINE_ID
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/build_full_unreleased.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    ARCH: x86_64
    EXECUTABLE_FILES: script-inputs/dev-executables
    BUILD_EXTRA: src/bin_tps_evaluation/main_tps_evaluation.exe src/bin_octogram/octogram_main.exe
      tezt/tests/main.exe contrib/octez_injector_server/octez_injector_server.exe
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - octez-teztale-*
    - src/proto_*/parameters/*.json
    - _build/default/src/lib_protocol_compiler/bin/main_native.exe
    - _build/default/tezt/tests/main.exe
    - _build/default/contrib/octez_injector_server/octez_injector_server.exe
    - etherlink-governance-observer
    when: on_success

oc.build_amd64-extra-exp:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_very_high_cpu
  rules:
  - changes:
    - '**/*.rst'
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - brassaia/**/*.ml*
    - client-libs/**/*.ml*
    - data-encoding/**/*
    - data-encoding/**/*.ml*
    - docs/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - etherlink/**/*.ml*
    - grafazos/doc/**/*
    - irmin/**/*
    - irmin/**/*.ml*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - script-inputs/**/*/
    - scripts/**/*
    - scripts/**/*/
    - sdk/**/*
    - src/**/*
    - src/**/*.ml*
    - tezt/**/*
    - tezt/**/*.ml*
    - tzt_reference_test_suite/**/*
    - vendors/**/*.ml*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  - key: dune-build-cache-$CI_PIPELINE_ID
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/build_full_unreleased.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    ARCH: x86_64
    EXECUTABLE_FILES: script-inputs/experimental-executables
    BUILD_EXTRA: src/bin_tps_evaluation/main_tps_evaluation.exe src/bin_octogram/octogram_main.exe
      tezt/tests/main.exe contrib/octez_injector_server/octez_injector_server.exe
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - octez-teztale-*
    - src/proto_*/parameters/*.json
    - _build/default/src/lib_protocol_compiler/bin/main_native.exe
    - _build/default/tezt/tests/main.exe
    - _build/default/contrib/octez_injector_server/octez_injector_server.exe
    - etherlink-governance-observer
    when: on_success

oc.build_kernels:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: build
  tags:
  - gcp
  rules:
  - changes:
    - '**/*.rst'
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - brassaia/**/*.ml*
    - client-libs/**/*.ml*
    - data-encoding/**/*
    - data-encoding/**/*.ml*
    - docs/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink.mk
    - etherlink/**/*
    - etherlink/**/*.ml*
    - grafazos/doc/**/*
    - images/**/*
    - irmin/**/*
    - irmin/**/*.ml*
    - kernels.mk
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - script-inputs/**/*/
    - scripts/**/*
    - scripts/**/*/
    - scripts/ci/**/*
    - sdk/**/*
    - src/**/*
    - src/**/*.ml*
    - tezt/**/*
    - tezt/**/*.ml*
    - tzt_reference_test_suite/**/*
    - vendors/**/*.ml*
    when: on_success
  needs:
  - oc.docker:rust-toolchain:amd64
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make -f kernels.mk build
  - make -f etherlink.mk evm_kernel.wasm
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    CARGO_NET_OFFLINE: "false"
  artifacts:
    name: build-kernels-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - evm_kernel.wasm
    - smart-rollup-installer
    - sequenced_kernel.wasm
    - tx_kernel.wasm
    - tx_kernel_dal.wasm
    - dal_echo_kernel.wasm
    when: on_success

build_octez_source:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_very_high_cpu_ramfs
  rules:
  - when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:amd64
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/restrict_export_to_octez_source.sh
  - ./scripts/ci/create_octez_tarball.sh octez
  - mv octez.tar.bz2 ../
  - cd ../
  - tar xf octez.tar.bz2
  - cd octez/
  - eval $(opam env)
  - make octez
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    DUNE_BUILD_JOBS: -j 12
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"

build-layer1-profiling:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_very_high_cpu
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - scripts/slim-mode.sh on
  - scripts/custom-flags.sh set -opaque
  - TEZOS_PPX_PROFILER=profiling make build OCTEZ_EXECUTABLES?="octez-node octez-client"
  - TEZOS_PPX_PROFILER=opentelemetry make build OCTEZ_EXECUTABLES?="octez-node octez-client"
  - mkdir -p octez-binaries/x86_64/
  - mv octez-node octez-binaries/x86_64/
  - mv octez-client octez-binaries/x86_64/
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    PROFILE: static
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
  artifacts:
    expire_in: 1 day
    paths:
    - ./octez-binaries/x86_64/octez-node
    - ./octez-binaries/x86_64/octez-client

trigger:debian_repository_partial_auto:
  stage: test
  variables:
    PIPELINE_TYPE: before_merging-debian_repository_partial_auto
    DOCKER_FORCE_BUILD: $DOCKER_FORCE_BUILD
  rules:
  - changes:
    - .gitlab/ci/pipelines/debian_repository_partial_auto.yml
    - debian-deps-build.Dockerfile
    - docs/introduction/install-bin-deb.sh
    - manifest/**/*.ml*
    - scripts/ci/build-debian-packages.sh
    - scripts/ci/build-debian-packages_current.sh
    - scripts/ci/build-packages-dependencies.sh
    - scripts/ci/create_debian_repo.sh
    - scripts/ci/prepare-apt-repo.sh
    - scripts/packaging/Release.conf
    - scripts/packaging/build-deb-local.sh
    - scripts/packaging/octez/debian/*
    - scripts/version.sh
    when: on_success
  needs:
  - trigger
  trigger:
    include: .gitlab/ci/pipelines/debian_repository_partial_auto.yml
    strategy: depend

trigger:rpm_repository_partial_auto:
  stage: test
  variables:
    PIPELINE_TYPE: before_merging-rpm_repository_partial_auto
    DOCKER_FORCE_BUILD: $DOCKER_FORCE_BUILD
  rules:
  - changes:
    - .gitlab/ci/pipelines/rpm_repository_partial_auto.yml
    - manifest/**/*.ml*
    - rpm-deps-build.Dockerfile
    - scripts/ci/build-packages-dependencies.sh
    - scripts/ci/build-rpm-packages.sh
    - scripts/ci/create_rpm_repo.sh
    - scripts/ci/prepare-apt-rpm-repo.sh
    - scripts/packaging/build-rpm-local.sh
    - scripts/packaging/octez/rpm/*
    - scripts/packaging/tests/rpm/*
    - scripts/version.sh
    when: on_success
  needs:
  - trigger
  trigger:
    include: .gitlab/ci/pipelines/rpm_repository_partial_auto.yml
    strategy: depend

trigger:homebrew_auto:
  stage: test
  variables:
    PIPELINE_TYPE: before_merging-homebrew_auto
    DOCKER_FORCE_BUILD: $DOCKER_FORCE_BUILD
  rules:
  - changes:
    - .gitlab/ci/pipelines/homebrew_auto.yml
    - manifest/**/*.ml*
    - scripts/ci/install-gsutil.sh
    - scripts/packaging/homebrew_install.sh
    - scripts/packaging/homebrew_release.sh
    - scripts/packaging/octez/homebrew/Formula/*
    - scripts/packaging/test_homebrew_install.sh
    - scripts/version.sh
    when: on_success
  needs:
  - trigger
  trigger:
    include: .gitlab/ci/pipelines/homebrew_auto.yml
    strategy: depend

kaitai_checks:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make -C ${CI_PROJECT_DIR} check-kaitai-struct-files || (echo 'Octez encodings
    and Kaitai files seem to be out of sync. You might need to run `make check-kaitai-struct-files`
    and commit the resulting diff.' ; false)
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
  artifacts:
    expire_in: 1 hour
    paths:
    - _build/default/client-libs/bin_codec_kaitai/codec.exe
    when: on_success

kaitai_e2e_checks:
  image: ${client_libs_dependencies_image_name}:${client_libs_dependencies_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: manual
    allow_failure: true
  needs:
  - oc.docker:client-libs-dependencies
  - kaitai_checks
  dependencies:
  - oc.docker:client-libs-dependencies
  - kaitai_checks
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - . ./scripts/install_build_deps.js.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./client-libs/kaitai-struct-files/scripts/kaitai_e2e.sh client-libs/kaitai-struct-files/files
    2>/dev/null
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.check_lift_limits_patch:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - src/bin_tps_evaluation/lift_limits.patch
    - src/proto_alpha/lib_protocol/main.ml
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - '[ $(git apply --numstat src/bin_tps_evaluation/lift_limits.patch | cut -f3) =
    "src/proto_alpha/lib_protocol/main.ml" ]'
  - git apply src/bin_tps_evaluation/lift_limits.patch
  - dune build @src/proto_alpha/lib_protocol/check
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"

oc.python_check:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - '**/*.py'
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - poetry.lock
    - pyproject.toml
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - . $HOME/.venv/bin/activate
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/lint_misc_python_check.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.integration:compiler-rejections:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - dune build @runtest_rejections
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"

oc.script:test-gen-genesis:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - dune build scripts/gen-genesis/gen_genesis.exe
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.script:snapshot_alpha_and_link:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp_very_high_cpu
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - scripts/snapshot_alpha.sh
    - scripts/snapshot_alpha_and_link.sh
    - scripts/user_activated_upgrade.sh
    - src/proto_alpha/**/*
    when: on_success
  needs:
  - job: oc.docker:ci:amd64
  - job: trigger
  - job: oc.build_x86_64-released
    optional: true
  - job: oc.build_amd64-extra-dev
    optional: true
  - job: oc.build_amd64-extra-exp
    optional: true
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: dune-build-cache-$CI_PIPELINE_ID
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: pull
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/script:snapshot_alpha_and_link.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache

oc.script:test_octez_release_versions:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/test_octez_release_version.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.script:b58_prefix:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - scripts/b58_prefix/b58_prefix.py
    - scripts/b58_prefix/test_b58_prefix.py
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - . $HOME/.venv/bin/activate
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - poetry run pylint scripts/b58_prefix/b58_prefix.py --disable=missing-docstring
    --disable=invalid-name
  - poetry run pytest scripts/b58_prefix/test_b58_prefix.py
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.test-liquidity-baking-scripts:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - scripts/check-liquidity-baking-scripts.sh
    - scripts/ci/test_liquidity_baking_scripts.sh
    - src/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/test_liquidity_baking_scripts.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc:scripts:release_script_values:
  image: ${ci_image_name}/prebuild:${ci_image_tag}
  stage: test
  tags:
  - gcp
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - scripts/ci/test_release_values.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

mir_unit:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - contrib/mir/**/*
    - images/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - cargo test --manifest-path contrib/mir/Cargo.toml
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    CARGO_NET_OFFLINE: "false"

mir_tzt:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - contrib/mir/**/*
    - images/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - cargo run --manifest-path contrib/mir/Cargo.toml --bin tzt_runner tzt_reference_test_suite/*.tzt
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    CARGO_NET_OFFLINE: "false"

test_sdk_rust:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - images/create_image.sh
    - images/rust-toolchain/**/*
    - images/scripts/install_datadog_static.sh
    - scripts/version.sh
    - sdk/rust/**/*
    when: on_success
  needs:
  - oc.docker:rust-toolchain:amd64
  - trigger
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make -C sdk/rust check
  - make -C sdk/rust test
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"

test_sdk_bindings:
  image: ${rust_sdk_bindings_image_name}:${rust_sdk_bindings_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - contrib/sdk-bindings
    - images/create_image.sh
    - images/rust-sdk-bindings/**/*
    - images/scripts/install_datadog_static.sh
    - scripts/version.sh
    - sdk/rust/**/*
    when: on_success
  needs:
  - oc.docker:rust-sdk-bindings:amd64
  - trigger
  dependencies:
  - oc.docker:rust-sdk-bindings:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . $HOME/.venv/bin/activate
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make -C contrib/sdk-bindings check
  - make -C contrib/sdk-bindings test
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"

test_kernels:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - images/create_image.sh
    - images/rust-toolchain/**/*
    - images/scripts/install_datadog_static.sh
    - kernels.mk
    - scripts/version.sh
    - sdk/rust/**/*
    - src/kernel_*/**/*
    - src/riscv/**/*
    when: on_success
  needs:
  - oc.docker:rust-toolchain:amd64
  - oc.build_kernels
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make -f kernels.mk check
  - make -f kernels.mk test
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"

audit_riscv_deps:
  image: ${rust_toolchain_image_name_protected}:master
  stage: sanity
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - sdk/rust/**/*
    - src/kernel_sdk/**/*
    - src/riscv/**/*
    when: on_success
  needs: []
  dependencies: []
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make -C src/riscv audit
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"

check_riscv_kernels:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - images/create_image.sh
    - images/rust-toolchain/**/*
    - images/scripts/install_datadog_static.sh
    - scripts/version.sh
    - sdk/rust/**/*
    - src/kernel_sdk/**/*
    - src/riscv/**/*
    when: on_success
  needs:
  - oc.docker:rust-toolchain:amd64
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make -C src/riscv CHECK_FLAGS= EXTRA_FLAGS='--no-default-features --features ci'
    check
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"

ocaml-check:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp_very_high_cpu
  rules:
  - changes:
    - '**/*.ml'
    - '**/*.mli'
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - devtools/**/*
    - src/**/*
    - tezt/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: dune_cache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - dune build @check --stop-on-first-error
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - eval $(opam env)
  - dune cache trim --size=3GB
  variables:
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache

oc.unit:non-proto-x86_64:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: dune-build-cache-$CI_PIPELINE_ID
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: pull
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make $MAKE_TARGETS
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  - ./scripts/ci/merge_coverage.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    ARCH: x86_64
    MAKE_TARGETS: test-nonproto-unit
    DUNE_ARGS: -j 12
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
  artifacts:
    name: coverage-files-$CI_JOB_ID
    expire_in: 1 day
    paths:
    - test_results
    - $BISECT_FILE/$CI_JOB_NAME_SLUG.*
    reports:
      junit: test_results/*.xml
    when: always
  retry: 2

oc.unit:other-x86_64:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp_high_cpu
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: dune-build-cache-$CI_PIPELINE_ID
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: pull
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make $MAKE_TARGETS
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  - ./scripts/ci/merge_coverage.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    ARCH: x86_64
    MAKE_TARGETS: test-other-unit
    DUNE_ARGS: -j 12
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
  artifacts:
    name: coverage-files-$CI_JOB_ID
    expire_in: 1 day
    paths:
    - test_results
    - $BISECT_FILE/$CI_JOB_NAME_SLUG.*
    reports:
      junit: test_results/*.xml
    when: always
  retry: 2

oc.unit:proto-x86_64:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp_very_high_cpu
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: dune-build-cache-$CI_PIPELINE_ID
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: pull
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make $MAKE_TARGETS
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  - ./scripts/ci/merge_coverage.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    ARCH: x86_64
    MAKE_TARGETS: test-proto-unit
    DUNE_ARGS: -j 12
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
  artifacts:
    name: coverage-files-$CI_JOB_ID
    expire_in: 1 day
    paths:
    - test_results
    - $BISECT_FILE/$CI_JOB_NAME_SLUG.*
    reports:
      junit: test_results/*.xml
    when: always
  retry: 2

oc.unit:non-proto-arm64:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp_arm64
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:arm64
  - oc.build_arm64-released
  - oc.build_arm64-extra-dev
  - oc.build_arm64-extra-exp
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make $MAKE_TARGETS
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: arm64
    MAKE_TARGETS: test-nonproto-unit test-webassembly
    DUNE_ARGS: -j 12
    DISTRIBUTE_TESTS_TO_PARALLELS: "true"
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
  artifacts:
    name: $CI_JOB_NAME-$CI_COMMIT_SHA-${ARCH}
    expire_in: 1 day
    paths:
    - test_results
    reports:
      junit: test_results/*.xml
    when: always
  retry: 2
  parallel: 2

oc.unit:webassembly-x86_64:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 20 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - make test-webassembly
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.unit:protocol_compiles:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp_very_high_cpu
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - dune build @runtest_compile_protocol
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"

de.unit:x86_64:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - data-encoding/**
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - dune runtest data-encoding
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

de.unit:arm64:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp_arm64
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - data-encoding/**
    when: on_success
  needs:
  - oc.docker:ci:arm64
  - oc.build_arm64-released
  - oc.build_arm64-extra-dev
  - oc.build_arm64-extra-exp
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - dune runtest data-encoding
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

resto.unit:x86_64:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - resto/**
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 10 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - dune runtest resto
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

resto.unit:arm64:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp_arm64
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - resto/**
    when: on_success
  needs:
  - oc.docker:ci:arm64
  - oc.build_arm64-released
  - oc.build_arm64-extra-dev
  - oc.build_arm64-extra-exp
  dependencies:
  - oc.docker:ci:arm64
  timeout: 10 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - dune runtest resto
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.install_opam_noble:
  image: ${GCP_PROTECTED_REGISTRY}/tezos/tezos/build-ubuntu-noble:master
  stage: test
  tags:
  - gcp_very_high_cpu
  rules:
  - when: manual
    allow_failure: true
  needs: []
  dependencies: []
  allow_failure: true
  timeout: 2 hours
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - apt update
  - apt install -y sudo
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./docs/introduction/install-opam.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    CARGO_NET_OFFLINE: "false"

oc.compile_sources_doc_master:
  image: ${GCP_PROTECTED_REGISTRY}/tezos/tezos/$IMAGE
  stage: test
  tags:
  - gcp_very_high_cpu_ramfs
  rules:
  - changes:
    - docs/introduction/compile-sources.sh
    when: on_success
  - when: manual
    allow_failure: true
  needs:
  - trigger
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./docs/introduction/compile-sources.sh ${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH:-tezos/tezos}
    ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME:-master}
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    CARGO_HOME: /home/opam/.cargo
    CARGO_NET_OFFLINE: "false"
  parallel:
    matrix:
    - IMAGE:
      - build-debian-bookworm:master

oc.unified_coverage:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test_coverage
  tags:
  - gcp
  rules:
  - if: $GITLAB_USER_LOGIN == "nomadic-margebot" || $CI_MERGE_REQUEST_ASSIGNEES =~
      /nomadic-margebot/ || $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
    when: never
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  dependencies:
  - oc.docker:ci:amd64
  - etherlink.unit_tests
  - tezt-flaky
  - tezt-time-sensitive
  - tezt
  - oc.unit:non-proto-x86_64
  - oc.unit:other-x86_64
  - oc.unit:proto-x86_64
  allow_failure:
    exit_codes: 64
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/report_coverage.sh || exit $?
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    TEZOS_WITHOUT_OPAM: "true"
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
    SLACK_COVERAGE_CHANNEL: C02PHBE7W73
  artifacts:
    expire_in: 15 days
    paths:
    - _coverage_report/
    - $BISECT_FILE
    reports:
      coverage_report:
        coverage_format: cobertura
        path: _coverage_report/cobertura.xml
    when: always
    expose_as: Coverage report
  coverage: '/Coverage: ([^%]+%)/'

trigger:homebrew:
  stage: manual
  variables:
    PIPELINE_TYPE: before_merging-homebrew
    DOCKER_FORCE_BUILD: $DOCKER_FORCE_BUILD
  rules:
  - when: manual
    allow_failure: true
  needs: []
  trigger:
    include: .gitlab/ci/pipelines/homebrew.yml
    strategy: depend

trigger:rpm_repository_partial:
  stage: manual
  variables:
    PIPELINE_TYPE: before_merging-rpm_repository_partial
    DOCKER_FORCE_BUILD: $DOCKER_FORCE_BUILD
  rules:
  - when: manual
    allow_failure: true
  needs: []
  trigger:
    include: .gitlab/ci/pipelines/rpm_repository_partial.yml
    strategy: depend

trigger:debian_repository_partial:
  stage: manual
  variables:
    PIPELINE_TYPE: before_merging-debian_repository_partial
    DOCKER_FORCE_BUILD: $DOCKER_FORCE_BUILD
  rules:
  - when: manual
    allow_failure: true
  needs: []
  trigger:
    include: .gitlab/ci/pipelines/debian_repository_partial.yml
    strategy: depend

trigger:base_images:
  stage: manual
  variables:
    PIPELINE_TYPE: before_merging-base_images
    DOCKER_FORCE_BUILD: "true"
  rules:
  - when: manual
    allow_failure: true
  needs: []
  trigger:
    include: .gitlab/ci/pipelines/base_images.yml
    strategy: depend

trigger:security-scans-master:
  stage: manual
  variables:
    PIPELINE_TYPE: before_merging-security-scans-master
    DOCKER_FORCE_BUILD: $DOCKER_FORCE_BUILD
  rules:
  - when: manual
    allow_failure: true
  needs: []
  trigger:
    include: .gitlab/ci/pipelines/security-scans-master.yml
    strategy: depend

oc.docker:amd64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: manual
  tags:
  - gcp
  rules:
  - changes:
    - Dockerfile
    - build.Dockerfile
    when: on_success
  - when: manual
    allow_failure: true
  needs:
  - oc.docker:rust-toolchain:amd64
  - oc.docker:ci:amd64
  dependencies:
  - oc.docker:rust-toolchain:amd64
  - oc.docker:ci:amd64
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/docker_initialize.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_release.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
    DOCKER_BUILD_TARGET: with-evm-artifacts
    IMAGE_ARCH_PREFIX: amd64_
    EXECUTABLE_FILES: script-inputs/released-executables script-inputs/experimental-executables

oc.docker:arm64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: manual
  tags:
  - gcp_arm64
  rules:
  - changes:
    - Dockerfile
    - build.Dockerfile
    when: on_success
  - when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:arm64
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/docker_initialize.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_release.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
    DOCKER_BUILD_TARGET: without-evm-artifacts
    IMAGE_ARCH_PREFIX: arm64_
    EXECUTABLE_FILES: script-inputs/released-executables script-inputs/experimental-executables

oc.script.docker_verify_image_arm64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: manual
  tags:
  - gcp
  rules:
  - when: manual
    allow_failure: true
  needs:
  - oc.docker:arm64
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/docker_initialize.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_verify_signature.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    IMAGE_ARCH_PREFIX: arm64_

oc.script.docker_verify_image_amd64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: manual
  tags:
  - gcp
  rules:
  - when: manual
    allow_failure: true
  needs:
  - oc.docker:amd64
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/docker_initialize.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_verify_signature.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    IMAGE_ARCH_PREFIX: amd64_

select_tezts:
  image: ${ci_image_name}/prebuild:${ci_image_tag}
  stage: build
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  dependencies:
  - oc.docker:ci:amd64
  allow_failure:
    exit_codes: 17
  timeout: 60 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/take_ownership.sh
  - eval $(opam env)
  - scripts/ci/select_tezts.sh || exit $?
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  artifacts:
    expire_in: 3 days
    paths:
    - selected_tezts.tsl
    when: always

etherlink.lint_wasm_runtime:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - src/lib_wasm_runtime/**/*.rs
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - etherlink/lib_wasm_runtime/lint.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"

etherlink.unit_tests:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - etherlink/**/*
    - sdk/rust/**/*
    - src/kernel_sdk/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: dune_cache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: pull-push
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - . ./scripts/version.sh
  - eval $(opam env)
  - make test-etherlink-unit
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  - ./scripts/ci/merge_coverage.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    DUNE_ARGS: -j 12
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
  artifacts:
    name: coverage-files-$CI_JOB_ID
    expire_in: 1 day
    paths:
    - test_results
    - $BISECT_FILE/$CI_JOB_NAME_SLUG.*
    reports:
      junit: test_results/*.xml
    when: always
  retry: 2

documentation.rst-check:
  image: ${ci_image_name_protected}/test:amd64--master
  stage: sanity
  tags:
  - gcp
  rules:
  - changes:
    - '**/*.rst'
    when: on_success
  needs: []
  dependencies: []
  timeout: 60 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - . $HOME/.venv/bin/activate
  - make --silent -C docs sphinx-check
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

documentation.docgen:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: build
  tags:
  - gcp
  rules:
  - if: $CI_MERGE_REQUEST_LABELS =~ /(?:^|,)ci--docs(?:$|,)/
    when: on_success
  - changes:
    - '**/*.rst'
    - brassaia/**/*.ml*
    - client-libs/**/*.ml*
    - data-encoding/**/*.ml*
    - docs/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*.ml*
    - grafazos/doc/**/*
    - irmin/**/*.ml*
    - script-inputs/**/*/
    - scripts/**/*/
    - src/**/*.ml*
    - tezt/**/*.ml*
    - vendors/**/*.ml*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - eval $(opam env)
  - make -C docs -j docexes-gen
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
  artifacts:
    expire_in: 1 week
    paths:
    - docs/alpha/rpc.rst
    - docs/shell/rpc.rst
    - docs/user/default-acl.json
    - docs/api/errors.rst
    - docs/shell/p2p_api.rst

grafazos.build:
  image: ${jsonnet_image_name}:${jsonnet_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - grafazos/**/*
    when: on_success
  needs:
  - oc.docker:jsonnet:amd64
  - trigger
  dependencies:
  - oc.docker:jsonnet:amd64
  timeout: 60 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - cd grafazos/
  - jb install github.com/grafana/grafonnet/gen/grafonnet-v11.1.0@1ce5aec
  - make
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  artifacts:
    name: grafazos-dashboards
    expire_in: 1 day
    paths:
    - grafazos/output/**/*.json
    when: on_success

teztale.build-arm64:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp_arm64
  rules:
  - changes:
    - teztale/**/*
    when: on_success
  needs:
  - oc.docker:ci:arm64
  - trigger
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - make teztale
  - mkdir -p ./teztale-binaries/arm64
  - mv octez-teztale-* ./teztale-binaries/arm64/
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    PROFILE: static
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
  artifacts:
    name: teztale-binaries
    expire_in: 1 day
    paths:
    - teztale-binaries/arm64/octez-teztale-*
    when: on_success

teztale.build-x86_64:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp_very_high_cpu_ramfs
  rules:
  - changes:
    - teztale/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - make teztale
  - mkdir -p ./teztale-binaries/x86_64
  - mv octez-teztale-* ./teztale-binaries/x86_64/
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    PROFILE: static
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
  artifacts:
    name: teztale-binaries
    expire_in: 1 day
    paths:
    - teztale-binaries/x86_64/octez-teztale-*
    when: on_success

documentation.manuals:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: build
  tags:
  - gcp
  rules:
  - if: $CI_MERGE_REQUEST_LABELS =~ /(?:^|,)ci--docs(?:$|,)/
    when: on_success
  - changes:
    - '**/*.rst'
    - brassaia/**/*.ml*
    - client-libs/**/*.ml*
    - data-encoding/**/*.ml*
    - docs/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*.ml*
    - grafazos/doc/**/*
    - irmin/**/*.ml*
    - script-inputs/**/*/
    - scripts/**/*/
    - src/**/*.ml*
    - tezt/**/*.ml*
    - vendors/**/*.ml*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  - oc.build_kernels
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  - oc.build_kernels
  timeout: 60 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - eval $(opam env)
  - make -C docs -j octez-gen
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  artifacts:
    expire_in: 1 week
    paths:
    - docs/*/octez-*.html
    - docs/api/octez-*.txt
    - docs/developer/metrics.csv
    - docs/developer/rollup_metrics.csv
    - docs/user/node-config.json

documentation.odoc:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: build
  tags:
  - gcp
  rules:
  - if: $CI_MERGE_REQUEST_LABELS =~ /(?:^|,)ci--docs(?:$|,)/
    when: on_success
  - changes:
    - '**/*.rst'
    - brassaia/**/*.ml*
    - client-libs/**/*.ml*
    - data-encoding/**/*.ml*
    - docs/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*.ml*
    - grafazos/doc/**/*
    - irmin/**/*.ml*
    - script-inputs/**/*/
    - scripts/**/*/
    - src/**/*.ml*
    - tezt/**/*.ml*
    - vendors/**/*.ml*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - eval $(opam env)
  - make -C docs odoc-lite
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
  artifacts:
    expire_in: 4 hours
    paths:
    - docs/_build/api/odoc/
    - docs/odoc.log
    when: always

documentation.build_all:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: build
  tags:
  - gcp
  rules:
  - if: $CI_MERGE_REQUEST_LABELS =~ /(?:^|,)ci--docs(?:$|,)/
    when: on_success
  - changes:
    - '**/*.rst'
    - brassaia/**/*.ml*
    - client-libs/**/*.ml*
    - data-encoding/**/*.ml*
    - docs/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*.ml*
    - grafazos/doc/**/*
    - irmin/**/*.ml*
    - script-inputs/**/*/
    - scripts/**/*/
    - src/**/*.ml*
    - tezt/**/*.ml*
    - vendors/**/*.ml*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  - documentation.odoc
  - documentation.manuals
  - documentation.docgen
  dependencies:
  - oc.docker:ci:amd64
  - documentation.odoc
  - documentation.manuals
  - documentation.docgen
  timeout: 60 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - eval $(opam env)
  - . $HOME/.venv/bin/activate
  - make -C docs -j sphinx
  - make -C docs -j _build/octezdoc.txt
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  artifacts:
    expire_in: 1 week
    paths:
    - docs/_build/
    expose_as: Documentation - excluding old protocols

documentation.linkcheck:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - if: $CI_MERGE_REQUEST_LABELS =~ /(?:^|,)ci--docs(?:$|,)/
    when: manual
    allow_failure: true
  - changes:
    - '**/*.rst'
    - brassaia/**/*.ml*
    - client-libs/**/*.ml*
    - data-encoding/**/*.ml*
    - docs/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*.ml*
    - grafazos/doc/**/*
    - irmin/**/*.ml*
    - script-inputs/**/*/
    - scripts/**/*/
    - src/**/*.ml*
    - tezt/**/*.ml*
    - vendors/**/*.ml*
    when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:amd64
  - trigger
  - documentation.manuals
  - documentation.docgen
  - documentation.build_all
  dependencies:
  - oc.docker:ci:amd64
  - documentation.manuals
  - documentation.docgen
  - documentation.build_all
  allow_failure: true
  timeout: 60 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - . ./scripts/version.sh
  - eval $(opam env)
  - . $HOME/.venv/bin/activate
  - make -C docs redirectcheck
  - make -C docs linkcheck
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

documentation.install_python_bookworm:
  image: ${GCP_PROTECTED_REGISTRY}/tezos/tezos/debian:bookworm
  stage: test
  tags:
  - gcp
  rules:
  - if: $CI_MERGE_REQUEST_LABELS =~ /(?:^|,)ci--docs(?:$|,)/
    when: on_success
  - changes:
    - docs/developer/install-python-debian-ubuntu.sh
    - poetry.lock
    - pyproject.toml
    when: on_success
  needs:
  - trigger
  dependencies: []
  timeout: 60 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./docs/developer/install-python-debian-ubuntu.sh ${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH:-tezos/tezos}
    ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME:-master}
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

etherlink.test_revm_compatibility:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - etherlink.mk
    - etherlink/kernel_latest/revm/**/*
    - etherlink/kernel_latest/revm_evaluation/**/*
    - images/create_image.sh
    - images/rust-toolchain/**/*
    - images/scripts/install_datadog_static.sh
    - scripts/version.sh
    when: on_success
  needs:
  - oc.docker:rust-toolchain:amd64
  - trigger
  - oc.build_kernels
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make -f etherlink.mk EVM_EVALUATION_FEATURES=disable-file-logs revm-evaluation-assessor
  - git clone --depth 1 https://github.com/functori/evm-fixtures evm_fixtures
  - ./revm-evaluation-assessor --test-cases ./evm_fixtures/
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"

etherlink.test_evm_compatibility:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - etherlink.mk
    - etherlink/kernel_latest/evm_evaluation/**/*
    - etherlink/kernel_latest/revm/**/*
    - images/create_image.sh
    - images/rust-toolchain/**/*
    - images/scripts/install_datadog_static.sh
    - scripts/version.sh
    when: on_success
  needs:
  - oc.docker:rust-toolchain:amd64
  - trigger
  - oc.build_kernels
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make -f etherlink.mk EVM_EVALUATION_FEATURES=disable-file-logs evm-evaluation-assessor
  - git clone --depth 1 --branch v14.1@etherlink https://github.com/functori/tests
    ethereum_tests
  - ./evm-evaluation-assessor --eth-tests ./ethereum_tests/ --resources ./etherlink/kernel_latest/evm_evaluation/resources/
    -c
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"

etherlink.test_firehose:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - etherlink/firehose/**/*
    - etherlink/tezt/tests/evm_kernel_inputs/erc20tok.*
    - images/create_image.sh
    - images/rust-toolchain/**/*
    - images/scripts/install_datadog_static.sh
    - scripts/version.sh
    when: on_success
  needs:
  - oc.docker:rust-toolchain:amd64
  - trigger
  - oc.build_kernels
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make -C etherlink/firehose check
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"

etherlink.test_kernel:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - etherlink.mk
    - etherlink/**/*.rs
    - images/create_image.sh
    - images/rust-toolchain/**/*
    - images/scripts/install_datadog_static.sh
    - scripts/version.sh
    - sdk/rust/**/*
    - src/kernel_sdk/**/*
    when: on_success
  needs:
  - oc.docker:rust-toolchain:amd64
  - trigger
  - oc.build_kernels
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make -f etherlink.mk check
  - make -f etherlink.mk test
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"

etherlink.build_evm_node_static_arm64:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp_arm64
  rules:
  - changes:
    - etherlink/**/*
    - sdk/rust/**/*
    - src/kernel_sdk/**/*
    when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:arm64
  - trigger
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - make evm-node-static
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
  artifacts:
    name: evm-binaries
    paths:
    - octez-evm-*
    - etherlink-*
    when: on_success

etherlink.build_evm_node_static_x86_64:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp_very_high_cpu
  rules:
  - changes:
    - etherlink/**/*
    - sdk/rust/**/*
    - src/kernel_sdk/**/*
    when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:amd64
  - trigger
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - make evm-node-static
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
  artifacts:
    name: evm-binaries
    paths:
    - octez-evm-*
    - etherlink-*
    when: on_success

teztrec_schedule_extended_test:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  dependencies:
  - oc.docker:ci:amd64
  allow_failure: true
  timeout: 60 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - dune exec scripts/ci/update_records/update.exe -- --info --log-file tezt-fetch-records.log
    --from last-successful-scheduled:schedule_extended_test
  - ./scripts/ci/filter_corrupted_records.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  artifacts:
    expire_in: 4 hours
    paths:
    - tezt-fetch-records.log
    - tezt/records/**.json
    - tezt/records/**.json.broken
    when: always

tezt-static-binaries:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  - oc.build:static-x86_64-linux-binaries
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - teztrec_schedule_extended_test
  - select_tezts
  dependencies:
  - oc.docker:ci:amd64
  - oc.build:static-x86_64-linux-binaries
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - teztrec_schedule_extended_test
  - select_tezts
  timeout: 40 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - mv octez-binaries/x86_64/octez-* .
  - . ./scripts/version.sh
  - echo "TESTS=\"${TESTS}\" JUNIT=\"${JUNIT}\" CI_NODE_INDEX=\"${CI_NODE_INDEX}\"
    CI_NODE_TOTAL=\"${CI_NODE_TOTAL}\" TEZT_PARALLEL=\"${TEZT_PARALLEL}\" TEZT_VARIANT=\"${TEZT_VARIANT}\""
  - ./scripts/ci/tezt.sh --with-select-tezts -- "${TESTS}" --from-record tezt/records/static-binaries
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --list-tsv > selected_tezts.tsv
  - ./scripts/ci/exit_code.sh timeout -k 60 1860 ./scripts/ci/tezt.sh --send-junit
    ${JUNIT} --with-select-tezts -- "${TESTS}" --color --log-buffer-size 5000 --log-file
    tezt.log --global-timeout 1800 --test-timeout 540 --on-unknown-regression-files
    fail --junit ${JUNIT} --junit-mem-peak 'dd_tags[memory.peak]' --from-record tezt/records/static-binaries
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --record tezt-results.json --job-count
    ${TEZT_PARALLEL} --retry ${TEZT_RETRY} --record-mem-peak --mem-warn 5_000_000_000
    --junit-tag 'dd_tags[tezt-tag.flaky]=flaky' --junit-tag 'dd_tags[tezt-tag.time_sensitive]=time_sensitive'
    --junit-tag 'dd_tags[tezt-tag.slow]=slow' --junit-tag 'dd_tags[tezt-tag.extra]=extra'
    --junit-tag 'dd_tags[tezt-tag.infrastructure]=infrastructure' --junit-tag 'dd_tags[tezt-tag.layer1]=layer1'
    --junit-tag 'dd_tags[tezt-tag.tezos2]=tezos2' --junit-tag 'dd_tags[tezt-tag.etherlink]=etherlink'
    --junit-tag 'dd_tags[tezt-tag.memory_hungry]=memory_hungry'
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    JUNIT: tezt-junit.xml
    TEZT_VARIANT: -static-binaries
    TESTS: /ci_disabled && /time_sensitive && /slow && /extra && /cloud && cli &&
      /flaky
    TEZT_RETRY: "1"
    TEZT_PARALLEL: "3"
    TEZT_NO_NPX: "true"
  artifacts:
    expire_in: 7 days
    paths:
    - selected_tezts.tsv
    - tezt.log
    - tezt-*.log
    - tezt-results.json
    - $JUNIT
    reports:
      junit: $JUNIT
    when: always

tezt-flaky:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test
  tags:
  - gcp_tezt
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:amd64
  - trigger
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - teztrec_schedule_extended_test
  - select_tezts
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - teztrec_schedule_extended_test
  - select_tezts
  allow_failure: true
  timeout: 40 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - . ./scripts/version.sh
  - echo "TESTS=\"${TESTS}\" JUNIT=\"${JUNIT}\" CI_NODE_INDEX=\"${CI_NODE_INDEX}\"
    CI_NODE_TOTAL=\"${CI_NODE_TOTAL}\" TEZT_PARALLEL=\"${TEZT_PARALLEL}\" TEZT_VARIANT=\"${TEZT_VARIANT}\""
  - ./scripts/ci/tezt.sh --with-select-tezts -- "${TESTS}" --from-record tezt/records/flaky
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --list-tsv > selected_tezts.tsv
  - ./scripts/ci/exit_code.sh timeout -k 60 1860 ./scripts/ci/tezt.sh --send-junit
    ${JUNIT} --with-select-tezts -- "${TESTS}" --color --log-buffer-size 5000 --log-file
    tezt.log --global-timeout 1800 --test-timeout 540 --on-unknown-regression-files
    fail --junit ${JUNIT} --junit-mem-peak 'dd_tags[memory.peak]' --from-record tezt/records/flaky
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --record tezt-results.json --job-count
    ${TEZT_PARALLEL} --retry ${TEZT_RETRY} --record-mem-peak --mem-warn 5_000_000_000
    --junit-tag 'dd_tags[tezt-tag.flaky]=flaky' --junit-tag 'dd_tags[tezt-tag.time_sensitive]=time_sensitive'
    --junit-tag 'dd_tags[tezt-tag.slow]=slow' --junit-tag 'dd_tags[tezt-tag.extra]=extra'
    --junit-tag 'dd_tags[tezt-tag.infrastructure]=infrastructure' --junit-tag 'dd_tags[tezt-tag.layer1]=layer1'
    --junit-tag 'dd_tags[tezt-tag.tezos2]=tezos2' --junit-tag 'dd_tags[tezt-tag.etherlink]=etherlink'
    --junit-tag 'dd_tags[tezt-tag.memory_hungry]=memory_hungry'
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  - ./scripts/ci/merge_coverage.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    JUNIT: tezt-junit.xml
    TEZT_VARIANT: -flaky
    TESTS: /ci_disabled && /time_sensitive && /slow && /extra && /cloud && flaky
    TEZT_RETRY: "3"
    TEZT_PARALLEL: "1"
    TEZT_NO_NPX: "true"
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
  artifacts:
    name: coverage-files-$CI_JOB_ID
    expire_in: 7 days
    paths:
    - selected_tezts.tsv
    - tezt.log
    - tezt-*.log
    - tezt-results.json
    - $JUNIT
    - $BISECT_FILE/$CI_JOB_NAME_SLUG.*
    reports:
      junit: $JUNIT
    when: always
  retry: 2

tezt-extra:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test
  tags:
  - gcp_tezt
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:amd64
  - trigger
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - teztrec_schedule_extended_test
  - select_tezts
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - teztrec_schedule_extended_test
  - select_tezts
  timeout: 40 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - . ./scripts/version.sh
  - echo "TESTS=\"${TESTS}\" JUNIT=\"${JUNIT}\" CI_NODE_INDEX=\"${CI_NODE_INDEX}\"
    CI_NODE_TOTAL=\"${CI_NODE_TOTAL}\" TEZT_PARALLEL=\"${TEZT_PARALLEL}\" TEZT_VARIANT=\"${TEZT_VARIANT}\""
  - ./scripts/ci/tezt.sh --with-select-tezts -- "${TESTS}" --from-record tezt/records/extra
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --list-tsv > selected_tezts.tsv
  - ./scripts/ci/exit_code.sh timeout -k 60 1860 ./scripts/ci/tezt.sh --send-junit
    ${JUNIT} --with-select-tezts -- "${TESTS}" --color --log-buffer-size 5000 --log-file
    tezt.log --global-timeout 1800 --test-timeout 540 --on-unknown-regression-files
    fail --junit ${JUNIT} --junit-mem-peak 'dd_tags[memory.peak]' --from-record tezt/records/extra
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --record tezt-results.json --job-count
    ${TEZT_PARALLEL} --retry ${TEZT_RETRY} --record-mem-peak --mem-warn 5_000_000_000
    --junit-tag 'dd_tags[tezt-tag.flaky]=flaky' --junit-tag 'dd_tags[tezt-tag.time_sensitive]=time_sensitive'
    --junit-tag 'dd_tags[tezt-tag.slow]=slow' --junit-tag 'dd_tags[tezt-tag.extra]=extra'
    --junit-tag 'dd_tags[tezt-tag.infrastructure]=infrastructure' --junit-tag 'dd_tags[tezt-tag.layer1]=layer1'
    --junit-tag 'dd_tags[tezt-tag.tezos2]=tezos2' --junit-tag 'dd_tags[tezt-tag.etherlink]=etherlink'
    --junit-tag 'dd_tags[tezt-tag.memory_hungry]=memory_hungry'
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    JUNIT: tezt-junit.xml
    TEZT_VARIANT: -extra
    TESTS: extra && /ci_disabled && /time_sensitive && /slow && /cloud && /flaky
    TEZT_RETRY: "1"
    TEZT_PARALLEL: "6"
    TEZT_NO_NPX: "true"
  artifacts:
    expire_in: 7 days
    paths:
    - selected_tezts.tsv
    - tezt.log
    - tezt-*.log
    - tezt-results.json
    - $JUNIT
    reports:
      junit: $JUNIT
    when: always
  retry: 2
  parallel: 10

tezt-slow:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test
  tags:
  - gcp_tezt
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:amd64
  - trigger
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - teztrec_schedule_extended_test
  - select_tezts
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - teztrec_schedule_extended_test
  - select_tezts
  timeout: 40 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - . ./scripts/version.sh
  - echo "TESTS=\"${TESTS}\" JUNIT=\"${JUNIT}\" CI_NODE_INDEX=\"${CI_NODE_INDEX}\"
    CI_NODE_TOTAL=\"${CI_NODE_TOTAL}\" TEZT_PARALLEL=\"${TEZT_PARALLEL}\" TEZT_VARIANT=\"${TEZT_VARIANT}\""
  - ./scripts/ci/tezt.sh --with-select-tezts -- "${TESTS}" --from-record tezt/records/slow
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --list-tsv > selected_tezts.tsv
  - ./scripts/ci/exit_code.sh timeout -k 60 1860 ./scripts/ci/tezt.sh --send-junit
    ${JUNIT} --with-select-tezts -- "${TESTS}" --color --log-buffer-size 5000 --log-file
    tezt.log --global-timeout 1800 --on-unknown-regression-files fail --junit ${JUNIT}
    --junit-mem-peak 'dd_tags[memory.peak]' --from-record tezt/records/slow --job
    ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --record tezt-results.json --job-count
    ${TEZT_PARALLEL} --retry ${TEZT_RETRY} --record-mem-peak --mem-warn 5_000_000_000
    --junit-tag 'dd_tags[tezt-tag.flaky]=flaky' --junit-tag 'dd_tags[tezt-tag.time_sensitive]=time_sensitive'
    --junit-tag 'dd_tags[tezt-tag.slow]=slow' --junit-tag 'dd_tags[tezt-tag.extra]=extra'
    --junit-tag 'dd_tags[tezt-tag.infrastructure]=infrastructure' --junit-tag 'dd_tags[tezt-tag.layer1]=layer1'
    --junit-tag 'dd_tags[tezt-tag.tezos2]=tezos2' --junit-tag 'dd_tags[tezt-tag.etherlink]=etherlink'
    --junit-tag 'dd_tags[tezt-tag.memory_hungry]=memory_hungry'
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    JUNIT: tezt-junit.xml
    TEZT_VARIANT: -slow
    TESTS: slow && /ci_disabled && /time_sensitive && /extra && /cloud
    TEZT_RETRY: "1"
    TEZT_PARALLEL: "3"
    TEZT_NO_NPX: "true"
  artifacts:
    expire_in: 7 days
    paths:
    - selected_tezts.tsv
    - tezt.log
    - tezt-*.log
    - tezt-results.json
    - $JUNIT
    reports:
      junit: $JUNIT
    when: always
  retry: 2
  parallel: 20

tezt-riscv-slow-sequential:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test
  tags:
  - gcp_tezt
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:amd64
  - trigger
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - teztrec_schedule_extended_test
  - select_tezts
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - teztrec_schedule_extended_test
  - select_tezts
  timeout: 40 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - . ./scripts/version.sh
  - echo "TESTS=\"${TESTS}\" JUNIT=\"${JUNIT}\" CI_NODE_INDEX=\"${CI_NODE_INDEX}\"
    CI_NODE_TOTAL=\"${CI_NODE_TOTAL}\" TEZT_PARALLEL=\"${TEZT_PARALLEL}\" TEZT_VARIANT=\"${TEZT_VARIANT}\""
  - ./scripts/ci/tezt.sh --with-select-tezts -- "${TESTS}" --from-record tezt/records/riscv-slow-sequential
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --list-tsv > selected_tezts.tsv
  - ./scripts/ci/exit_code.sh timeout -k 60 1860 ./scripts/ci/tezt.sh --send-junit
    ${JUNIT} --with-select-tezts -- "${TESTS}" --color --log-buffer-size 5000 --log-file
    tezt.log --global-timeout 1800 --on-unknown-regression-files fail --junit ${JUNIT}
    --junit-mem-peak 'dd_tags[memory.peak]' --from-record tezt/records/riscv-slow-sequential
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --record tezt-results.json --job-count
    ${TEZT_PARALLEL} --retry ${TEZT_RETRY} --record-mem-peak --mem-warn 5_000_000_000
    --junit-tag 'dd_tags[tezt-tag.flaky]=flaky' --junit-tag 'dd_tags[tezt-tag.time_sensitive]=time_sensitive'
    --junit-tag 'dd_tags[tezt-tag.slow]=slow' --junit-tag 'dd_tags[tezt-tag.extra]=extra'
    --junit-tag 'dd_tags[tezt-tag.infrastructure]=infrastructure' --junit-tag 'dd_tags[tezt-tag.layer1]=layer1'
    --junit-tag 'dd_tags[tezt-tag.tezos2]=tezos2' --junit-tag 'dd_tags[tezt-tag.etherlink]=etherlink'
    --junit-tag 'dd_tags[tezt-tag.memory_hungry]=memory_hungry'
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    JUNIT: tezt-junit.xml
    TEZT_VARIANT: -riscv-slow-sequential
    TESTS: riscv_slow_sequential
    TEZT_RETRY: "1"
    TEZT_PARALLEL: "1"
    TEZT_NO_NPX: "true"
  artifacts:
    expire_in: 7 days
    paths:
    - selected_tezts.tsv
    - tezt.log
    - tezt-*.log
    - tezt-results.json
    - $JUNIT
    reports:
      junit: $JUNIT
    when: always
  retry: 2

tezt-time-sensitive:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test
  tags:
  - gcp_tezt
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - teztrec_schedule_extended_test
  - select_tezts
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - teztrec_schedule_extended_test
  - select_tezts
  timeout: 40 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - . ./scripts/version.sh
  - echo "TESTS=\"${TESTS}\" JUNIT=\"${JUNIT}\" CI_NODE_INDEX=\"${CI_NODE_INDEX}\"
    CI_NODE_TOTAL=\"${CI_NODE_TOTAL}\" TEZT_PARALLEL=\"${TEZT_PARALLEL}\" TEZT_VARIANT=\"${TEZT_VARIANT}\""
  - ./scripts/ci/tezt.sh --with-select-tezts -- "${TESTS}" --from-record tezt/records/time-sensitive
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --list-tsv > selected_tezts.tsv
  - ./scripts/ci/exit_code.sh timeout -k 60 1860 ./scripts/ci/tezt.sh --send-junit
    ${JUNIT} --with-select-tezts -- "${TESTS}" --color --log-buffer-size 5000 --log-file
    tezt.log --global-timeout 1800 --test-timeout 540 --on-unknown-regression-files
    fail --junit ${JUNIT} --junit-mem-peak 'dd_tags[memory.peak]' --from-record tezt/records/time-sensitive
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --record tezt-results.json --job-count
    ${TEZT_PARALLEL} --retry ${TEZT_RETRY} --record-mem-peak --mem-warn 5_000_000_000
    --junit-tag 'dd_tags[tezt-tag.flaky]=flaky' --junit-tag 'dd_tags[tezt-tag.time_sensitive]=time_sensitive'
    --junit-tag 'dd_tags[tezt-tag.slow]=slow' --junit-tag 'dd_tags[tezt-tag.extra]=extra'
    --junit-tag 'dd_tags[tezt-tag.infrastructure]=infrastructure' --junit-tag 'dd_tags[tezt-tag.layer1]=layer1'
    --junit-tag 'dd_tags[tezt-tag.tezos2]=tezos2' --junit-tag 'dd_tags[tezt-tag.etherlink]=etherlink'
    --junit-tag 'dd_tags[tezt-tag.memory_hungry]=memory_hungry'
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  - ./scripts/ci/merge_coverage.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    JUNIT: tezt-junit.xml
    TEZT_VARIANT: -time-sensitive
    TESTS: time_sensitive && /ci_disabled && /slow && /extra && /cloud
    TEZT_RETRY: "1"
    TEZT_PARALLEL: "1"
    TEZT_NO_NPX: "true"
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
  artifacts:
    name: coverage-files-$CI_JOB_ID
    expire_in: 7 days
    paths:
    - selected_tezts.tsv
    - tezt.log
    - tezt-*.log
    - tezt-results.json
    - $JUNIT
    - $BISECT_FILE/$CI_JOB_NAME_SLUG.*
    reports:
      junit: $JUNIT
    when: always
  retry: 2

tezt:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test
  tags:
  - gcp_tezt
  rules:
  - changes:
    - .gitlab-ci.yml
    - .gitlab/ci/pipelines/before_merging.yml
    - .gitlab/ci/pipelines/merge_train.yml
    - Makefile
    - brassaia-eio/**/*
    - brassaia/**/*
    - data-encoding/**/*
    - dune
    - dune-project
    - dune-workspace
    - etherlink/**/*
    - irmin/**/*
    - lwt_domain/**/*
    - michelson_test_scripts/**/*
    - opam/**/*
    - prometheus/**/*
    - resto/**/*
    - rust-toolchain
    - script-inputs/**/*
    - scripts/**/*
    - sdk/**/*
    - src/**/*
    - tezt/**/*
    - tzt_reference_test_suite/**/*
    when: on_success
  needs:
  - oc.docker:ci:amd64
  - trigger
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - teztrec_schedule_extended_test
  - select_tezts
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - teztrec_schedule_extended_test
  - select_tezts
  timeout: 40 minutes
  interruptible: true
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - . ./scripts/version.sh
  - echo "TESTS=\"${TESTS}\" JUNIT=\"${JUNIT}\" CI_NODE_INDEX=\"${CI_NODE_INDEX}\"
    CI_NODE_TOTAL=\"${CI_NODE_TOTAL}\" TEZT_PARALLEL=\"${TEZT_PARALLEL}\" TEZT_VARIANT=\"${TEZT_VARIANT}\""
  - ./scripts/ci/tezt.sh --with-select-tezts -- "${TESTS}" --from-record tezt/records
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --list-tsv > selected_tezts.tsv
  - ./scripts/ci/exit_code.sh timeout -k 60 1860 ./scripts/ci/tezt.sh --send-junit
    ${JUNIT} --with-select-tezts -- "${TESTS}" --color --log-buffer-size 5000 --log-file
    tezt.log --global-timeout 1800 --test-timeout 540 --on-unknown-regression-files
    fail --junit ${JUNIT} --junit-mem-peak 'dd_tags[memory.peak]' --from-record tezt/records
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --record tezt-results.json --job-count
    ${TEZT_PARALLEL} --retry ${TEZT_RETRY} --record-mem-peak --mem-warn 5_000_000_000
    --junit-tag 'dd_tags[tezt-tag.flaky]=flaky' --junit-tag 'dd_tags[tezt-tag.time_sensitive]=time_sensitive'
    --junit-tag 'dd_tags[tezt-tag.slow]=slow' --junit-tag 'dd_tags[tezt-tag.extra]=extra'
    --junit-tag 'dd_tags[tezt-tag.infrastructure]=infrastructure' --junit-tag 'dd_tags[tezt-tag.layer1]=layer1'
    --junit-tag 'dd_tags[tezt-tag.tezos2]=tezos2' --junit-tag 'dd_tags[tezt-tag.etherlink]=etherlink'
    --junit-tag 'dd_tags[tezt-tag.memory_hungry]=memory_hungry'
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  - ./scripts/ci/merge_coverage.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    JUNIT: tezt-junit.xml
    TEZT_VARIANT: ""
    TESTS: /ci_disabled && /time_sensitive && /slow && /extra && /cloud && /flaky
    TEZT_RETRY: "1"
    TEZT_PARALLEL: "6"
    TEZT_NO_NPX: "true"
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
  artifacts:
    name: coverage-files-$CI_JOB_ID
    expire_in: 7 days
    paths:
    - selected_tezts.tsv
    - tezt.log
    - tezt-*.log
    - tezt-results.json
    - $JUNIT
    - $BISECT_FILE/$CI_JOB_NAME_SLUG.*
    reports:
      junit: $JUNIT
    when: always
  retry: 2
  parallel: 50
