# This file was automatically generated, do not edit.
# Edit file ci/bin/main.ml instead.

stages:
- start
- images
- build
- test_coverage
- publish
- manual

oc.docker:ci:amd64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: images
  tags:
  - gcp
  dependencies: []
  timeout: 90 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./images/ci_create_ci_images.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
    ARCH: amd64
  artifacts:
    reports:
      dotenv: ci_image_tag.env

oc.docker:rust-toolchain:amd64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: images
  tags:
  - gcp
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_rust_toolchain_build.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
    IMAGE: ${GCP_PROTECTED_REGISTRY}/tezos/tezos/debian-rust:unstable
  artifacts:
    reports:
      dotenv: rust_toolchain_image_tag.env

oc.docker:ci:arm64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: images
  tags:
  - gcp_arm64
  dependencies: []
  timeout: 90 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./images/ci_create_ci_images.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
    ARCH: arm64
  artifacts:
    reports:
      dotenv: ci_image_tag.env
  retry:
    max: 1
    when:
    - runner_system_failure

oc.build:static-x86_64-linux-binaries:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_very_high_cpu_ramfs
  rules:
  - when: always
  needs:
  - oc.docker:ci:amd64
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/build_static_binaries.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: x86_64
    EXECUTABLE_FILES: script-inputs/octez-released-executables script-inputs/octez-experimental-executables
    DUNE_BUILD_JOBS: -j 12
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    paths:
    - octez-binaries/$ARCH/*

oc.build:static-arm64-linux-binaries:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_arm64
  rules:
  - when: always
  needs:
  - oc.docker:ci:arm64
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/build_static_binaries.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: arm64
    EXECUTABLE_FILES: script-inputs/octez-released-executables script-inputs/octez-experimental-executables
    DUNE_BUILD_JOBS: -j 12
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    paths:
    - octez-binaries/$ARCH/*

oc.build_arm64-released:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_arm64
  rules:
  - when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:arm64
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/build_full_unreleased.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: arm64
    EXECUTABLE_FILES: script-inputs/released-executables
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - src/proto_*/parameters/*.json
    when: on_success

oc.build_arm64-extra-dev:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_arm64
  rules:
  - when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:arm64
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/build_full_unreleased.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: arm64
    EXECUTABLE_FILES: script-inputs/dev-executables
    BUILD_EXTRA: src/bin_tps_evaluation/main_tps_evaluation.exe src/bin_octogram/octogram_main.exe
      tezt/tests/main.exe
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - octez-teztale-*
    - src/proto_*/parameters/*.json
    - _build/default/src/lib_protocol_compiler/bin/main_native.exe
    - _build/default/tezt/tests/main.exe
    - _build/default/contrib/octez_injector_server/octez_injector_server.exe
    - etherlink-governance-observer
    when: on_success

oc.build_arm64-extra-exp:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_arm64
  rules:
  - when: manual
    allow_failure: true
  needs:
  - oc.docker:ci:arm64
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - ./scripts/ci/build_full_unreleased.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: arm64
    EXECUTABLE_FILES: script-inputs/experimental-executables
    BUILD_EXTRA: src/bin_tps_evaluation/main_tps_evaluation.exe src/bin_octogram/octogram_main.exe
      tezt/tests/main.exe
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - octez-teztale-*
    - src/proto_*/parameters/*.json
    - _build/default/src/lib_protocol_compiler/bin/main_native.exe
    - _build/default/tezt/tests/main.exe
    - _build/default/contrib/octez_injector_server/octez_injector_server.exe
    - etherlink-governance-observer
    when: on_success

datadog_pipeline_trace:
  image: datadog/ci:v2.44.0
  stage: start
  tags:
  - gcp
  needs: []
  dependencies: []
  allow_failure: true
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - CI_MERGE_REQUEST_IID=${CI_MERGE_REQUEST_IID:-none}
  - DATADOG_SITE=datadoghq.eu datadog-ci tag --level pipeline --tags pipeline_type:$PIPELINE_TYPE
    --tags mr_number:$CI_MERGE_REQUEST_IID
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.unified_coverage:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test_coverage
  tags:
  - gcp
  rules:
  - when: always
  needs:
  - oc.docker:ci:amd64
  dependencies:
  - oc.docker:ci:amd64
  allow_failure: true
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - mkdir -p _coverage_report
  - dune exec scripts/ci/download_coverage/download.exe -- --from last-merged-pipeline
    --info --log-file _coverage_report/download_coverage.log
  - ./scripts/ci/report_coverage.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    PROJECT: $CI_PROJECT_PATH
    DEFAULT_BRANCH: $CI_COMMIT_SHA
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
    SLACK_COVERAGE_CHANNEL: C02PHBE7W73
  artifacts:
    expire_in: 15 days
    paths:
    - _coverage_report/
    - $BISECT_FILE
    reports:
      coverage_report:
        coverage_format: cobertura
        path: _coverage_report/cobertura.xml
    when: always
    expose_as: Coverage report
  coverage: '/Coverage: ([^%]+%)/'

oc.docker:amd64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: build
  tags:
  - gcp
  rules:
  - when: always
  dependencies:
  - oc.docker:rust-toolchain:amd64
  - oc.docker:ci:amd64
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/docker_initialize.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_release.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "true"
    DOCKER_BUILD_TARGET: with-evm-artifacts
    IMAGE_ARCH_PREFIX: amd64_
    EXECUTABLE_FILES: script-inputs/released-executables script-inputs/experimental-executables

oc.docker:arm64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: build
  tags:
  - gcp_arm64
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/docker_initialize.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_release.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "true"
    DOCKER_BUILD_TARGET: without-evm-artifacts
    IMAGE_ARCH_PREFIX: arm64_
    EXECUTABLE_FILES: script-inputs/released-executables script-inputs/experimental-executables

docker:merge_manifests:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: publish
  tags:
  - gcp_not_interruptible
  needs:
  - oc.docker:amd64
  - oc.docker:arm64
  dependencies: []
  timeout: 60 minutes
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/docker_initialize.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_merge_manifests.sh
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "true"
  retry: 0

publish_kernel_sdk:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: manual
  tags:
  - gcp
  rules:
  - when: manual
    allow_failure: true
  needs:
  - oc.docker:rust-toolchain:amd64
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - SCRIPT_STEP_BEGIN=$(date +%s)
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  - 'sccache --show-stats | grep "Cache location" '
  script:
  - make -f kernels.mk publish-sdk-deps
  - SSL_CERT_DIR=/etc/ssl/certs CC=clang make -f kernels.mk publish-sdk
  - . ./scripts/ci/datadog_send_job_script_step_time.sh || true
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - sccache --show-stats
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    CARGO_INCREMENTAL: "0"
    SCCACHE_GCS_BUCKET: $GCP_SCCACHE_BUCKET
    SCCACHE_GCS_RW_MODE: READ_WRITE
    SCCACHE_GCS_KEY_PREFIX: sccache
    SCCACHE_IGNORE_SERVER_IO_ERROR: "1"
