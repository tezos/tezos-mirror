
./octez-client --mode mockup normalize stack '{}'
{}

./octez-client --mode mockup normalize stack '{Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9)}'
{ Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9) }

./octez-client --mode mockup normalize stack '{Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9); Stack_elt (pair nat (pair nat (pair nat nat))) (Pair 1 (Pair 4 (Pair 7 10)))}'
{ Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9) ;
  Stack_elt (pair nat nat nat nat) (Pair 1 4 7 10) }

./octez-client --mode mockup normalize stack '{Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9); Stack_elt (pair nat (pair nat (pair nat nat))) (Pair 1 (Pair 4 (Pair 7 10))); Stack_elt (pair nat nat (pair nat nat)) {2; 5; 8; 11}}'
{ Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9) ;
  Stack_elt (pair nat nat nat nat) (Pair 1 4 7 10) ;
  Stack_elt (pair nat nat nat nat) (Pair 2 5 8 11) }

./octez-client --mode mockup normalize stack '{}' --unparsing-mode Readable
{}

./octez-client --mode mockup normalize stack '{Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9)}' --unparsing-mode Readable
{ Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9) }

./octez-client --mode mockup normalize stack '{Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9); Stack_elt (pair nat (pair nat (pair nat nat))) (Pair 1 (Pair 4 (Pair 7 10)))}' --unparsing-mode Readable
{ Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9) ;
  Stack_elt (pair nat nat nat nat) (Pair 1 4 7 10) }

./octez-client --mode mockup normalize stack '{Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9); Stack_elt (pair nat (pair nat (pair nat nat))) (Pair 1 (Pair 4 (Pair 7 10))); Stack_elt (pair nat nat (pair nat nat)) {2; 5; 8; 11}}' --unparsing-mode Readable
{ Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9) ;
  Stack_elt (pair nat nat nat nat) (Pair 1 4 7 10) ;
  Stack_elt (pair nat nat nat nat) (Pair 2 5 8 11) }

./octez-client --mode mockup normalize stack '{}' --unparsing-mode Optimized
{}

./octez-client --mode mockup normalize stack '{Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9)}' --unparsing-mode Optimized
{ Stack_elt (pair nat nat nat nat) { 0 ; 3 ; 6 ; 9 } }

./octez-client --mode mockup normalize stack '{Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9); Stack_elt (pair nat (pair nat (pair nat nat))) (Pair 1 (Pair 4 (Pair 7 10)))}' --unparsing-mode Optimized
{ Stack_elt (pair nat nat nat nat) { 0 ; 3 ; 6 ; 9 } ;
  Stack_elt (pair nat nat nat nat) { 1 ; 4 ; 7 ; 10 } }

./octez-client --mode mockup normalize stack '{Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9); Stack_elt (pair nat (pair nat (pair nat nat))) (Pair 1 (Pair 4 (Pair 7 10))); Stack_elt (pair nat nat (pair nat nat)) {2; 5; 8; 11}}' --unparsing-mode Optimized
{ Stack_elt (pair nat nat nat nat) { 0 ; 3 ; 6 ; 9 } ;
  Stack_elt (pair nat nat nat nat) { 1 ; 4 ; 7 ; 10 } ;
  Stack_elt (pair nat nat nat nat) { 2 ; 5 ; 8 ; 11 } }

./octez-client --mode mockup normalize stack '{}' --unparsing-mode Optimized_legacy
{}

./octez-client --mode mockup normalize stack '{Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9)}' --unparsing-mode Optimized_legacy
{ Stack_elt (pair nat nat nat nat) (Pair 0 (Pair 3 (Pair 6 9))) }

./octez-client --mode mockup normalize stack '{Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9); Stack_elt (pair nat (pair nat (pair nat nat))) (Pair 1 (Pair 4 (Pair 7 10)))}' --unparsing-mode Optimized_legacy
{ Stack_elt (pair nat nat nat nat) (Pair 0 (Pair 3 (Pair 6 9))) ;
  Stack_elt (pair nat nat nat nat) (Pair 1 (Pair 4 (Pair 7 10))) }

./octez-client --mode mockup normalize stack '{Stack_elt (pair nat nat nat nat) (Pair 0 3 6 9); Stack_elt (pair nat (pair nat (pair nat nat))) (Pair 1 (Pair 4 (Pair 7 10))); Stack_elt (pair nat nat (pair nat nat)) {2; 5; 8; 11}}' --unparsing-mode Optimized_legacy
{ Stack_elt (pair nat nat nat nat) (Pair 0 (Pair 3 (Pair 6 9))) ;
  Stack_elt (pair nat nat nat nat) (Pair 1 (Pair 4 (Pair 7 10))) ;
  Stack_elt (pair nat nat nat nat) (Pair 2 (Pair 5 (Pair 8 11))) }

./octez-client --mode mockup normalize stack 
Error:
  Erroneous command line argument 3 ().
  empty expression

Usage:
  octez-client [global options] command [command options]
  octez-client --help (for global options)
  octez-client [global options] command --help (for command options)
  octez-client --version (for version information)

To browse the documentation:
  octez-client [global options] man (for a list of commands)
  octez-client [global options] man -v 3 (for the full manual)

Global options (must come before the command):
  -d --base-dir <path>: client data directory (absent: TEZOS_CLIENT_DIR env)
  -n --no-base-dir-warnings: silence warnings about client data directory
  -c --config-file <path>: configuration file
  -t --timings: show RPC request times
  --chain <hash|tag>: chain on which to apply contextual commands (commands dependent on the context associated with the specified chain). Possible tags are 'main' and 'test'.
  -b --block <hash|level|tag>: block on which to apply contextual commands (commands dependent on the context associated with the specified block). Possible tags include 'head' and 'genesis' +/- an optional offset (e.g. "octez-client -b head-1 get timestamp"). Note that block queried must exist in node's storage.
  -w --wait <none|<int>>: how many confirmation blocks are needed before an operation is considered included
  -p --protocol <hash>: use commands of a specific protocol
  -l --log-requests: log all requests to the node
  --better-errors: Error reporting is more detailed. Can be used if a call to an RPC fails or if you don't know the input accepted by the RPC. It may happen that the RPC calls take more time however.
  -A --addr <IP addr|host>: [DEPRECATED: use --endpoint instead] IP address of the node
  -P --port <number>: [DEPRECATED: use --endpoint instead] RPC port of the node
  -S --tls: [DEPRECATED: use --endpoint instead] use TLS to connect to node.
  -m --media-type <json, binary, any or default>: Sets the "media-type" value for the "accept" header for RPC requests to the node. The media accept header indicates to the node which format of data serialisation is supported. Use the value "json" for serialisation to the JSON format.
  -E --endpoint <uri>: HTTP(S) endpoint of the node RPC interface; e.g. 'http://localhost:8732'
  -s --sources <path>: path to JSON file containing sources for --mode light. Example file content: {"min_agreement": 1.0, "uris": ["http://localhost:8732", "https://localhost:8733"]}
  -R --remote-signer <uri>: URI of the remote signer
  -f --password-filename <filename>: path to the password filename
  -M --mode <client|light|mockup|proxy>: how to interact with the node
  --log-coloring <true|false>: Enable or disable light coloring in default stdout logs. Coloring is enabled by default.

./octez-client --mode mockup normalize stack '{'
Error:
  Erroneous command line argument 3 ({).
  At line 1 characters 0 to 1, unclosed curly brace

Usage:
  octez-client [global options] command [command options]
  octez-client --help (for global options)
  octez-client [global options] command --help (for command options)
  octez-client --version (for version information)

To browse the documentation:
  octez-client [global options] man (for a list of commands)
  octez-client [global options] man -v 3 (for the full manual)

Global options (must come before the command):
  -d --base-dir <path>: client data directory (absent: TEZOS_CLIENT_DIR env)
  -n --no-base-dir-warnings: silence warnings about client data directory
  -c --config-file <path>: configuration file
  -t --timings: show RPC request times
  --chain <hash|tag>: chain on which to apply contextual commands (commands dependent on the context associated with the specified chain). Possible tags are 'main' and 'test'.
  -b --block <hash|level|tag>: block on which to apply contextual commands (commands dependent on the context associated with the specified block). Possible tags include 'head' and 'genesis' +/- an optional offset (e.g. "octez-client -b head-1 get timestamp"). Note that block queried must exist in node's storage.
  -w --wait <none|<int>>: how many confirmation blocks are needed before an operation is considered included
  -p --protocol <hash>: use commands of a specific protocol
  -l --log-requests: log all requests to the node
  --better-errors: Error reporting is more detailed. Can be used if a call to an RPC fails or if you don't know the input accepted by the RPC. It may happen that the RPC calls take more time however.
  -A --addr <IP addr|host>: [DEPRECATED: use --endpoint instead] IP address of the node
  -P --port <number>: [DEPRECATED: use --endpoint instead] RPC port of the node
  -S --tls: [DEPRECATED: use --endpoint instead] use TLS to connect to node.
  -m --media-type <json, binary, any or default>: Sets the "media-type" value for the "accept" header for RPC requests to the node. The media accept header indicates to the node which format of data serialisation is supported. Use the value "json" for serialisation to the JSON format.
  -E --endpoint <uri>: HTTP(S) endpoint of the node RPC interface; e.g. 'http://localhost:8732'
  -s --sources <path>: path to JSON file containing sources for --mode light. Example file content: {"min_agreement": 1.0, "uris": ["http://localhost:8732", "https://localhost:8733"]}
  -R --remote-signer <uri>: URI of the remote signer
  -f --password-filename <filename>: path to the password filename
  -M --mode <client|light|mockup|proxy>: how to interact with the node
  --log-coloring <true|false>: Enable or disable light coloring in default stdout logs. Coloring is enabled by default.

./octez-client --mode mockup normalize stack 0
Error:
  At line 1 characters 0 to 1,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got 0.

./octez-client --mode mockup normalize stack '{Stack_elt}'
Error:
  At line 1 characters 0 to 11,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt }.
  At line 1 characters 1 to 10,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt.

./octez-client --mode mockup normalize stack '{Stack_elt nat}'
Error:
  At line 1 characters 0 to 15,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt nat }.
  At line 1 characters 1 to 14,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt nat.

./octez-client --mode mockup normalize stack '{Stack_elt 0 nat}'
At (unshown) location 0, unexpected int, only a primitive can be used here.
Fatal error:
  ill-typed stack

./octez-client --mode mockup normalize stack '{Stack_elt nat 0 1}'
Error:
  At line 1 characters 0 to 19,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt nat 0 1 }.
  At line 1 characters 1 to 18,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt nat 0 1.

./octez-client --mode mockup normalize stack 'Stack_elt nat 0'
Error:
  At line 1 characters 0 to 15,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got Stack_elt nat 0.

./octez-client --mode mockup normalize stack '{Stack_elt nat 0; Stack_elt}'
Error:
  At line 1 characters 0 to 28,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt nat 0 ; Stack_elt }.
  At line 1 characters 18 to 27,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt.

./octez-client --mode mockup normalize stack  --unparsing-mode Readable
Error:
  Erroneous command line argument 3 ().
  empty expression

Usage:
  octez-client [global options] command [command options]
  octez-client --help (for global options)
  octez-client [global options] command --help (for command options)
  octez-client --version (for version information)

To browse the documentation:
  octez-client [global options] man (for a list of commands)
  octez-client [global options] man -v 3 (for the full manual)

Global options (must come before the command):
  -d --base-dir <path>: client data directory (absent: TEZOS_CLIENT_DIR env)
  -n --no-base-dir-warnings: silence warnings about client data directory
  -c --config-file <path>: configuration file
  -t --timings: show RPC request times
  --chain <hash|tag>: chain on which to apply contextual commands (commands dependent on the context associated with the specified chain). Possible tags are 'main' and 'test'.
  -b --block <hash|level|tag>: block on which to apply contextual commands (commands dependent on the context associated with the specified block). Possible tags include 'head' and 'genesis' +/- an optional offset (e.g. "octez-client -b head-1 get timestamp"). Note that block queried must exist in node's storage.
  -w --wait <none|<int>>: how many confirmation blocks are needed before an operation is considered included
  -p --protocol <hash>: use commands of a specific protocol
  -l --log-requests: log all requests to the node
  --better-errors: Error reporting is more detailed. Can be used if a call to an RPC fails or if you don't know the input accepted by the RPC. It may happen that the RPC calls take more time however.
  -A --addr <IP addr|host>: [DEPRECATED: use --endpoint instead] IP address of the node
  -P --port <number>: [DEPRECATED: use --endpoint instead] RPC port of the node
  -S --tls: [DEPRECATED: use --endpoint instead] use TLS to connect to node.
  -m --media-type <json, binary, any or default>: Sets the "media-type" value for the "accept" header for RPC requests to the node. The media accept header indicates to the node which format of data serialisation is supported. Use the value "json" for serialisation to the JSON format.
  -E --endpoint <uri>: HTTP(S) endpoint of the node RPC interface; e.g. 'http://localhost:8732'
  -s --sources <path>: path to JSON file containing sources for --mode light. Example file content: {"min_agreement": 1.0, "uris": ["http://localhost:8732", "https://localhost:8733"]}
  -R --remote-signer <uri>: URI of the remote signer
  -f --password-filename <filename>: path to the password filename
  -M --mode <client|light|mockup|proxy>: how to interact with the node
  --log-coloring <true|false>: Enable or disable light coloring in default stdout logs. Coloring is enabled by default.

./octez-client --mode mockup normalize stack '{' --unparsing-mode Readable
Error:
  Erroneous command line argument 3 ({).
  At line 1 characters 0 to 1, unclosed curly brace

Usage:
  octez-client [global options] command [command options]
  octez-client --help (for global options)
  octez-client [global options] command --help (for command options)
  octez-client --version (for version information)

To browse the documentation:
  octez-client [global options] man (for a list of commands)
  octez-client [global options] man -v 3 (for the full manual)

Global options (must come before the command):
  -d --base-dir <path>: client data directory (absent: TEZOS_CLIENT_DIR env)
  -n --no-base-dir-warnings: silence warnings about client data directory
  -c --config-file <path>: configuration file
  -t --timings: show RPC request times
  --chain <hash|tag>: chain on which to apply contextual commands (commands dependent on the context associated with the specified chain). Possible tags are 'main' and 'test'.
  -b --block <hash|level|tag>: block on which to apply contextual commands (commands dependent on the context associated with the specified block). Possible tags include 'head' and 'genesis' +/- an optional offset (e.g. "octez-client -b head-1 get timestamp"). Note that block queried must exist in node's storage.
  -w --wait <none|<int>>: how many confirmation blocks are needed before an operation is considered included
  -p --protocol <hash>: use commands of a specific protocol
  -l --log-requests: log all requests to the node
  --better-errors: Error reporting is more detailed. Can be used if a call to an RPC fails or if you don't know the input accepted by the RPC. It may happen that the RPC calls take more time however.
  -A --addr <IP addr|host>: [DEPRECATED: use --endpoint instead] IP address of the node
  -P --port <number>: [DEPRECATED: use --endpoint instead] RPC port of the node
  -S --tls: [DEPRECATED: use --endpoint instead] use TLS to connect to node.
  -m --media-type <json, binary, any or default>: Sets the "media-type" value for the "accept" header for RPC requests to the node. The media accept header indicates to the node which format of data serialisation is supported. Use the value "json" for serialisation to the JSON format.
  -E --endpoint <uri>: HTTP(S) endpoint of the node RPC interface; e.g. 'http://localhost:8732'
  -s --sources <path>: path to JSON file containing sources for --mode light. Example file content: {"min_agreement": 1.0, "uris": ["http://localhost:8732", "https://localhost:8733"]}
  -R --remote-signer <uri>: URI of the remote signer
  -f --password-filename <filename>: path to the password filename
  -M --mode <client|light|mockup|proxy>: how to interact with the node
  --log-coloring <true|false>: Enable or disable light coloring in default stdout logs. Coloring is enabled by default.

./octez-client --mode mockup normalize stack 0 --unparsing-mode Readable
Error:
  At line 1 characters 0 to 1,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got 0.

./octez-client --mode mockup normalize stack '{Stack_elt}' --unparsing-mode Readable
Error:
  At line 1 characters 0 to 11,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt }.
  At line 1 characters 1 to 10,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt.

./octez-client --mode mockup normalize stack '{Stack_elt nat}' --unparsing-mode Readable
Error:
  At line 1 characters 0 to 15,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt nat }.
  At line 1 characters 1 to 14,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt nat.

./octez-client --mode mockup normalize stack '{Stack_elt 0 nat}' --unparsing-mode Readable
At (unshown) location 0, unexpected int, only a primitive can be used here.
Fatal error:
  ill-typed stack

./octez-client --mode mockup normalize stack '{Stack_elt nat 0 1}' --unparsing-mode Readable
Error:
  At line 1 characters 0 to 19,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt nat 0 1 }.
  At line 1 characters 1 to 18,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt nat 0 1.

./octez-client --mode mockup normalize stack 'Stack_elt nat 0' --unparsing-mode Readable
Error:
  At line 1 characters 0 to 15,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got Stack_elt nat 0.

./octez-client --mode mockup normalize stack '{Stack_elt nat 0; Stack_elt}' --unparsing-mode Readable
Error:
  At line 1 characters 0 to 28,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt nat 0 ; Stack_elt }.
  At line 1 characters 18 to 27,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt.

./octez-client --mode mockup normalize stack  --unparsing-mode Optimized
Error:
  Erroneous command line argument 3 ().
  empty expression

Usage:
  octez-client [global options] command [command options]
  octez-client --help (for global options)
  octez-client [global options] command --help (for command options)
  octez-client --version (for version information)

To browse the documentation:
  octez-client [global options] man (for a list of commands)
  octez-client [global options] man -v 3 (for the full manual)

Global options (must come before the command):
  -d --base-dir <path>: client data directory (absent: TEZOS_CLIENT_DIR env)
  -n --no-base-dir-warnings: silence warnings about client data directory
  -c --config-file <path>: configuration file
  -t --timings: show RPC request times
  --chain <hash|tag>: chain on which to apply contextual commands (commands dependent on the context associated with the specified chain). Possible tags are 'main' and 'test'.
  -b --block <hash|level|tag>: block on which to apply contextual commands (commands dependent on the context associated with the specified block). Possible tags include 'head' and 'genesis' +/- an optional offset (e.g. "octez-client -b head-1 get timestamp"). Note that block queried must exist in node's storage.
  -w --wait <none|<int>>: how many confirmation blocks are needed before an operation is considered included
  -p --protocol <hash>: use commands of a specific protocol
  -l --log-requests: log all requests to the node
  --better-errors: Error reporting is more detailed. Can be used if a call to an RPC fails or if you don't know the input accepted by the RPC. It may happen that the RPC calls take more time however.
  -A --addr <IP addr|host>: [DEPRECATED: use --endpoint instead] IP address of the node
  -P --port <number>: [DEPRECATED: use --endpoint instead] RPC port of the node
  -S --tls: [DEPRECATED: use --endpoint instead] use TLS to connect to node.
  -m --media-type <json, binary, any or default>: Sets the "media-type" value for the "accept" header for RPC requests to the node. The media accept header indicates to the node which format of data serialisation is supported. Use the value "json" for serialisation to the JSON format.
  -E --endpoint <uri>: HTTP(S) endpoint of the node RPC interface; e.g. 'http://localhost:8732'
  -s --sources <path>: path to JSON file containing sources for --mode light. Example file content: {"min_agreement": 1.0, "uris": ["http://localhost:8732", "https://localhost:8733"]}
  -R --remote-signer <uri>: URI of the remote signer
  -f --password-filename <filename>: path to the password filename
  -M --mode <client|light|mockup|proxy>: how to interact with the node
  --log-coloring <true|false>: Enable or disable light coloring in default stdout logs. Coloring is enabled by default.

./octez-client --mode mockup normalize stack '{' --unparsing-mode Optimized
Error:
  Erroneous command line argument 3 ({).
  At line 1 characters 0 to 1, unclosed curly brace

Usage:
  octez-client [global options] command [command options]
  octez-client --help (for global options)
  octez-client [global options] command --help (for command options)
  octez-client --version (for version information)

To browse the documentation:
  octez-client [global options] man (for a list of commands)
  octez-client [global options] man -v 3 (for the full manual)

Global options (must come before the command):
  -d --base-dir <path>: client data directory (absent: TEZOS_CLIENT_DIR env)
  -n --no-base-dir-warnings: silence warnings about client data directory
  -c --config-file <path>: configuration file
  -t --timings: show RPC request times
  --chain <hash|tag>: chain on which to apply contextual commands (commands dependent on the context associated with the specified chain). Possible tags are 'main' and 'test'.
  -b --block <hash|level|tag>: block on which to apply contextual commands (commands dependent on the context associated with the specified block). Possible tags include 'head' and 'genesis' +/- an optional offset (e.g. "octez-client -b head-1 get timestamp"). Note that block queried must exist in node's storage.
  -w --wait <none|<int>>: how many confirmation blocks are needed before an operation is considered included
  -p --protocol <hash>: use commands of a specific protocol
  -l --log-requests: log all requests to the node
  --better-errors: Error reporting is more detailed. Can be used if a call to an RPC fails or if you don't know the input accepted by the RPC. It may happen that the RPC calls take more time however.
  -A --addr <IP addr|host>: [DEPRECATED: use --endpoint instead] IP address of the node
  -P --port <number>: [DEPRECATED: use --endpoint instead] RPC port of the node
  -S --tls: [DEPRECATED: use --endpoint instead] use TLS to connect to node.
  -m --media-type <json, binary, any or default>: Sets the "media-type" value for the "accept" header for RPC requests to the node. The media accept header indicates to the node which format of data serialisation is supported. Use the value "json" for serialisation to the JSON format.
  -E --endpoint <uri>: HTTP(S) endpoint of the node RPC interface; e.g. 'http://localhost:8732'
  -s --sources <path>: path to JSON file containing sources for --mode light. Example file content: {"min_agreement": 1.0, "uris": ["http://localhost:8732", "https://localhost:8733"]}
  -R --remote-signer <uri>: URI of the remote signer
  -f --password-filename <filename>: path to the password filename
  -M --mode <client|light|mockup|proxy>: how to interact with the node
  --log-coloring <true|false>: Enable or disable light coloring in default stdout logs. Coloring is enabled by default.

./octez-client --mode mockup normalize stack 0 --unparsing-mode Optimized
Error:
  At line 1 characters 0 to 1,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got 0.

./octez-client --mode mockup normalize stack '{Stack_elt}' --unparsing-mode Optimized
Error:
  At line 1 characters 0 to 11,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt }.
  At line 1 characters 1 to 10,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt.

./octez-client --mode mockup normalize stack '{Stack_elt nat}' --unparsing-mode Optimized
Error:
  At line 1 characters 0 to 15,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt nat }.
  At line 1 characters 1 to 14,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt nat.

./octez-client --mode mockup normalize stack '{Stack_elt 0 nat}' --unparsing-mode Optimized
At (unshown) location 0, unexpected int, only a primitive can be used here.
Fatal error:
  ill-typed stack

./octez-client --mode mockup normalize stack '{Stack_elt nat 0 1}' --unparsing-mode Optimized
Error:
  At line 1 characters 0 to 19,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt nat 0 1 }.
  At line 1 characters 1 to 18,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt nat 0 1.

./octez-client --mode mockup normalize stack 'Stack_elt nat 0' --unparsing-mode Optimized
Error:
  At line 1 characters 0 to 15,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got Stack_elt nat 0.

./octez-client --mode mockup normalize stack '{Stack_elt nat 0; Stack_elt}' --unparsing-mode Optimized
Error:
  At line 1 characters 0 to 28,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt nat 0 ; Stack_elt }.
  At line 1 characters 18 to 27,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt.

./octez-client --mode mockup normalize stack  --unparsing-mode Optimized_legacy
Error:
  Erroneous command line argument 3 ().
  empty expression

Usage:
  octez-client [global options] command [command options]
  octez-client --help (for global options)
  octez-client [global options] command --help (for command options)
  octez-client --version (for version information)

To browse the documentation:
  octez-client [global options] man (for a list of commands)
  octez-client [global options] man -v 3 (for the full manual)

Global options (must come before the command):
  -d --base-dir <path>: client data directory (absent: TEZOS_CLIENT_DIR env)
  -n --no-base-dir-warnings: silence warnings about client data directory
  -c --config-file <path>: configuration file
  -t --timings: show RPC request times
  --chain <hash|tag>: chain on which to apply contextual commands (commands dependent on the context associated with the specified chain). Possible tags are 'main' and 'test'.
  -b --block <hash|level|tag>: block on which to apply contextual commands (commands dependent on the context associated with the specified block). Possible tags include 'head' and 'genesis' +/- an optional offset (e.g. "octez-client -b head-1 get timestamp"). Note that block queried must exist in node's storage.
  -w --wait <none|<int>>: how many confirmation blocks are needed before an operation is considered included
  -p --protocol <hash>: use commands of a specific protocol
  -l --log-requests: log all requests to the node
  --better-errors: Error reporting is more detailed. Can be used if a call to an RPC fails or if you don't know the input accepted by the RPC. It may happen that the RPC calls take more time however.
  -A --addr <IP addr|host>: [DEPRECATED: use --endpoint instead] IP address of the node
  -P --port <number>: [DEPRECATED: use --endpoint instead] RPC port of the node
  -S --tls: [DEPRECATED: use --endpoint instead] use TLS to connect to node.
  -m --media-type <json, binary, any or default>: Sets the "media-type" value for the "accept" header for RPC requests to the node. The media accept header indicates to the node which format of data serialisation is supported. Use the value "json" for serialisation to the JSON format.
  -E --endpoint <uri>: HTTP(S) endpoint of the node RPC interface; e.g. 'http://localhost:8732'
  -s --sources <path>: path to JSON file containing sources for --mode light. Example file content: {"min_agreement": 1.0, "uris": ["http://localhost:8732", "https://localhost:8733"]}
  -R --remote-signer <uri>: URI of the remote signer
  -f --password-filename <filename>: path to the password filename
  -M --mode <client|light|mockup|proxy>: how to interact with the node
  --log-coloring <true|false>: Enable or disable light coloring in default stdout logs. Coloring is enabled by default.

./octez-client --mode mockup normalize stack '{' --unparsing-mode Optimized_legacy
Error:
  Erroneous command line argument 3 ({).
  At line 1 characters 0 to 1, unclosed curly brace

Usage:
  octez-client [global options] command [command options]
  octez-client --help (for global options)
  octez-client [global options] command --help (for command options)
  octez-client --version (for version information)

To browse the documentation:
  octez-client [global options] man (for a list of commands)
  octez-client [global options] man -v 3 (for the full manual)

Global options (must come before the command):
  -d --base-dir <path>: client data directory (absent: TEZOS_CLIENT_DIR env)
  -n --no-base-dir-warnings: silence warnings about client data directory
  -c --config-file <path>: configuration file
  -t --timings: show RPC request times
  --chain <hash|tag>: chain on which to apply contextual commands (commands dependent on the context associated with the specified chain). Possible tags are 'main' and 'test'.
  -b --block <hash|level|tag>: block on which to apply contextual commands (commands dependent on the context associated with the specified block). Possible tags include 'head' and 'genesis' +/- an optional offset (e.g. "octez-client -b head-1 get timestamp"). Note that block queried must exist in node's storage.
  -w --wait <none|<int>>: how many confirmation blocks are needed before an operation is considered included
  -p --protocol <hash>: use commands of a specific protocol
  -l --log-requests: log all requests to the node
  --better-errors: Error reporting is more detailed. Can be used if a call to an RPC fails or if you don't know the input accepted by the RPC. It may happen that the RPC calls take more time however.
  -A --addr <IP addr|host>: [DEPRECATED: use --endpoint instead] IP address of the node
  -P --port <number>: [DEPRECATED: use --endpoint instead] RPC port of the node
  -S --tls: [DEPRECATED: use --endpoint instead] use TLS to connect to node.
  -m --media-type <json, binary, any or default>: Sets the "media-type" value for the "accept" header for RPC requests to the node. The media accept header indicates to the node which format of data serialisation is supported. Use the value "json" for serialisation to the JSON format.
  -E --endpoint <uri>: HTTP(S) endpoint of the node RPC interface; e.g. 'http://localhost:8732'
  -s --sources <path>: path to JSON file containing sources for --mode light. Example file content: {"min_agreement": 1.0, "uris": ["http://localhost:8732", "https://localhost:8733"]}
  -R --remote-signer <uri>: URI of the remote signer
  -f --password-filename <filename>: path to the password filename
  -M --mode <client|light|mockup|proxy>: how to interact with the node
  --log-coloring <true|false>: Enable or disable light coloring in default stdout logs. Coloring is enabled by default.

./octez-client --mode mockup normalize stack 0 --unparsing-mode Optimized_legacy
Error:
  At line 1 characters 0 to 1,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got 0.

./octez-client --mode mockup normalize stack '{Stack_elt}' --unparsing-mode Optimized_legacy
Error:
  At line 1 characters 0 to 11,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt }.
  At line 1 characters 1 to 10,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt.

./octez-client --mode mockup normalize stack '{Stack_elt nat}' --unparsing-mode Optimized_legacy
Error:
  At line 1 characters 0 to 15,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt nat }.
  At line 1 characters 1 to 14,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt nat.

./octez-client --mode mockup normalize stack '{Stack_elt 0 nat}' --unparsing-mode Optimized_legacy
At (unshown) location 0, unexpected int, only a primitive can be used here.
Fatal error:
  ill-typed stack

./octez-client --mode mockup normalize stack '{Stack_elt nat 0 1}' --unparsing-mode Optimized_legacy
Error:
  At line 1 characters 0 to 19,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt nat 0 1 }.
  At line 1 characters 1 to 18,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt nat 0 1.

./octez-client --mode mockup normalize stack 'Stack_elt nat 0' --unparsing-mode Optimized_legacy
Error:
  At line 1 characters 0 to 15,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got Stack_elt nat 0.

./octez-client --mode mockup normalize stack '{Stack_elt nat 0; Stack_elt}' --unparsing-mode Optimized_legacy
Error:
  At line 1 characters 0 to 28,
  Unexpected format for a typed stack. Expected a sequence of Stack_elt <ty> <value>; got { Stack_elt nat 0 ; Stack_elt }.
  At line 1 characters 18 to 27,
  Unexpected format for an item in a typed stack. Expected: Stack_elt <ty> <value>; got Stack_elt.
