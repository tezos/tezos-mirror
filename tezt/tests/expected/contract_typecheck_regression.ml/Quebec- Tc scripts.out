
./octez-client --protocol PsQuebecnLByd3JwTiGadoG4nGWi3HYiLXUjkibeFV8dCFeVMUg --mode mockup --no-base-dir-warnings typecheck script michelson_test_scripts/attic/accounts.tz michelson_test_scripts/attic/add1.tz michelson_test_scripts/attic/add1_list.tz michelson_test_scripts/attic/after_strategy.tz michelson_test_scripts/attic/always.tz michelson_test_scripts/attic/append.tz michelson_test_scripts/attic/at_least.tz michelson_test_scripts/attic/auction.tz michelson_test_scripts/attic/bad_lockup.tz michelson_test_scripts/attic/big_map_union.tz michelson_test_scripts/attic/cadr_annotation.tz michelson_test_scripts/attic/concat.tz michelson_test_scripts/attic/conditionals.tz michelson_test_scripts/attic/cons_twice.tz michelson_test_scripts/attic/cps_fact.tz michelson_test_scripts/attic/create_add1_lists.tz michelson_test_scripts/attic/data_publisher.tz michelson_test_scripts/attic/dispatch.tz michelson_test_scripts/attic/empty.tz michelson_test_scripts/attic/fail_amount.tz michelson_test_scripts/attic/faucet.tz michelson_test_scripts/attic/forward.tz michelson_test_scripts/attic/id.tz michelson_test_scripts/attic/infinite_loop.tz michelson_test_scripts/attic/insertion_sort.tz michelson_test_scripts/attic/int_publisher.tz michelson_test_scripts/attic/king_of_tez.tz michelson_test_scripts/attic/list_of_transactions.tz michelson_test_scripts/attic/queue.tz michelson_test_scripts/attic/reduce_map.tz michelson_test_scripts/attic/reentrancy.tz michelson_test_scripts/attic/reservoir.tz michelson_test_scripts/attic/scrutable_reservoir.tz michelson_test_scripts/attic/spawn_identities.tz michelson_test_scripts/entrypoints/big_map_entrypoints.tz michelson_test_scripts/entrypoints/delegatable_target.tz michelson_test_scripts/entrypoints/manager.tz michelson_test_scripts/entrypoints/no_default_target.tz michelson_test_scripts/entrypoints/no_entrypoint_target.tz michelson_test_scripts/entrypoints/rooted_target.tz michelson_test_scripts/entrypoints/simple_entrypoints.tz michelson_test_scripts/macros/assert.tz michelson_test_scripts/macros/assert_cmpeq.tz michelson_test_scripts/macros/assert_cmpge.tz michelson_test_scripts/macros/assert_cmpgt.tz michelson_test_scripts/macros/assert_cmple.tz michelson_test_scripts/macros/assert_cmplt.tz michelson_test_scripts/macros/assert_cmpneq.tz michelson_test_scripts/macros/assert_eq.tz michelson_test_scripts/macros/assert_ge.tz michelson_test_scripts/macros/assert_gt.tz michelson_test_scripts/macros/assert_le.tz michelson_test_scripts/macros/assert_lt.tz michelson_test_scripts/macros/assert_neq.tz michelson_test_scripts/macros/big_map_get_add.tz michelson_test_scripts/macros/big_map_mem.tz michelson_test_scripts/macros/build_list.tz michelson_test_scripts/macros/carn_and_cdrn.tz michelson_test_scripts/macros/compare.tz michelson_test_scripts/macros/compare_bytes.tz michelson_test_scripts/macros/fail.tz michelson_test_scripts/macros/guestbook.tz michelson_test_scripts/macros/macro_annotations.tz michelson_test_scripts/macros/map_caddaadr.tz michelson_test_scripts/macros/max_in_list.tz michelson_test_scripts/macros/min.tz michelson_test_scripts/macros/pair_macro.tz michelson_test_scripts/macros/set_caddaadr.tz michelson_test_scripts/macros/take_my_money.tz michelson_test_scripts/macros/unpair_macro.tz michelson_test_scripts/mini_scenarios/999_constant.tz michelson_test_scripts/mini_scenarios/add_clear_tickets_015.tz michelson_test_scripts/mini_scenarios/always_fails.tz michelson_test_scripts/mini_scenarios/authentication.tz michelson_test_scripts/mini_scenarios/big_map_all.tz michelson_test_scripts/mini_scenarios/big_map_entrypoints.tz michelson_test_scripts/mini_scenarios/big_map_magic.tz michelson_test_scripts/mini_scenarios/big_map_read.tz michelson_test_scripts/mini_scenarios/big_map_store.tz michelson_test_scripts/mini_scenarios/big_map_write.tz michelson_test_scripts/mini_scenarios/cache_consistency.tz michelson_test_scripts/mini_scenarios/check_signature.tz michelson_test_scripts/mini_scenarios/constant_entrypoints.tz michelson_test_scripts/mini_scenarios/constant_unit.tz michelson_test_scripts/mini_scenarios/create_contract.tz michelson_test_scripts/mini_scenarios/create_contract_simple.tz michelson_test_scripts/mini_scenarios/default_account.tz michelson_test_scripts/mini_scenarios/emit_events.tz michelson_test_scripts/mini_scenarios/execution_order_appender.tz michelson_test_scripts/mini_scenarios/execution_order_caller.tz michelson_test_scripts/mini_scenarios/execution_order_storer.tz michelson_test_scripts/mini_scenarios/fa12_reference.tz michelson_test_scripts/mini_scenarios/fail_on_false.tz michelson_test_scripts/mini_scenarios/generic_multisig.tz michelson_test_scripts/mini_scenarios/groth16.tz michelson_test_scripts/mini_scenarios/hardlimit.tz michelson_test_scripts/mini_scenarios/large_error.tz michelson_test_scripts/mini_scenarios/large_flat_contract.tz michelson_test_scripts/mini_scenarios/large_str_id.tz michelson_test_scripts/mini_scenarios/legacy_multisig.tz michelson_test_scripts/mini_scenarios/lockup.tz michelson_test_scripts/mini_scenarios/loop.tz michelson_test_scripts/mini_scenarios/lqt_fa12.mligo.tz michelson_test_scripts/mini_scenarios/multiple_en2.tz michelson_test_scripts/mini_scenarios/multiple_entrypoints_counter.tz michelson_test_scripts/mini_scenarios/multisig_dest_entrypoint.tz michelson_test_scripts/mini_scenarios/multisig_dest_entrypoint_arg.tz michelson_test_scripts/mini_scenarios/nat_id.tz michelson_test_scripts/mini_scenarios/noop_bytes.tz michelson_test_scripts/mini_scenarios/originate_contract.tz michelson_test_scripts/mini_scenarios/parameterized_multisig.tz michelson_test_scripts/mini_scenarios/parsable_contract.tz michelson_test_scripts/mini_scenarios/receive_tickets_in_big_map.tz michelson_test_scripts/mini_scenarios/replay.tz michelson_test_scripts/mini_scenarios/reveal_signed_preimage.tz michelson_test_scripts/mini_scenarios/sc_rollup_forward.tz michelson_test_scripts/mini_scenarios/sc_rollup_mint_and_forward.tz michelson_test_scripts/mini_scenarios/self_address_receiver.tz michelson_test_scripts/mini_scenarios/self_address_sender.tz michelson_test_scripts/mini_scenarios/send_ticket_list_016.tz michelson_test_scripts/mini_scenarios/send_ticket_list_multiple_016.tz michelson_test_scripts/mini_scenarios/send_tickets_from_storage_016.tz michelson_test_scripts/mini_scenarios/send_tickets_in_big_map_015.tz michelson_test_scripts/mini_scenarios/smart_rollup_mint_and_deposit_ticket_016.tz michelson_test_scripts/mini_scenarios/smart_rollup_receive_tickets_016.tz michelson_test_scripts/mini_scenarios/str_id.tz michelson_test_scripts/mini_scenarios/ticket_builder_fungible.tz michelson_test_scripts/mini_scenarios/ticket_builder_non_fungible.tz michelson_test_scripts/mini_scenarios/ticket_wallet_fungible.tz michelson_test_scripts/mini_scenarios/ticket_wallet_non_fungible.tz michelson_test_scripts/mini_scenarios/tickets_015.tz michelson_test_scripts/mini_scenarios/tickets_bag_016.tz michelson_test_scripts/mini_scenarios/tickets_bag_implicit_016.tz michelson_test_scripts/mini_scenarios/tickets_blackhole_016.tz michelson_test_scripts/mini_scenarios/tickets_create_and_send_015.tz michelson_test_scripts/mini_scenarios/tickets_list_blackhole_016.tz michelson_test_scripts/mini_scenarios/tickets_mint_and_store_complex_param.tz michelson_test_scripts/mini_scenarios/tickets_receive_and_store.tz michelson_test_scripts/mini_scenarios/tickets_send_016.tz michelson_test_scripts/mini_scenarios/tickets_send_with_tez_016.tz michelson_test_scripts/mini_scenarios/tickets_store_fst_and_rely_snd.tz michelson_test_scripts/mini_scenarios/tzip4_view.tz michelson_test_scripts/mini_scenarios/very_small.tz michelson_test_scripts/mini_scenarios/view_check_caller.tz michelson_test_scripts/mini_scenarios/view_registers_callers.tz michelson_test_scripts/mini_scenarios/viewable.tz michelson_test_scripts/mini_scenarios/vote_for_delegate.tz michelson_test_scripts/mini_scenarios/weather_insurance.tz michelson_test_scripts/mini_scenarios/xcat.tz michelson_test_scripts/mini_scenarios/xcat_dapp.tz michelson_test_scripts/non_regression/262_bug.tz michelson_test_scripts/non_regression/843_bug.tz michelson_test_scripts/non_regression/bad_annot_contract.tz michelson_test_scripts/non_regression/pairk_annot.tz michelson_test_scripts/opcodes/abs.tz michelson_test_scripts/opcodes/add.tz michelson_test_scripts/opcodes/add_bls12_381_fr.tz michelson_test_scripts/opcodes/add_bls12_381_g1.tz michelson_test_scripts/opcodes/add_bls12_381_g2.tz michelson_test_scripts/opcodes/add_delta_timestamp.tz michelson_test_scripts/opcodes/add_timestamp_delta.tz michelson_test_scripts/opcodes/address.tz michelson_test_scripts/opcodes/amount_after_fib_view.tz michelson_test_scripts/opcodes/amount_after_nonexistent_view.tz michelson_test_scripts/opcodes/amount_after_view.tz michelson_test_scripts/opcodes/and.tz michelson_test_scripts/opcodes/and_binary.tz michelson_test_scripts/opcodes/and_bytes_016.tz michelson_test_scripts/opcodes/and_logical_1.tz michelson_test_scripts/opcodes/balance.tz michelson_test_scripts/opcodes/balance_after_fib_view.tz michelson_test_scripts/opcodes/balance_after_nonexistent_view.tz michelson_test_scripts/opcodes/balance_after_view.tz michelson_test_scripts/opcodes/big_map_mem_nat.tz michelson_test_scripts/opcodes/big_map_mem_string.tz michelson_test_scripts/opcodes/big_map_to_self.tz michelson_test_scripts/opcodes/bls12_381_fr_push_bytes_not_padded.tz michelson_test_scripts/opcodes/bls12_381_fr_push_nat.tz michelson_test_scripts/opcodes/bls12_381_fr_to_int.tz michelson_test_scripts/opcodes/bls12_381_fr_to_mutez.tz michelson_test_scripts/opcodes/bls12_381_fr_z_int.tz michelson_test_scripts/opcodes/bls12_381_fr_z_nat.tz michelson_test_scripts/opcodes/bls12_381_z_fr_int.tz michelson_test_scripts/opcodes/bls12_381_z_fr_nat.tz michelson_test_scripts/opcodes/bytes.tz michelson_test_scripts/opcodes/bytes_of_int_016.tz michelson_test_scripts/opcodes/bytes_of_nat_016.tz michelson_test_scripts/opcodes/car.tz michelson_test_scripts/opcodes/cdr.tz michelson_test_scripts/opcodes/chain_id.tz michelson_test_scripts/opcodes/chain_id_store.tz michelson_test_scripts/opcodes/check_signature.tz michelson_test_scripts/opcodes/comb.tz michelson_test_scripts/opcodes/comb-get.tz michelson_test_scripts/opcodes/comb-literals.tz michelson_test_scripts/opcodes/comb-set.tz michelson_test_scripts/opcodes/comb-set-2.tz michelson_test_scripts/opcodes/compare.tz michelson_test_scripts/opcodes/compare_big_type.tz michelson_test_scripts/opcodes/compare_big_type2.tz michelson_test_scripts/opcodes/comparisons.tz michelson_test_scripts/opcodes/concat_hello.tz michelson_test_scripts/opcodes/concat_hello_bytes.tz michelson_test_scripts/opcodes/concat_list.tz michelson_test_scripts/opcodes/cons.tz michelson_test_scripts/opcodes/contains_all.tz michelson_test_scripts/opcodes/contract.tz michelson_test_scripts/opcodes/create_contract.tz michelson_test_scripts/opcodes/create_contract_rootname.tz michelson_test_scripts/opcodes/create_contract_rootname_alt.tz michelson_test_scripts/opcodes/create_contract_with_view.tz michelson_test_scripts/opcodes/diff_timestamps.tz michelson_test_scripts/opcodes/dig_eq.tz michelson_test_scripts/opcodes/dign.tz michelson_test_scripts/opcodes/dip.tz michelson_test_scripts/opcodes/dipn.tz michelson_test_scripts/opcodes/dropn.tz michelson_test_scripts/opcodes/dugn.tz michelson_test_scripts/opcodes/dup-n.tz michelson_test_scripts/opcodes/ediv.tz michelson_test_scripts/opcodes/ediv_mutez.tz michelson_test_scripts/opcodes/emit.tz michelson_test_scripts/opcodes/empty_map.tz michelson_test_scripts/opcodes/exec_concat.tz michelson_test_scripts/opcodes/fact.tz michelson_test_scripts/opcodes/first.tz michelson_test_scripts/opcodes/get_and_update_big_map.tz michelson_test_scripts/opcodes/get_and_update_map.tz michelson_test_scripts/opcodes/get_big_map_value.tz michelson_test_scripts/opcodes/get_map_value.tz michelson_test_scripts/opcodes/hash_consistency_checker.tz michelson_test_scripts/opcodes/hash_key.tz michelson_test_scripts/opcodes/hash_string.tz michelson_test_scripts/opcodes/if.tz michelson_test_scripts/opcodes/if_some.tz michelson_test_scripts/opcodes/int.tz michelson_test_scripts/opcodes/iter_fail.tz michelson_test_scripts/opcodes/keccak.tz michelson_test_scripts/opcodes/left_right.tz michelson_test_scripts/opcodes/level.tz michelson_test_scripts/opcodes/list_concat.tz michelson_test_scripts/opcodes/list_concat_bytes.tz michelson_test_scripts/opcodes/list_id.tz michelson_test_scripts/opcodes/list_id_map.tz michelson_test_scripts/opcodes/list_iter.tz michelson_test_scripts/opcodes/list_map_block.tz michelson_test_scripts/opcodes/list_size.tz michelson_test_scripts/opcodes/loop_failwith.tz michelson_test_scripts/opcodes/loop_left.tz michelson_test_scripts/opcodes/loop_left_failwith.tz michelson_test_scripts/opcodes/lsl_bytes_016.tz michelson_test_scripts/opcodes/lsr_bytes_016.tz michelson_test_scripts/opcodes/map_car.tz michelson_test_scripts/opcodes/map_id.tz michelson_test_scripts/opcodes/map_iter.tz michelson_test_scripts/opcodes/map_map.tz michelson_test_scripts/opcodes/map_map_sideeffect.tz michelson_test_scripts/opcodes/map_mem_nat.tz michelson_test_scripts/opcodes/map_mem_string.tz michelson_test_scripts/opcodes/map_size.tz michelson_test_scripts/opcodes/merge_comparable_pairs.tz michelson_test_scripts/opcodes/mul.tz michelson_test_scripts/opcodes/mul_bls12_381_fr.tz michelson_test_scripts/opcodes/mul_bls12_381_g1.tz michelson_test_scripts/opcodes/mul_bls12_381_g2.tz michelson_test_scripts/opcodes/mul_overflow.tz michelson_test_scripts/opcodes/munch.tz michelson_test_scripts/opcodes/mutez_to_bls12_381_fr.tz michelson_test_scripts/opcodes/neg.tz michelson_test_scripts/opcodes/neg_bls12_381_fr.tz michelson_test_scripts/opcodes/neg_bls12_381_g1.tz michelson_test_scripts/opcodes/neg_bls12_381_g2.tz michelson_test_scripts/opcodes/none.tz michelson_test_scripts/opcodes/noop.tz michelson_test_scripts/opcodes/not.tz michelson_test_scripts/opcodes/not_binary.tz michelson_test_scripts/opcodes/not_bytes_016.tz michelson_test_scripts/opcodes/or.tz michelson_test_scripts/opcodes/or_binary.tz michelson_test_scripts/opcodes/or_bytes_016.tz michelson_test_scripts/opcodes/originate_big_map.tz michelson_test_scripts/opcodes/packunpack.tz michelson_test_scripts/opcodes/packunpack_rev.tz michelson_test_scripts/opcodes/packunpack_rev_cty.tz michelson_test_scripts/opcodes/pair_id.tz michelson_test_scripts/opcodes/pairing_check.tz michelson_test_scripts/opcodes/pexec.tz michelson_test_scripts/opcodes/pexec_2.tz michelson_test_scripts/opcodes/proxy.tz michelson_test_scripts/opcodes/ret_int.tz michelson_test_scripts/opcodes/reverse.tz michelson_test_scripts/opcodes/reverse_loop.tz michelson_test_scripts/opcodes/sapling_empty_state.tz michelson_test_scripts/opcodes/self.tz michelson_test_scripts/opcodes/self_address.tz michelson_test_scripts/opcodes/self_address_after_fib_view.tz michelson_test_scripts/opcodes/self_address_after_nonexistent_view.tz michelson_test_scripts/opcodes/self_address_after_view.tz michelson_test_scripts/opcodes/self_after_fib_view.tz michelson_test_scripts/opcodes/self_after_nonexistent_view.tz michelson_test_scripts/opcodes/self_after_view.tz michelson_test_scripts/opcodes/self_with_default_entrypoint.tz michelson_test_scripts/opcodes/self_with_entrypoint.tz michelson_test_scripts/opcodes/sender.tz michelson_test_scripts/opcodes/sender_after_fib_view.tz michelson_test_scripts/opcodes/sender_after_nonexistent_view.tz michelson_test_scripts/opcodes/sender_after_view.tz michelson_test_scripts/opcodes/set_car.tz michelson_test_scripts/opcodes/set_cdr.tz michelson_test_scripts/opcodes/set_delegate.tz michelson_test_scripts/opcodes/set_id.tz michelson_test_scripts/opcodes/set_iter.tz michelson_test_scripts/opcodes/set_member.tz michelson_test_scripts/opcodes/set_size.tz michelson_test_scripts/opcodes/sets.tz michelson_test_scripts/opcodes/sha3.tz michelson_test_scripts/opcodes/shifts.tz michelson_test_scripts/opcodes/slice.tz michelson_test_scripts/opcodes/slice_bytes.tz michelson_test_scripts/opcodes/slices.tz michelson_test_scripts/opcodes/source.tz michelson_test_scripts/opcodes/split_bytes.tz michelson_test_scripts/opcodes/split_string.tz michelson_test_scripts/opcodes/store_bls12_381_fr.tz michelson_test_scripts/opcodes/store_bls12_381_g1.tz michelson_test_scripts/opcodes/store_bls12_381_g2.tz michelson_test_scripts/opcodes/store_input.tz michelson_test_scripts/opcodes/store_now.tz michelson_test_scripts/opcodes/str_id.tz michelson_test_scripts/opcodes/sub_timestamp_delta.tz michelson_test_scripts/opcodes/subset.tz michelson_test_scripts/opcodes/tez_add_sub.tz michelson_test_scripts/opcodes/ticket_bad.tz michelson_test_scripts/opcodes/ticket_big_store.tz michelson_test_scripts/opcodes/ticket_join.tz michelson_test_scripts/opcodes/ticket_read.tz michelson_test_scripts/opcodes/ticket_split.tz michelson_test_scripts/opcodes/ticket_store.tz michelson_test_scripts/opcodes/ticket_store-2.tz michelson_test_scripts/opcodes/ticketer.tz michelson_test_scripts/opcodes/ticketer-2.tz michelson_test_scripts/opcodes/transfer_amount.tz michelson_test_scripts/opcodes/transfer_tokens.tz michelson_test_scripts/opcodes/uncomb.tz michelson_test_scripts/opcodes/unpair.tz michelson_test_scripts/opcodes/unpair_field_annotation_mismatch.tz michelson_test_scripts/opcodes/update_big_map.tz michelson_test_scripts/opcodes/utxo_read.tz michelson_test_scripts/opcodes/utxor.tz michelson_test_scripts/opcodes/view_fib.tz michelson_test_scripts/opcodes/view_mutual_recursion.tz michelson_test_scripts/opcodes/view_op_add.tz michelson_test_scripts/opcodes/view_op_constant.tz michelson_test_scripts/opcodes/view_op_id.tz michelson_test_scripts/opcodes/view_op_nonexistent_addr.tz michelson_test_scripts/opcodes/view_op_nonexistent_func.tz michelson_test_scripts/opcodes/view_op_test_step_contants.tz michelson_test_scripts/opcodes/view_op_toplevel_inconsistent_input_type.tz michelson_test_scripts/opcodes/view_op_toplevel_inconsistent_output_type.tz michelson_test_scripts/opcodes/view_rec.tz michelson_test_scripts/opcodes/view_toplevel_lib.tz michelson_test_scripts/opcodes/voting_power.tz michelson_test_scripts/opcodes/xor.tz michelson_test_scripts/opcodes/xor_bytes_016.tz --details --display-names
Well typed (Gas remaining: 1039933.430 units remaining)	michelson_test_scripts/attic/accounts.tz
{ parameter
    (or (key_hash %Initialize)
        (pair %Withdraw (key %from) (pair (mutez %withdraw_amount) (signature %sig)))) ;
  storage (map :stored_balance key_hash mutez) ;
  code { DUP
         /* [ pair (or key_hash (pair key mutez signature)) (map key_hash mutez)
            : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ ;
         CAR
         /* [ or key_hash (pair key mutez signature)
            : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ ;
         IF_LEFT
           { DUP
             /* [ key_hash : key_hash
                : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ ;
             DIP 2
                 { CDR %stored_balance
                   /* [ map key_hash mutez ] */ ;
                   DUP
                   /* [ map key_hash mutez : map key_hash mutez ] */ }
             /* [ key_hash : key_hash : map key_hash mutez : map key_hash mutez ] */ ;
             DIP { SWAP /* [ map key_hash mutez : key_hash : map key_hash mutez ] */ }
             /* [ key_hash : map key_hash mutez : key_hash : map key_hash mutez ] */ ;
             GET @opt_prev_balance
             /* [ option mutez : key_hash : map key_hash mutez ] */ ;
             IF_SOME
               { RENAME @previous_balance
                 /* [ mutez : key_hash : map key_hash mutez ] */ ;
                 AMOUNT
                 /* [ mutez : mutez : key_hash : map key_hash mutez ] */ ;
                 ADD
                 /* [ mutez : key_hash : map key_hash mutez ] */ ;
                 SOME
                 /* [ option mutez : key_hash : map key_hash mutez ] */ ;
                 SWAP
                 /* [ key_hash : option mutez : map key_hash mutez ] */ ;
                 UPDATE
                 /* [ map key_hash mutez ] */ ;
                 NIL operation
                 /* [ list operation : map key_hash mutez ] */ ;
                 PAIR
                 /* [ pair (list operation) (map key_hash mutez) ] */ }
               { DIP { AMOUNT
                       /* [ mutez : map key_hash mutez ] */ ;
                       SOME
                       /* [ option mutez : map key_hash mutez ] */ }
                 /* [ key_hash : option mutez : map key_hash mutez ] */ ;
                 UPDATE
                 /* [ map key_hash mutez ] */ ;
                 NIL operation
                 /* [ list operation : map key_hash mutez ] */ ;
                 PAIR
                 /* [ pair (list operation) (map key_hash mutez) ] */ } }
           { DUP
             /* [ pair key mutez signature : pair key mutez signature
                : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ ;
             DUP
             /* [ pair key mutez signature : pair key mutez signature
                : pair key mutez signature
                : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ ;
             DUP
             /* [ pair key mutez signature : pair key mutez signature
                : pair key mutez signature : pair key mutez signature
                : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ ;
             DUP
             /* [ pair key mutez signature : pair key mutez signature
                : pair key mutez signature : pair key mutez signature
                : pair key mutez signature
                : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ ;
             CAR %from
             /* [ key : pair key mutez signature : pair key mutez signature
                : pair key mutez signature : pair key mutez signature
                : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ ;
             DIP 2
                 { CDAR %withdraw_amount ;
                   PACK
                   /* [ bytes : pair key mutez signature : pair key mutez signature
                      : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ ;
                   BLAKE2B @signed_amount
                   /* [ bytes : pair key mutez signature : pair key mutez signature
                      : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ }
             /* [ key : pair key mutez signature : bytes : pair key mutez signature
                : pair key mutez signature
                : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ ;
             DIP { CDDR %sig }
             /* [ key : signature : bytes : pair key mutez signature
                : pair key mutez signature
                : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ ;
             CHECK_SIGNATURE
             /* [ bool : pair key mutez signature : pair key mutez signature
                : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ ;
             IF { /* [ pair key mutez signature : pair key mutez signature
                     : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ }
                { PUSH string
                       "Bad signature"
                  /* [ string : pair key mutez signature : pair key mutez signature
                     : pair (or key_hash (pair key mutez signature)) (map key_hash mutez) ] */ ;
                  FAILWITH
                  /* [] */ } ;
             DIP 2
                 { CDR %stored_balance
                   /* [ map key_hash mutez ] */ ;
                   DUP
                   /* [ map key_hash mutez : map key_hash mutez ] */ }
             /* [ pair key mutez signature : pair key mutez signature : map key_hash mutez
                : map key_hash mutez ] */ ;
             CAR %from
             /* [ key : pair key mutez signature : map key_hash mutez : map key_hash mutez ] */ ;
             HASH_KEY @from_hash
             /* [ key_hash : pair key mutez signature : map key_hash mutez
                : map key_hash mutez ] */ ;
             DUP
             /* [ key_hash : key_hash : pair key mutez signature : map key_hash mutez
                : map key_hash mutez ] */ ;
             DIP { DIP { SWAP
                         /* [ map key_hash mutez : pair key mutez signature : map key_hash mutez ] */ }
                   /* [ key_hash : map key_hash mutez : pair key mutez signature
                      : map key_hash mutez ] */ ;
                   SWAP
                   /* [ map key_hash mutez : key_hash : pair key mutez signature
                      : map key_hash mutez ] */ }
             /* [ key_hash : map key_hash mutez : key_hash : pair key mutez signature
                : map key_hash mutez ] */ ;
             GET
             /* [ option mutez : key_hash : pair key mutez signature : map key_hash mutez ] */ ;
             IF_NONE
               { PUSH string
                      "Account does not exist"
                 /* [ string : key_hash : pair key mutez signature : map key_hash mutez ] */ ;
                 PAIR
                 /* [ pair string key_hash : pair key mutez signature : map key_hash mutez ] */ ;
                 FAILWITH
                 /* [] */ }
               { RENAME @previous_balance
                 /* [ mutez : key_hash : pair key mutez signature : map key_hash mutez ] */ ;
                 DIP { DROP /* [ pair key mutez signature : map key_hash mutez ] */ }
                 /* [ mutez : pair key mutez signature : map key_hash mutez ] */ ;
                 DUP
                 /* [ mutez : mutez : pair key mutez signature : map key_hash mutez ] */ ;
                 DIP 2
                     { DUP
                       /* [ pair key mutez signature : pair key mutez signature : map key_hash mutez ] */ ;
                       CDAR %withdraw_amount ;
                       DUP
                       /* [ mutez : mutez : pair key mutez signature : map key_hash mutez ] */ }
                 /* [ mutez : mutez : mutez : mutez : pair key mutez signature
                    : map key_hash mutez ] */ ;
                 DIP { CMPLT @not_enough }
                 /* [ mutez : bool : mutez : pair key mutez signature : map key_hash mutez ] */ ;
                 SWAP
                 /* [ bool : mutez : mutez : pair key mutez signature : map key_hash mutez ] */ ;
                 IF { PUSH string
                           "Not enough funds"
                      /* [ string : mutez : mutez : pair key mutez signature : map key_hash mutez ] */ ;
                      FAILWITH
                      /* [] */ }
                    { SUB_MUTEZ @new_balance
                      /* [ option mutez : pair key mutez signature : map key_hash mutez ] */ ;
                      ASSERT_SOME ;
                      DIP { DUP
                            /* [ pair key mutez signature : pair key mutez signature : map key_hash mutez ] */ ;
                            DIP { SWAP /* [ map key_hash mutez : pair key mutez signature ] */ }
                            /* [ pair key mutez signature : map key_hash mutez : pair key mutez signature ] */ }
                      /* [ mutez : pair key mutez signature : map key_hash mutez
                         : pair key mutez signature ] */ ;
                      DUP
                      /* [ mutez : mutez : pair key mutez signature : map key_hash mutez
                         : pair key mutez signature ] */ ;
                      PUSH @zero
                        mutez
                        0
                      /* [ mutez : mutez : mutez : pair key mutez signature : map key_hash mutez
                         : pair key mutez signature ] */ ;
                      CMPEQ @null_balance ;
                      IF { DROP
                           /* [ pair key mutez signature : map key_hash mutez : pair key mutez signature ] */ ;
                           NONE @new_balance
                             mutez
                           /* [ option mutez : pair key mutez signature : map key_hash mutez
                              : pair key mutez signature ] */ }
                         { SOME @new_balance
                           /* [ option mutez : pair key mutez signature : map key_hash mutez
                              : pair key mutez signature ] */ } ;
                      SWAP
                      /* [ pair key mutez signature : option mutez : map key_hash mutez
                         : pair key mutez signature ] */ ;
                      CAR %from
                      /* [ key : option mutez : map key_hash mutez : pair key mutez signature ] */ ;
                      HASH_KEY @from_hash
                      /* [ key_hash : option mutez : map key_hash mutez : pair key mutez signature ] */ ;
                      UPDATE
                      /* [ map key_hash mutez : pair key mutez signature ] */ ;
                      SWAP
                      /* [ pair key mutez signature : map key_hash mutez ] */ ;
                      DUP
                      /* [ pair key mutez signature : pair key mutez signature : map key_hash mutez ] */ ;
                      CDAR %withdraw_amount ;
                      DIP { CAR %from
                            /* [ key : map key_hash mutez ] */ ;
                            HASH_KEY @from_hash
                            /* [ key_hash : map key_hash mutez ] */ ;
                            IMPLICIT_ACCOUNT @from_account
                            /* [ contract unit : map key_hash mutez ] */ }
                      /* [ mutez : contract unit : map key_hash mutez ] */ ;
                      UNIT
                      /* [ unit : mutez : contract unit : map key_hash mutez ] */ ;
                      TRANSFER_TOKENS @withdraw_transfer_op
                      /* [ operation : map key_hash mutez ] */ ;
                      NIL operation
                      /* [ list operation : operation : map key_hash mutez ] */ ;
                      SWAP
                      /* [ operation : list operation : map key_hash mutez ] */ ;
                      CONS
                      /* [ list operation : map key_hash mutez ] */ ;
                      PAIR
                      /* [ pair (list operation) (map key_hash mutez) ] */ } } } } }
Well typed (Gas remaining: 1039996.810 units remaining)	michelson_test_scripts/attic/add1.tz
{ parameter int ;
  storage int ;
  code { CAR
         /* [ int ] */ ;
         PUSH int 1
         /* [ int : int ] */ ;
         ADD
         /* [ int ] */ ;
         NIL operation
         /* [ list operation : int ] */ ;
         PAIR
         /* [ pair (list operation) int ] */ } }
Well typed (Gas remaining: 1039996.114 units remaining)	michelson_test_scripts/attic/add1_list.tz
{ parameter (list int) ;
  storage (list int) ;
  code { CAR
         /* [ list int ] */ ;
         MAP { PUSH int 1 /* [ int : int ] */ ; ADD /* [ int ] */ }
         /* [ list int ] */ ;
         NIL operation
         /* [ list operation : list int ] */ ;
         PAIR
         /* [ pair (list operation) (list int) ] */ } }
Well typed (Gas remaining: 1039991.454 units remaining)	michelson_test_scripts/attic/after_strategy.tz
{ parameter nat ;
  storage (pair (pair nat bool) timestamp) ;
  code { DUP
         /* [ pair nat (pair nat bool) timestamp : pair nat (pair nat bool) timestamp ] */ ;
         CAR
         /* [ nat : pair nat (pair nat bool) timestamp ] */ ;
         DIP { CDDR ;
               DUP
               /* [ timestamp : timestamp ] */ ;
               NOW
               /* [ timestamp : timestamp : timestamp ] */ ;
               CMPGT }
         /* [ nat : bool : timestamp ] */ ;
         PAIR
         /* [ pair nat bool : timestamp ] */ ;
         PAIR
         /* [ pair (pair nat bool) timestamp ] */ ;
         NIL operation
         /* [ list operation : pair (pair nat bool) timestamp ] */ ;
         PAIR
         /* [ pair (list operation) (pair nat bool) timestamp ] */ } }
Well typed (Gas remaining: 1039996.120 units remaining)	michelson_test_scripts/attic/always.tz
{ parameter nat ;
  storage (pair nat bool) ;
  code { CAR
         /* [ nat ] */ ;
         PUSH bool True
         /* [ bool : nat ] */ ;
         SWAP
         /* [ nat : bool ] */ ;
         PAIR
         /* [ pair nat bool ] */ ;
         NIL operation
         /* [ list operation : pair nat bool ] */ ;
         PAIR
         /* [ pair (list operation) nat bool ] */ } }
Well typed (Gas remaining: 1039993.723 units remaining)	michelson_test_scripts/attic/append.tz
{ parameter (pair (list int) (list int)) ;
  storage (list int) ;
  code { CAR
         /* [ pair (list int) (list int) ] */ ;
         UNPAIR
         /* [ list int : list int ] */ ;
         NIL int
         /* [ list int : list int : list int ] */ ;
         SWAP
         /* [ list int : list int : list int ] */ ;
         ITER { CONS /* [ list int : list int ] */ }
         /* [ list int : list int ] */ ;
         ITER { CONS /* [ list int ] */ }
         /* [ list int ] */ ;
         NIL operation
         /* [ list operation : list int ] */ ;
         PAIR
         /* [ pair (list operation) (list int) ] */ } }
Well typed (Gas remaining: 1039993.973 units remaining)	michelson_test_scripts/attic/at_least.tz
{ parameter unit ;
  storage mutez ;
  code { CDR
         /* [ mutez ] */ ;
         DUP
         /* [ mutez : mutez ] */ ;
         AMOUNT
         /* [ mutez : mutez : mutez ] */ ;
         CMPLT ;
         IF { FAIL }
            { NIL operation
              /* [ list operation : mutez ] */ ;
              PAIR
              /* [ pair (list operation) mutez ] */ } } }
Well typed (Gas remaining: 1039974.633 units remaining)	michelson_test_scripts/attic/auction.tz
{ parameter key_hash ;
  storage (pair timestamp (pair mutez key_hash)) ;
  code { DUP
         /* [ pair key_hash timestamp mutez key_hash
            : pair key_hash timestamp mutez key_hash ] */ ;
         CDAR ;
         DUP
         /* [ timestamp : timestamp : pair key_hash timestamp mutez key_hash ] */ ;
         NOW
         /* [ timestamp : timestamp : timestamp
            : pair key_hash timestamp mutez key_hash ] */ ;
         CMPGT ;
         IF { FAIL } { /* [ timestamp : pair key_hash timestamp mutez key_hash ] */ } ;
         SWAP
         /* [ pair key_hash timestamp mutez key_hash : timestamp ] */ ;
         DUP
         /* [ pair key_hash timestamp mutez key_hash
            : pair key_hash timestamp mutez key_hash : timestamp ] */ ;
         CAR
         /* [ key_hash : pair key_hash timestamp mutez key_hash : timestamp ] */ ;
         DIP { CDDR }
         /* [ key_hash : pair mutez key_hash : timestamp ] */ ;
         AMOUNT
         /* [ mutez : key_hash : pair mutez key_hash : timestamp ] */ ;
         PAIR
         /* [ pair mutez key_hash : pair mutez key_hash : timestamp ] */ ;
         SWAP
         /* [ pair mutez key_hash : pair mutez key_hash : timestamp ] */ ;
         DIP { SWAP
               /* [ timestamp : pair mutez key_hash ] */ ;
               PAIR
               /* [ pair timestamp mutez key_hash ] */ }
         /* [ pair mutez key_hash : pair timestamp mutez key_hash ] */ ;
         DUP
         /* [ pair mutez key_hash : pair mutez key_hash : pair timestamp mutez key_hash ] */ ;
         CAR
         /* [ mutez : pair mutez key_hash : pair timestamp mutez key_hash ] */ ;
         AMOUNT
         /* [ mutez : mutez : pair mutez key_hash : pair timestamp mutez key_hash ] */ ;
         CMPLE ;
         IF { FAIL } { /* [ pair mutez key_hash : pair timestamp mutez key_hash ] */ } ;
         DUP
         /* [ pair mutez key_hash : pair mutez key_hash : pair timestamp mutez key_hash ] */ ;
         CAR
         /* [ mutez : pair mutez key_hash : pair timestamp mutez key_hash ] */ ;
         DIP { CDR
               /* [ key_hash : pair timestamp mutez key_hash ] */ ;
               IMPLICIT_ACCOUNT
               /* [ contract unit : pair timestamp mutez key_hash ] */ }
         /* [ mutez : contract unit : pair timestamp mutez key_hash ] */ ;
         UNIT
         /* [ unit : mutez : contract unit : pair timestamp mutez key_hash ] */ ;
         TRANSFER_TOKENS
         /* [ operation : pair timestamp mutez key_hash ] */ ;
         NIL operation
         /* [ list operation : operation : pair timestamp mutez key_hash ] */ ;
         SWAP
         /* [ operation : list operation : pair timestamp mutez key_hash ] */ ;
         CONS
         /* [ list operation : pair timestamp mutez key_hash ] */ ;
         PAIR
         /* [ pair (list operation) timestamp mutez key_hash ] */ } }
Well typed (Gas remaining: 1039975.206 units remaining)	michelson_test_scripts/attic/bad_lockup.tz
{ parameter unit ;
  storage (pair timestamp (pair address address)) ;
  code { CDR
         /* [ pair timestamp address address ] */ ;
         DUP
         /* [ pair timestamp address address : pair timestamp address address ] */ ;
         CAR
         /* [ timestamp : pair timestamp address address ] */ ;
         NOW
         /* [ timestamp : timestamp : pair timestamp address address ] */ ;
         CMPLT ;
         IF { FAIL } { /* [ pair timestamp address address ] */ } ;
         DUP
         /* [ pair timestamp address address : pair timestamp address address ] */ ;
         CDAR ;
         CONTRACT unit
         /* [ option (contract unit) : pair timestamp address address ] */ ;
         ASSERT_SOME ;
         PUSH mutez 100000000
         /* [ mutez : contract unit : pair timestamp address address ] */ ;
         UNIT
         /* [ unit : mutez : contract unit : pair timestamp address address ] */ ;
         TRANSFER_TOKENS
         /* [ operation : pair timestamp address address ] */ ;
         SWAP
         /* [ pair timestamp address address : operation ] */ ;
         DUP
         /* [ pair timestamp address address : pair timestamp address address
            : operation ] */ ;
         CDDR ;
         CONTRACT
           unit
         /* [ option (contract unit) : pair timestamp address address : operation ] */ ;
         ASSERT_SOME ;
         PUSH mutez
              100000000
         /* [ mutez : contract unit : pair timestamp address address : operation ] */ ;
         UNIT
         /* [ unit : mutez : contract unit : pair timestamp address address : operation ] */ ;
         TRANSFER_TOKENS
         /* [ operation : pair timestamp address address : operation ] */ ;
         DIP { SWAP /* [ operation : pair timestamp address address ] */ }
         /* [ operation : operation : pair timestamp address address ] */ ;
         NIL operation
         /* [ list operation : operation : operation : pair timestamp address address ] */ ;
         SWAP
         /* [ operation : list operation : operation : pair timestamp address address ] */ ;
         CONS
         /* [ list operation : operation : pair timestamp address address ] */ ;
         SWAP
         /* [ operation : list operation : pair timestamp address address ] */ ;
         CONS
         /* [ list operation : pair timestamp address address ] */ ;
         PAIR
         /* [ pair (list operation) timestamp address address ] */ } }
Well typed (Gas remaining: 1039987.872 units remaining)	michelson_test_scripts/attic/big_map_union.tz
{ parameter (list (pair string int)) ;
  storage (pair (big_map string int) unit) ;
  code { UNPAPAIR ;
         ITER { UNPAIR
                /* [ string : int : big_map string int : unit ] */ ;
                DUP 3
                /* [ big_map string int : string : int : big_map string int : unit ] */ ;
                DUP 2
                /* [ string : big_map string int : string : int : big_map string int : unit ] */ ;
                GET
                /* [ option int : string : int : big_map string int : unit ] */ ;
                IF_NONE
                  { PUSH int 0 /* [ int : string : int : big_map string int : unit ] */ }
                  { /* [ int : string : int : big_map string int : unit ] */ } ;
                SWAP
                /* [ string : int : int : big_map string int : unit ] */ ;
                DIP { ADD
                      /* [ int : big_map string int : unit ] */ ;
                      SOME
                      /* [ option int : big_map string int : unit ] */ }
                /* [ string : option int : big_map string int : unit ] */ ;
                UPDATE
                /* [ big_map string int : unit ] */ }
         /* [ big_map string int : unit ] */ ;
         PAIR
         /* [ pair (big_map string int) unit ] */ ;
         NIL operation
         /* [ list operation : pair (big_map string int) unit ] */ ;
         PAIR
         /* [ pair (list operation) (big_map string int) unit ] */ } }
Well typed (Gas remaining: 1039995.487 units remaining)	michelson_test_scripts/attic/cadr_annotation.tz
{ parameter (pair (pair %p1 unit (string %no_name)) bool) ;
  storage unit ;
  code { CAR @param
         /* [ pair (pair unit string) bool ] */ ;
         CADR @name %no_name ;
         DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039993.685 units remaining)	michelson_test_scripts/attic/concat.tz
{ parameter string ;
  storage string ;
  code { DUP
         /* [ pair string string : pair string string ] */ ;
         DIP { CDR
               /* [ string ] */ ;
               NIL string
               /* [ list string : string ] */ ;
               SWAP
               /* [ string : list string ] */ ;
               CONS
               /* [ list string ] */ }
         /* [ pair string string : list string ] */ ;
         CAR
         /* [ string : list string ] */ ;
         CONS
         /* [ list string ] */ ;
         CONCAT
         /* [ string ] */ ;
         NIL operation
         /* [ list operation : string ] */ ;
         PAIR
         /* [ pair (list operation) string ] */ } }
Well typed (Gas remaining: 1039990.665 units remaining)	michelson_test_scripts/attic/conditionals.tz
{ parameter (or string (option int)) ;
  storage string ;
  code { CAR
         /* [ or string (option int) ] */ ;
         IF_LEFT
           { /* [ string ] */ }
           { IF_NONE
               { FAIL }
               { PUSH int 0
                 /* [ int : int ] */ ;
                 CMPGT ;
                 IF { FAIL } { PUSH string "" /* [ string ] */ } } } ;
         NIL operation
         /* [ list operation : string ] */ ;
         PAIR
         /* [ pair (list operation) string ] */ } }
Well typed (Gas remaining: 1039993.903 units remaining)	michelson_test_scripts/attic/cons_twice.tz
{ parameter nat ;
  storage (list nat) ;
  code { DUP
         /* [ pair nat (list nat) : pair nat (list nat) ] */ ;
         CAR
         /* [ nat : pair nat (list nat) ] */ ;
         DIP { CDR /* [ list nat ] */ }
         /* [ nat : list nat ] */ ;
         DUP
         /* [ nat : nat : list nat ] */ ;
         DIP { CONS /* [ list nat ] */ }
         /* [ nat : list nat ] */ ;
         CONS
         /* [ list nat ] */ ;
         NIL operation
         /* [ list operation : list nat ] */ ;
         PAIR
         /* [ pair (list operation) (list nat) ] */ } }
Well typed (Gas remaining: 1039976.402 units remaining)	michelson_test_scripts/attic/cps_fact.tz
{ storage nat ;
  parameter nat ;
  code { UNPAIR
         /* [ nat : nat ] */ ;
         DIP { SELF
               /* [ contract nat : nat ] */ ;
               ADDRESS
               /* [ address : nat ] */ ;
               SENDER
               /* [ address : address : nat ] */ ;
               IFCMPEQ { /* [ nat ] */ } { DROP /* [] */ ; PUSH @storage nat 1 /* [ nat ] */ } }
         /* [ nat : nat ] */ ;
         DUP
         /* [ nat : nat : nat ] */ ;
         PUSH nat 1
         /* [ nat : nat : nat : nat ] */ ;
         IFCMPGE
           { DROP
             /* [ nat ] */ ;
             NIL operation
             /* [ list operation : nat ] */ ;
             PAIR
             /* [ pair (list operation) nat ] */ }
           { PUSH nat 1
             /* [ nat : nat : nat ] */ ;
             SWAP
             /* [ nat : nat : nat ] */ ;
             SUB @parameter
             /* [ int : nat ] */ ;
             ISNAT
             /* [ option nat : nat ] */ ;
             IF_NONE
               { NIL operation
                 /* [ list operation : nat ] */ ;
                 PAIR
                 /* [ pair (list operation) nat ] */ }
               { DUP
                 /* [ nat : nat : nat ] */ ;
                 DIP { PUSH nat 1
                       /* [ nat : nat : nat ] */ ;
                       ADD
                       /* [ nat : nat ] */ ;
                       MUL @storage
                       /* [ nat ] */ }
                 /* [ nat : nat ] */ ;
                 SWAP
                 /* [ nat : nat ] */ ;
                 DIP { DIP { SELF /* [ contract nat ] */ ; PUSH mutez 0 /* [ mutez : contract nat ] */ }
                       /* [ nat : mutez : contract nat ] */ ;
                       TRANSFER_TOKENS
                       /* [ operation ] */ ;
                       NIL operation
                       /* [ list operation : operation ] */ ;
                       SWAP
                       /* [ operation : list operation ] */ ;
                       CONS
                       /* [ list operation ] */ }
                 /* [ nat : list operation ] */ ;
                 SWAP
                 /* [ list operation : nat ] */ ;
                 PAIR
                 /* [ pair (list operation) nat ] */ } } } }
Well typed (Gas remaining: 1039990.583 units remaining)	michelson_test_scripts/attic/create_add1_lists.tz
{ parameter unit ;
  storage address ;
  code { DROP
         /* [] */ ;
         NIL int /* [ list int ] */
         /* [ list int ] */ ;
         AMOUNT
         /* [ list int ] */ ;
         NONE key_hash /* [ int : int ] */
         /* [ option key_hash : mutez : list int ] */ ;
         CREATE_CONTRACT
           { parameter (list int /* [ list operation : list int ] */)
             /* [ int ] */ ;
             storage (list int)
             /* [ pair (list operation) (list int) ] */ ;
             code { CAR ; MAP { PUSH int 1 ; ADD } ; NIL operation ; PAIR } }
         /* [ operation : address ] */ ;
         NIL operation
         /* [ list operation : operation : address ] */ ;
         SWAP
         /* [ operation : list operation : address ] */ ;
         CONS
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039976.005 units remaining)	michelson_test_scripts/attic/data_publisher.tz
{ parameter (pair signature (pair string nat)) ;
  storage (pair (pair key nat) string) ;
  code { DUP
         /* [ pair (pair signature string nat) (pair key nat) string
            : pair (pair signature string nat) (pair key nat) string ] */ ;
         CAR
         /* [ pair signature string nat
            : pair (pair signature string nat) (pair key nat) string ] */ ;
         DIP { CDR
               /* [ pair (pair key nat) string ] */ ;
               DUP
               /* [ pair (pair key nat) string : pair (pair key nat) string ] */ }
         /* [ pair signature string nat : pair (pair key nat) string
            : pair (pair key nat) string ] */ ;
         SWAP
         /* [ pair (pair key nat) string : pair signature string nat
            : pair (pair key nat) string ] */ ;
         DIP { DUP
               /* [ pair signature string nat : pair signature string nat
                  : pair (pair key nat) string ] */ }
         /* [ pair (pair key nat) string : pair signature string nat
            : pair signature string nat : pair (pair key nat) string ] */ ;
         CAAR ;
         DIP { DUP
               /* [ pair signature string nat : pair signature string nat
                  : pair signature string nat : pair (pair key nat) string ] */ ;
               CAR
               /* [ signature : pair signature string nat : pair signature string nat
                  : pair (pair key nat) string ] */ ;
               DIP { CDR
                     /* [ pair string nat : pair signature string nat : pair (pair key nat) string ] */ ;
                     PACK
                     /* [ bytes : pair signature string nat : pair (pair key nat) string ] */ ;
                     BLAKE2B
                     /* [ bytes : pair signature string nat : pair (pair key nat) string ] */ }
               /* [ signature : bytes : pair signature string nat
                  : pair (pair key nat) string ] */ }
         /* [ key : signature : bytes : pair signature string nat
            : pair (pair key nat) string ] */ ;
         CHECK_SIGNATURE
         /* [ bool : pair signature string nat : pair (pair key nat) string ] */ ;
         IF { CDR
              /* [ pair string nat : pair (pair key nat) string ] */ ;
              DUP
              /* [ pair string nat : pair string nat : pair (pair key nat) string ] */ ;
              DIP { CAR
                    /* [ string : pair (pair key nat) string ] */ ;
                    DIP { CAAR }
                    /* [ string : key ] */ }
              /* [ pair string nat : string : key ] */ ;
              CDR
              /* [ nat : string : key ] */ ;
              PUSH nat 1
              /* [ nat : nat : string : key ] */ ;
              ADD
              /* [ nat : string : key ] */ ;
              DIP { SWAP /* [ key : string ] */ }
              /* [ nat : key : string ] */ ;
              SWAP
              /* [ key : nat : string ] */ ;
              PAIR
              /* [ pair key nat : string ] */ ;
              PAIR
              /* [ pair (pair key nat) string ] */ ;
              NIL operation
              /* [ list operation : pair (pair key nat) string ] */ ;
              PAIR
              /* [ pair (list operation) (pair key nat) string ] */ }
            { FAIL } } }
Well typed (Gas remaining: 1039983.548 units remaining)	michelson_test_scripts/attic/dispatch.tz
{ parameter (or string (pair string (lambda unit string))) ;
  storage (pair string (map string (lambda unit string))) ;
  code { DUP
         /* [ pair (or string (pair string (lambda unit string)))
                 string
                 (map string (lambda unit string))
            : pair (or string (pair string (lambda unit string)))
                 string
                 (map string (lambda unit string)) ] */ ;
         DIP { CDDR }
         /* [ pair (or string (pair string (lambda unit string)))
                 string
                 (map string (lambda unit string)) : map string (lambda unit string) ] */ ;
         CAR
         /* [ or string (pair string (lambda unit string))
            : map string (lambda unit string) ] */ ;
         IF_LEFT
           { DIP { DUP
                   /* [ map string (lambda unit string) : map string (lambda unit string) ] */ }
             /* [ string : map string (lambda unit string)
                : map string (lambda unit string) ] */ ;
             GET
             /* [ option (lambda unit string) : map string (lambda unit string) ] */ ;
             IF_NONE
               { FAIL }
               { /* [ lambda unit string : map string (lambda unit string) ] */ } ;
             UNIT
             /* [ unit : lambda unit string : map string (lambda unit string) ] */ ;
             EXEC
             /* [ string : map string (lambda unit string) ] */ }
           { DUP
             /* [ pair string (lambda unit string) : pair string (lambda unit string)
                : map string (lambda unit string) ] */ ;
             CAR
             /* [ string : pair string (lambda unit string)
                : map string (lambda unit string) ] */ ;
             DIP { CDR
                   /* [ lambda unit string : map string (lambda unit string) ] */ ;
                   SOME
                   /* [ option (lambda unit string) : map string (lambda unit string) ] */ }
             /* [ string : option (lambda unit string) : map string (lambda unit string) ] */ ;
             UPDATE
             /* [ map string (lambda unit string) ] */ ;
             PUSH string ""
             /* [ string : map string (lambda unit string) ] */ } ;
         PAIR
         /* [ pair string (map string (lambda unit string)) ] */ ;
         NIL operation
         /* [ list operation : pair string (map string (lambda unit string)) ] */ ;
         PAIR
         /* [ pair (list operation) string (map string (lambda unit string)) ] */ } }
Well typed (Gas remaining: 1039998.017 units remaining)	michelson_test_scripts/attic/empty.tz
{ parameter unit ;
  storage unit ;
  code { CDR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039993.168 units remaining)	michelson_test_scripts/attic/fail_amount.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         AMOUNT
         /* [ mutez ] */ ;
         PUSH mutez 10000000
         /* [ mutez : mutez ] */ ;
         CMPGT ;
         IF { FAIL } { /* [] */ } ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039988.163 units remaining)	michelson_test_scripts/attic/faucet.tz
{ parameter key_hash ;
  storage timestamp ;
  code { UNPAIR
         /* [ key_hash : timestamp ] */ ;
         SWAP
         /* [ timestamp : key_hash ] */ ;
         PUSH int 300
         /* [ int : timestamp : key_hash ] */ ;
         ADD @FIVE_MINUTES_LATER
         /* [ timestamp : key_hash ] */ ;
         NOW
         /* [ timestamp : timestamp : key_hash ] */ ;
         ASSERT_CMPGE ;
         IMPLICIT_ACCOUNT
         /* [ contract unit ] */ ;
         PUSH mutez 1000000
         /* [ mutez : contract unit ] */ ;
         UNIT
         /* [ unit : mutez : contract unit ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         NIL operation
         /* [ list operation : operation ] */ ;
         SWAP
         /* [ operation : list operation ] */ ;
         CONS
         /* [ list operation ] */ ;
         DIP { NOW /* [ timestamp ] */ }
         /* [ list operation : timestamp ] */ ;
         PAIR
         /* [ pair (list operation) timestamp ] */ } }
Well typed (Gas remaining: 1039676.449 units remaining)	michelson_test_scripts/attic/forward.tz
{ parameter (or string nat) ;
  storage
    (pair (pair nat (pair mutez mutez))
          (pair (pair nat (pair timestamp timestamp))
                (pair (pair mutez mutez) (pair (pair address address) address)))) ;
  code { DUP
         /* [ pair (or string nat)
                 (pair nat mutez mutez)
                 (pair nat timestamp timestamp)
                 (pair mutez mutez)
                 (pair address address)
                 address
            : pair (or string nat)
                 (pair nat mutez mutez)
                 (pair nat timestamp timestamp)
                 (pair mutez mutez)
                 (pair address address)
                 address ] */ ;
         CDDADDR ;
         PUSH int
              86400
         /* [ int : timestamp
            : pair (or string nat)
                 (pair nat mutez mutez)
                 (pair nat timestamp timestamp)
                 (pair mutez mutez)
                 (pair address address)
                 address ] */ ;
         SWAP
         /* [ timestamp : int
            : pair (or string nat)
                 (pair nat mutez mutez)
                 (pair nat timestamp timestamp)
                 (pair mutez mutez)
                 (pair address address)
                 address ] */ ;
         ADD
         /* [ timestamp
            : pair (or string nat)
                 (pair nat mutez mutez)
                 (pair nat timestamp timestamp)
                 (pair mutez mutez)
                 (pair address address)
                 address ] */ ;
         NOW
         /* [ timestamp : timestamp
            : pair (or string nat)
                 (pair nat mutez mutez)
                 (pair nat timestamp timestamp)
                 (pair mutez mutez)
                 (pair address address)
                 address ] */ ;
         COMPARE
         /* [ int
            : pair (or string nat)
                 (pair nat mutez mutez)
                 (pair nat timestamp timestamp)
                 (pair mutez mutez)
                 (pair address address)
                 address ] */ ;
         LT
         /* [ bool
            : pair (or string nat)
                 (pair nat mutez mutez)
                 (pair nat timestamp timestamp)
                 (pair mutez mutez)
                 (pair address address)
                 address ] */ ;
         IF { DUP
              /* [ pair (or string nat)
                      (pair nat mutez mutez)
                      (pair nat timestamp timestamp)
                      (pair mutez mutez)
                      (pair address address)
                      address
                 : pair (or string nat)
                      (pair nat mutez mutez)
                      (pair nat timestamp timestamp)
                      (pair mutez mutez)
                      (pair address address)
                      address ] */ ;
              CAR
              /* [ or string nat
                 : pair (or string nat)
                      (pair nat mutez mutez)
                      (pair nat timestamp timestamp)
                      (pair mutez mutez)
                      (pair address address)
                      address ] */ ;
              IF_LEFT
                { DUP
                  /* [ string : string
                     : pair (or string nat)
                          (pair nat mutez mutez)
                          (pair nat timestamp timestamp)
                          (pair mutez mutez)
                          (pair address address)
                          address ] */ ;
                  PUSH string
                       "buyer"
                  /* [ string : string : string
                     : pair (or string nat)
                          (pair nat mutez mutez)
                          (pair nat timestamp timestamp)
                          (pair mutez mutez)
                          (pair address address)
                          address ] */ ;
                  COMPARE
                  /* [ int : string
                     : pair (or string nat)
                          (pair nat mutez mutez)
                          (pair nat timestamp timestamp)
                          (pair mutez mutez)
                          (pair address address)
                          address ] */ ;
                  EQ
                  /* [ bool : string
                     : pair (or string nat)
                          (pair nat mutez mutez)
                          (pair nat timestamp timestamp)
                          (pair mutez mutez)
                          (pair address address)
                          address ] */ ;
                  IF { DROP
                       /* [ pair (or string nat)
                               (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address ] */ ;
                       DUP
                       /* [ pair (or string nat)
                               (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address
                          : pair (or string nat)
                               (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address ] */ ;
                       CDADAR ;
                       DIP { AMOUNT
                             /* [ mutez
                                : pair (or string nat)
                                     (pair nat mutez mutez)
                                     (pair nat timestamp timestamp)
                                     (pair mutez mutez)
                                     (pair address address)
                                     address ] */ }
                       /* [ mutez : mutez
                          : pair (or string nat)
                               (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address ] */ ;
                       ADD
                       /* [ mutez
                          : pair (or string nat)
                               (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address ] */ ;
                       DIP { DUP
                             /* [ pair (or string nat)
                                     (pair nat mutez mutez)
                                     (pair nat timestamp timestamp)
                                     (pair mutez mutez)
                                     (pair address address)
                                     address
                                : pair (or string nat)
                                     (pair nat mutez mutez)
                                     (pair nat timestamp timestamp)
                                     (pair mutez mutez)
                                     (pair address address)
                                     address ] */ ;
                             CDADDR }
                       /* [ mutez : mutez
                          : pair (or string nat)
                               (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address ] */ ;
                       PAIR
                       /* [ pair mutez mutez
                          : pair (or string nat)
                               (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address ] */ ;
                       PUSH nat
                            0
                       /* [ nat : pair mutez mutez
                          : pair (or string nat)
                               (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address ] */ ;
                       PAIR
                       /* [ pair nat mutez mutez
                          : pair (or string nat)
                               (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address ] */ ;
                       DIP { CDDR }
                       /* [ pair nat mutez mutez
                          : pair (pair nat timestamp timestamp) (pair mutez mutez) (pair address address) address ] */ ;
                       PAIR
                       /* [ pair (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address ] */ ;
                       NIL operation
                       /* [ list operation
                          : pair (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address ] */ ;
                       PAIR
                       /* [ pair (list operation)
                               (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address ] */ }
                     { PUSH string
                            "seller"
                       /* [ string : string
                          : pair (or string nat)
                               (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address ] */ ;
                       COMPARE
                       /* [ int
                          : pair (or string nat)
                               (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address ] */ ;
                       EQ
                       /* [ bool
                          : pair (or string nat)
                               (pair nat mutez mutez)
                               (pair nat timestamp timestamp)
                               (pair mutez mutez)
                               (pair address address)
                               address ] */ ;
                       IF { DUP
                            /* [ pair (or string nat)
                                    (pair nat mutez mutez)
                                    (pair nat timestamp timestamp)
                                    (pair mutez mutez)
                                    (pair address address)
                                    address
                               : pair (or string nat)
                                    (pair nat mutez mutez)
                                    (pair nat timestamp timestamp)
                                    (pair mutez mutez)
                                    (pair address address)
                                    address ] */ ;
                            CDADDR ;
                            DIP { AMOUNT
                                  /* [ mutez
                                     : pair (or string nat)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ }
                            /* [ mutez : mutez
                               : pair (or string nat)
                                    (pair nat mutez mutez)
                                    (pair nat timestamp timestamp)
                                    (pair mutez mutez)
                                    (pair address address)
                                    address ] */ ;
                            ADD
                            /* [ mutez
                               : pair (or string nat)
                                    (pair nat mutez mutez)
                                    (pair nat timestamp timestamp)
                                    (pair mutez mutez)
                                    (pair address address)
                                    address ] */ ;
                            DIP { DUP
                                  /* [ pair (or string nat)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address
                                     : pair (or string nat)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  CDADAR }
                            /* [ mutez : mutez
                               : pair (or string nat)
                                    (pair nat mutez mutez)
                                    (pair nat timestamp timestamp)
                                    (pair mutez mutez)
                                    (pair address address)
                                    address ] */ ;
                            SWAP
                            /* [ mutez : mutez
                               : pair (or string nat)
                                    (pair nat mutez mutez)
                                    (pair nat timestamp timestamp)
                                    (pair mutez mutez)
                                    (pair address address)
                                    address ] */ ;
                            PAIR
                            /* [ pair mutez mutez
                               : pair (or string nat)
                                    (pair nat mutez mutez)
                                    (pair nat timestamp timestamp)
                                    (pair mutez mutez)
                                    (pair address address)
                                    address ] */ ;
                            PUSH nat
                                 0
                            /* [ nat : pair mutez mutez
                               : pair (or string nat)
                                    (pair nat mutez mutez)
                                    (pair nat timestamp timestamp)
                                    (pair mutez mutez)
                                    (pair address address)
                                    address ] */ ;
                            PAIR
                            /* [ pair nat mutez mutez
                               : pair (or string nat)
                                    (pair nat mutez mutez)
                                    (pair nat timestamp timestamp)
                                    (pair mutez mutez)
                                    (pair address address)
                                    address ] */ ;
                            DIP { CDDR }
                            /* [ pair nat mutez mutez
                               : pair (pair nat timestamp timestamp) (pair mutez mutez) (pair address address) address ] */ ;
                            PAIR
                            /* [ pair (pair nat mutez mutez)
                                    (pair nat timestamp timestamp)
                                    (pair mutez mutez)
                                    (pair address address)
                                    address ] */ ;
                            NIL operation
                            /* [ list operation
                               : pair (pair nat mutez mutez)
                                    (pair nat timestamp timestamp)
                                    (pair mutez mutez)
                                    (pair address address)
                                    address ] */ ;
                            PAIR
                            /* [ pair (list operation)
                                    (pair nat mutez mutez)
                                    (pair nat timestamp timestamp)
                                    (pair mutez mutez)
                                    (pair address address)
                                    address ] */ }
                          { FAIL } } }
                { FAIL } }
            { BALANCE
              /* [ mutez
                 : pair (or string nat)
                      (pair nat mutez mutez)
                      (pair nat timestamp timestamp)
                      (pair mutez mutez)
                      (pair address address)
                      address ] */ ;
              PUSH mutez
                   0
              /* [ mutez : mutez
                 : pair (or string nat)
                      (pair nat mutez mutez)
                      (pair nat timestamp timestamp)
                      (pair mutez mutez)
                      (pair address address)
                      address ] */ ;
              IFCMPEQ
                { FAIL }
                { /* [ pair (or string nat)
                          (pair nat mutez mutez)
                          (pair nat timestamp timestamp)
                          (pair mutez mutez)
                          (pair address address)
                          address ] */ } ;
              DUP
              /* [ pair (or string nat)
                      (pair nat mutez mutez)
                      (pair nat timestamp timestamp)
                      (pair mutez mutez)
                      (pair address address)
                      address
                 : pair (or string nat)
                      (pair nat mutez mutez)
                      (pair nat timestamp timestamp)
                      (pair mutez mutez)
                      (pair address address)
                      address ] */ ;
              CDDAAR ;
              DIP { DUP
                    /* [ pair (or string nat)
                            (pair nat mutez mutez)
                            (pair nat timestamp timestamp)
                            (pair mutez mutez)
                            (pair address address)
                            address
                       : pair (or string nat)
                            (pair nat mutez mutez)
                            (pair nat timestamp timestamp)
                            (pair mutez mutez)
                            (pair address address)
                            address ] */ ;
                    CDDDADR }
              /* [ nat : mutez
                 : pair (or string nat)
                      (pair nat mutez mutez)
                      (pair nat timestamp timestamp)
                      (pair mutez mutez)
                      (pair address address)
                      address ] */ ;
              MUL
              /* [ mutez
                 : pair (or string nat)
                      (pair nat mutez mutez)
                      (pair nat timestamp timestamp)
                      (pair mutez mutez)
                      (pair address address)
                      address ] */ ;
              PUSH nat
                   2
              /* [ nat : mutez
                 : pair (or string nat)
                      (pair nat mutez mutez)
                      (pair nat timestamp timestamp)
                      (pair mutez mutez)
                      (pair address address)
                      address ] */ ;
              MUL
              /* [ mutez
                 : pair (or string nat)
                      (pair nat mutez mutez)
                      (pair nat timestamp timestamp)
                      (pair mutez mutez)
                      (pair address address)
                      address ] */ ;
              BALANCE
              /* [ mutez : mutez
                 : pair (or string nat)
                      (pair nat mutez mutez)
                      (pair nat timestamp timestamp)
                      (pair mutez mutez)
                      (pair address address)
                      address ] */ ;
              COMPARE
              /* [ int
                 : pair (or string nat)
                      (pair nat mutez mutez)
                      (pair nat timestamp timestamp)
                      (pair mutez mutez)
                      (pair address address)
                      address ] */ ;
              LT
              /* [ bool
                 : pair (or string nat)
                      (pair nat mutez mutez)
                      (pair nat timestamp timestamp)
                      (pair mutez mutez)
                      (pair address address)
                      address ] */ ;
              IF { CDR
                   /* [ pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   DUP
                   /* [ pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   CADAR ;
                   DIP { DUP
                         /* [ pair (pair nat mutez mutez)
                                 (pair nat timestamp timestamp)
                                 (pair mutez mutez)
                                 (pair address address)
                                 address
                            : pair (pair nat mutez mutez)
                                 (pair nat timestamp timestamp)
                                 (pair mutez mutez)
                                 (pair address address)
                                 address ] */ ;
                         CDDDAAR }
                   /* [ mutez : address
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   DIP { CONTRACT
                           unit
                         /* [ option (contract unit)
                            : pair (pair nat mutez mutez)
                                 (pair nat timestamp timestamp)
                                 (pair mutez mutez)
                                 (pair address address)
                                 address ] */ ;
                         ASSERT_SOME }
                   /* [ mutez : contract unit
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   UNIT
                   /* [ unit : mutez : contract unit
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   TRANSFER_TOKENS
                   /* [ operation
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   NIL operation
                   /* [ list operation : operation
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   SWAP
                   /* [ operation : list operation
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   CONS
                   /* [ list operation
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   SWAP
                   /* [ pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   DUP
                   /* [ pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   CADDR ;
                   DIP { DUP
                         /* [ pair (pair nat mutez mutez)
                                 (pair nat timestamp timestamp)
                                 (pair mutez mutez)
                                 (pair address address)
                                 address
                            : pair (pair nat mutez mutez)
                                 (pair nat timestamp timestamp)
                                 (pair mutez mutez)
                                 (pair address address)
                                 address : list operation ] */ ;
                         CDDDADR }
                   /* [ mutez : address
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   DIP { CONTRACT
                           unit
                         /* [ option (contract unit)
                            : pair (pair nat mutez mutez)
                                 (pair nat timestamp timestamp)
                                 (pair mutez mutez)
                                 (pair address address)
                                 address : list operation ] */ ;
                         ASSERT_SOME }
                   /* [ mutez : contract unit
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   UNIT
                   /* [ unit : mutez : contract unit
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   TRANSFER_TOKENS
                   /* [ operation
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   SWAP
                   /* [ pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : operation : list operation ] */ ;
                   DIP { CONS /* [ list operation ] */ }
                   /* [ pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   DUP
                   /* [ pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   CADAR ;
                   DIP { DUP
                         /* [ pair (pair nat mutez mutez)
                                 (pair nat timestamp timestamp)
                                 (pair mutez mutez)
                                 (pair address address)
                                 address
                            : pair (pair nat mutez mutez)
                                 (pair nat timestamp timestamp)
                                 (pair mutez mutez)
                                 (pair address address)
                                 address : list operation ] */ ;
                         CADDR }
                   /* [ mutez : mutez
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   ADD
                   /* [ mutez
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   BALANCE
                   /* [ mutez : mutez
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   SUB_MUTEZ
                   /* [ option mutez
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   ASSERT_SOME ;
                   DIP { DUP
                         /* [ pair (pair nat mutez mutez)
                                 (pair nat timestamp timestamp)
                                 (pair mutez mutez)
                                 (pair address address)
                                 address
                            : pair (pair nat mutez mutez)
                                 (pair nat timestamp timestamp)
                                 (pair mutez mutez)
                                 (pair address address)
                                 address : list operation ] */ ;
                         CDDDDR }
                   /* [ mutez : address
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   DIP { CONTRACT
                           unit
                         /* [ option (contract unit)
                            : pair (pair nat mutez mutez)
                                 (pair nat timestamp timestamp)
                                 (pair mutez mutez)
                                 (pair address address)
                                 address : list operation ] */ ;
                         ASSERT_SOME }
                   /* [ mutez : contract unit
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   UNIT
                   /* [ unit : mutez : contract unit
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   TRANSFER_TOKENS
                   /* [ operation
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address : list operation ] */ ;
                   DIP { SWAP
                         /* [ list operation
                            : pair (pair nat mutez mutez)
                                 (pair nat timestamp timestamp)
                                 (pair mutez mutez)
                                 (pair address address)
                                 address ] */ }
                   /* [ operation : list operation
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   CONS
                   /* [ list operation
                      : pair (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   PAIR
                   /* [ pair (list operation)
                           (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ }
                 { DUP
                   /* [ pair (or string nat)
                           (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address
                      : pair (or string nat)
                           (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   CDDADAR ;
                   NOW
                   /* [ timestamp : timestamp
                      : pair (or string nat)
                           (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   COMPARE
                   /* [ int
                      : pair (or string nat)
                           (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   LT
                   /* [ bool
                      : pair (or string nat)
                           (pair nat mutez mutez)
                           (pair nat timestamp timestamp)
                           (pair mutez mutez)
                           (pair address address)
                           address ] */ ;
                   IF { FAIL }
                      { DUP
                        /* [ pair (or string nat)
                                (pair nat mutez mutez)
                                (pair nat timestamp timestamp)
                                (pair mutez mutez)
                                (pair address address)
                                address
                           : pair (or string nat)
                                (pair nat mutez mutez)
                                (pair nat timestamp timestamp)
                                (pair mutez mutez)
                                (pair address address)
                                address ] */ ;
                        CDDADAR ;
                        PUSH int
                             86400
                        /* [ int : timestamp
                           : pair (or string nat)
                                (pair nat mutez mutez)
                                (pair nat timestamp timestamp)
                                (pair mutez mutez)
                                (pair address address)
                                address ] */ ;
                        ADD
                        /* [ timestamp
                           : pair (or string nat)
                                (pair nat mutez mutez)
                                (pair nat timestamp timestamp)
                                (pair mutez mutez)
                                (pair address address)
                                address ] */ ;
                        NOW
                        /* [ timestamp : timestamp
                           : pair (or string nat)
                                (pair nat mutez mutez)
                                (pair nat timestamp timestamp)
                                (pair mutez mutez)
                                (pair address address)
                                address ] */ ;
                        COMPARE
                        /* [ int
                           : pair (or string nat)
                                (pair nat mutez mutez)
                                (pair nat timestamp timestamp)
                                (pair mutez mutez)
                                (pair address address)
                                address ] */ ;
                        LT
                        /* [ bool
                           : pair (or string nat)
                                (pair nat mutez mutez)
                                (pair nat timestamp timestamp)
                                (pair mutez mutez)
                                (pair address address)
                                address ] */ ;
                        IF { DUP
                             /* [ pair (or string nat)
                                     (pair nat mutez mutez)
                                     (pair nat timestamp timestamp)
                                     (pair mutez mutez)
                                     (pair address address)
                                     address
                                : pair (or string nat)
                                     (pair nat mutez mutez)
                                     (pair nat timestamp timestamp)
                                     (pair mutez mutez)
                                     (pair address address)
                                     address ] */ ;
                             CAR
                             /* [ or string nat
                                : pair (or string nat)
                                     (pair nat mutez mutez)
                                     (pair nat timestamp timestamp)
                                     (pair mutez mutez)
                                     (pair address address)
                                     address ] */ ;
                             IF_LEFT
                               { PUSH string
                                      "buyer"
                                 /* [ string : string
                                    : pair (or string nat)
                                         (pair nat mutez mutez)
                                         (pair nat timestamp timestamp)
                                         (pair mutez mutez)
                                         (pair address address)
                                         address ] */ ;
                                 COMPARE
                                 /* [ int
                                    : pair (or string nat)
                                         (pair nat mutez mutez)
                                         (pair nat timestamp timestamp)
                                         (pair mutez mutez)
                                         (pair address address)
                                         address ] */ ;
                                 EQ
                                 /* [ bool
                                    : pair (or string nat)
                                         (pair nat mutez mutez)
                                         (pair nat timestamp timestamp)
                                         (pair mutez mutez)
                                         (pair address address)
                                         address ] */ ;
                                 IF { DUP
                                      /* [ pair (or string nat)
                                              (pair nat mutez mutez)
                                              (pair nat timestamp timestamp)
                                              (pair mutez mutez)
                                              (pair address address)
                                              address
                                         : pair (or string nat)
                                              (pair nat mutez mutez)
                                              (pair nat timestamp timestamp)
                                              (pair mutez mutez)
                                              (pair address address)
                                              address ] */ ;
                                      CDADAR ;
                                      DIP { AMOUNT
                                            /* [ mutez
                                               : pair (or string nat)
                                                    (pair nat mutez mutez)
                                                    (pair nat timestamp timestamp)
                                                    (pair mutez mutez)
                                                    (pair address address)
                                                    address ] */ }
                                      /* [ mutez : mutez
                                         : pair (or string nat)
                                              (pair nat mutez mutez)
                                              (pair nat timestamp timestamp)
                                              (pair mutez mutez)
                                              (pair address address)
                                              address ] */ ;
                                      ADD
                                      /* [ mutez
                                         : pair (or string nat)
                                              (pair nat mutez mutez)
                                              (pair nat timestamp timestamp)
                                              (pair mutez mutez)
                                              (pair address address)
                                              address ] */ ;
                                      DUP
                                      /* [ mutez : mutez
                                         : pair (or string nat)
                                              (pair nat mutez mutez)
                                              (pair nat timestamp timestamp)
                                              (pair mutez mutez)
                                              (pair address address)
                                              address ] */ ;
                                      DIP 2
                                          { DUP
                                            /* [ pair (or string nat)
                                                    (pair nat mutez mutez)
                                                    (pair nat timestamp timestamp)
                                                    (pair mutez mutez)
                                                    (pair address address)
                                                    address
                                               : pair (or string nat)
                                                    (pair nat mutez mutez)
                                                    (pair nat timestamp timestamp)
                                                    (pair mutez mutez)
                                                    (pair address address)
                                                    address ] */ ;
                                            CDDAAR ;
                                            DIP { DUP
                                                  /* [ pair (or string nat)
                                                          (pair nat mutez mutez)
                                                          (pair nat timestamp timestamp)
                                                          (pair mutez mutez)
                                                          (pair address address)
                                                          address
                                                     : pair (or string nat)
                                                          (pair nat mutez mutez)
                                                          (pair nat timestamp timestamp)
                                                          (pair mutez mutez)
                                                          (pair address address)
                                                          address ] */ ;
                                                  CDDDAAR }
                                            /* [ nat : mutez
                                               : pair (or string nat)
                                                    (pair nat mutez mutez)
                                                    (pair nat timestamp timestamp)
                                                    (pair mutez mutez)
                                                    (pair address address)
                                                    address ] */ ;
                                            MUL
                                            /* [ mutez
                                               : pair (or string nat)
                                                    (pair nat mutez mutez)
                                                    (pair nat timestamp timestamp)
                                                    (pair mutez mutez)
                                                    (pair address address)
                                                    address ] */ }
                                      /* [ mutez : mutez : mutez
                                         : pair (or string nat)
                                              (pair nat mutez mutez)
                                              (pair nat timestamp timestamp)
                                              (pair mutez mutez)
                                              (pair address address)
                                              address ] */ ;
                                      DIP { COMPARE
                                            /* [ int
                                               : pair (or string nat)
                                                    (pair nat mutez mutez)
                                                    (pair nat timestamp timestamp)
                                                    (pair mutez mutez)
                                                    (pair address address)
                                                    address ] */ ;
                                            GT
                                            /* [ bool
                                               : pair (or string nat)
                                                    (pair nat mutez mutez)
                                                    (pair nat timestamp timestamp)
                                                    (pair mutez mutez)
                                                    (pair address address)
                                                    address ] */ ;
                                            IF { FAIL }
                                               { /* [ pair (or string nat)
                                                         (pair nat mutez mutez)
                                                         (pair nat timestamp timestamp)
                                                         (pair mutez mutez)
                                                         (pair address address)
                                                         address ] */ } }
                                      /* [ mutez
                                         : pair (or string nat)
                                              (pair nat mutez mutez)
                                              (pair nat timestamp timestamp)
                                              (pair mutez mutez)
                                              (pair address address)
                                              address ] */ ;
                                      DIP { DUP
                                            /* [ pair (or string nat)
                                                    (pair nat mutez mutez)
                                                    (pair nat timestamp timestamp)
                                                    (pair mutez mutez)
                                                    (pair address address)
                                                    address
                                               : pair (or string nat)
                                                    (pair nat mutez mutez)
                                                    (pair nat timestamp timestamp)
                                                    (pair mutez mutez)
                                                    (pair address address)
                                                    address ] */ ;
                                            CDADDR }
                                      /* [ mutez : mutez
                                         : pair (or string nat)
                                              (pair nat mutez mutez)
                                              (pair nat timestamp timestamp)
                                              (pair mutez mutez)
                                              (pair address address)
                                              address ] */ ;
                                      PAIR
                                      /* [ pair mutez mutez
                                         : pair (or string nat)
                                              (pair nat mutez mutez)
                                              (pair nat timestamp timestamp)
                                              (pair mutez mutez)
                                              (pair address address)
                                              address ] */ ;
                                      PUSH nat
                                           0
                                      /* [ nat : pair mutez mutez
                                         : pair (or string nat)
                                              (pair nat mutez mutez)
                                              (pair nat timestamp timestamp)
                                              (pair mutez mutez)
                                              (pair address address)
                                              address ] */ ;
                                      PAIR
                                      /* [ pair nat mutez mutez
                                         : pair (or string nat)
                                              (pair nat mutez mutez)
                                              (pair nat timestamp timestamp)
                                              (pair mutez mutez)
                                              (pair address address)
                                              address ] */ ;
                                      DIP { CDDR }
                                      /* [ pair nat mutez mutez
                                         : pair (pair nat timestamp timestamp) (pair mutez mutez) (pair address address) address ] */ ;
                                      PAIR
                                      /* [ pair (pair nat mutez mutez)
                                              (pair nat timestamp timestamp)
                                              (pair mutez mutez)
                                              (pair address address)
                                              address ] */ ;
                                      NIL operation
                                      /* [ list operation
                                         : pair (pair nat mutez mutez)
                                              (pair nat timestamp timestamp)
                                              (pair mutez mutez)
                                              (pair address address)
                                              address ] */ ;
                                      PAIR
                                      /* [ pair (list operation)
                                              (pair nat mutez mutez)
                                              (pair nat timestamp timestamp)
                                              (pair mutez mutez)
                                              (pair address address)
                                              address ] */ }
                                    { FAIL } }
                               { FAIL } }
                           { DUP
                             /* [ pair (or string nat)
                                     (pair nat mutez mutez)
                                     (pair nat timestamp timestamp)
                                     (pair mutez mutez)
                                     (pair address address)
                                     address
                                : pair (or string nat)
                                     (pair nat mutez mutez)
                                     (pair nat timestamp timestamp)
                                     (pair mutez mutez)
                                     (pair address address)
                                     address ] */ ;
                             CDDAAR ;
                             DIP { DUP
                                   /* [ pair (or string nat)
                                           (pair nat mutez mutez)
                                           (pair nat timestamp timestamp)
                                           (pair mutez mutez)
                                           (pair address address)
                                           address
                                      : pair (or string nat)
                                           (pair nat mutez mutez)
                                           (pair nat timestamp timestamp)
                                           (pair mutez mutez)
                                           (pair address address)
                                           address ] */ ;
                                   CDDDAAR }
                             /* [ nat : mutez
                                : pair (or string nat)
                                     (pair nat mutez mutez)
                                     (pair nat timestamp timestamp)
                                     (pair mutez mutez)
                                     (pair address address)
                                     address ] */ ;
                             MUL
                             /* [ mutez
                                : pair (or string nat)
                                     (pair nat mutez mutez)
                                     (pair nat timestamp timestamp)
                                     (pair mutez mutez)
                                     (pair address address)
                                     address ] */ ;
                             DIP { DUP
                                   /* [ pair (or string nat)
                                           (pair nat mutez mutez)
                                           (pair nat timestamp timestamp)
                                           (pair mutez mutez)
                                           (pair address address)
                                           address
                                      : pair (or string nat)
                                           (pair nat mutez mutez)
                                           (pair nat timestamp timestamp)
                                           (pair mutez mutez)
                                           (pair address address)
                                           address ] */ ;
                                   CDADAR }
                             /* [ mutez : mutez
                                : pair (or string nat)
                                     (pair nat mutez mutez)
                                     (pair nat timestamp timestamp)
                                     (pair mutez mutez)
                                     (pair address address)
                                     address ] */ ;
                             COMPARE
                             /* [ int
                                : pair (or string nat)
                                     (pair nat mutez mutez)
                                     (pair nat timestamp timestamp)
                                     (pair mutez mutez)
                                     (pair address address)
                                     address ] */ ;
                             NEQ
                             /* [ bool
                                : pair (or string nat)
                                     (pair nat mutez mutez)
                                     (pair nat timestamp timestamp)
                                     (pair mutez mutez)
                                     (pair address address)
                                     address ] */ ;
                             IF { BALANCE
                                  /* [ mutez
                                     : pair (or string nat)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  DIP { DUP
                                        /* [ pair (or string nat)
                                                (pair nat mutez mutez)
                                                (pair nat timestamp timestamp)
                                                (pair mutez mutez)
                                                (pair address address)
                                                address
                                           : pair (or string nat)
                                                (pair nat mutez mutez)
                                                (pair nat timestamp timestamp)
                                                (pair mutez mutez)
                                                (pair address address)
                                                address ] */ ;
                                        CDDDDADR }
                                  /* [ mutez : address
                                     : pair (or string nat)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  DIP 2
                                      { CDR
                                        /* [ pair (pair nat mutez mutez)
                                                (pair nat timestamp timestamp)
                                                (pair mutez mutez)
                                                (pair address address)
                                                address ] */ }
                                  /* [ mutez : address
                                     : pair (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  DIP { CONTRACT
                                          unit
                                        /* [ option (contract unit)
                                           : pair (pair nat mutez mutez)
                                                (pair nat timestamp timestamp)
                                                (pair mutez mutez)
                                                (pair address address)
                                                address ] */ ;
                                        ASSERT_SOME }
                                  /* [ mutez : contract unit
                                     : pair (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  UNIT
                                  /* [ unit : mutez : contract unit
                                     : pair (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  TRANSFER_TOKENS
                                  /* [ operation
                                     : pair (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  NIL operation
                                  /* [ list operation : operation
                                     : pair (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  SWAP
                                  /* [ operation : list operation
                                     : pair (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  CONS
                                  /* [ list operation
                                     : pair (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  PAIR
                                  /* [ pair (list operation)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ }
                                { DUP
                                  /* [ pair (or string nat)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address
                                     : pair (or string nat)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  CDDADAR ;
                                  PUSH int
                                       86400
                                  /* [ int : timestamp
                                     : pair (or string nat)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  ADD
                                  /* [ timestamp
                                     : pair (or string nat)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  PUSH int
                                       86400
                                  /* [ int : timestamp
                                     : pair (or string nat)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  ADD
                                  /* [ timestamp
                                     : pair (or string nat)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  NOW
                                  /* [ timestamp : timestamp
                                     : pair (or string nat)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  COMPARE
                                  /* [ int
                                     : pair (or string nat)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  LT
                                  /* [ bool
                                     : pair (or string nat)
                                          (pair nat mutez mutez)
                                          (pair nat timestamp timestamp)
                                          (pair mutez mutez)
                                          (pair address address)
                                          address ] */ ;
                                  IF { DUP
                                       /* [ pair (or string nat)
                                               (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address
                                          : pair (or string nat)
                                               (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       CDDDDDR ;
                                       SENDER
                                       /* [ address : address
                                          : pair (or string nat)
                                               (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       COMPARE
                                       /* [ int
                                          : pair (or string nat)
                                               (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       NEQ
                                       /* [ bool
                                          : pair (or string nat)
                                               (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       IF { FAIL }
                                          { /* [ pair (or string nat)
                                                    (pair nat mutez mutez)
                                                    (pair nat timestamp timestamp)
                                                    (pair mutez mutez)
                                                    (pair address address)
                                                    address ] */ } ;
                                       DUP
                                       /* [ pair (or string nat)
                                               (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address
                                          : pair (or string nat)
                                               (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       CAR
                                       /* [ or string nat
                                          : pair (or string nat)
                                               (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       IF_LEFT
                                         { FAIL }
                                         { DIP { DUP
                                                 /* [ pair (or string nat)
                                                         (pair nat mutez mutez)
                                                         (pair nat timestamp timestamp)
                                                         (pair mutez mutez)
                                                         (pair address address)
                                                         address
                                                    : pair (or string nat)
                                                         (pair nat mutez mutez)
                                                         (pair nat timestamp timestamp)
                                                         (pair mutez mutez)
                                                         (pair address address)
                                                         address ] */ ;
                                                 CDAAR }
                                           /* [ nat : nat
                                              : pair (or string nat)
                                                   (pair nat mutez mutez)
                                                   (pair nat timestamp timestamp)
                                                   (pair mutez mutez)
                                                   (pair address address)
                                                   address ] */ ;
                                           ADD
                                           /* [ nat
                                              : pair (or string nat)
                                                   (pair nat mutez mutez)
                                                   (pair nat timestamp timestamp)
                                                   (pair mutez mutez)
                                                   (pair address address)
                                                   address ] */ ;
                                           DIP { DUP
                                                 /* [ pair (or string nat)
                                                         (pair nat mutez mutez)
                                                         (pair nat timestamp timestamp)
                                                         (pair mutez mutez)
                                                         (pair address address)
                                                         address
                                                    : pair (or string nat)
                                                         (pair nat mutez mutez)
                                                         (pair nat timestamp timestamp)
                                                         (pair mutez mutez)
                                                         (pair address address)
                                                         address ] */ ;
                                                 CDADR }
                                           /* [ nat : pair mutez mutez
                                              : pair (or string nat)
                                                   (pair nat mutez mutez)
                                                   (pair nat timestamp timestamp)
                                                   (pair mutez mutez)
                                                   (pair address address)
                                                   address ] */ ;
                                           PAIR
                                           /* [ pair nat mutez mutez
                                              : pair (or string nat)
                                                   (pair nat mutez mutez)
                                                   (pair nat timestamp timestamp)
                                                   (pair mutez mutez)
                                                   (pair address address)
                                                   address ] */ ;
                                           DIP { CDDR }
                                           /* [ pair nat mutez mutez
                                              : pair (pair nat timestamp timestamp) (pair mutez mutez) (pair address address) address ] */ ;
                                           PAIR
                                           /* [ pair (pair nat mutez mutez)
                                                   (pair nat timestamp timestamp)
                                                   (pair mutez mutez)
                                                   (pair address address)
                                                   address ] */ ;
                                           UNIT
                                           /* [ unit
                                              : pair (pair nat mutez mutez)
                                                   (pair nat timestamp timestamp)
                                                   (pair mutez mutez)
                                                   (pair address address)
                                                   address ] */ ;
                                           PAIR
                                           /* [ pair unit
                                                   (pair nat mutez mutez)
                                                   (pair nat timestamp timestamp)
                                                   (pair mutez mutez)
                                                   (pair address address)
                                                   address ] */ ;
                                           DUP
                                           /* [ pair unit
                                                   (pair nat mutez mutez)
                                                   (pair nat timestamp timestamp)
                                                   (pair mutez mutez)
                                                   (pair address address)
                                                   address
                                              : pair unit
                                                   (pair nat mutez mutez)
                                                   (pair nat timestamp timestamp)
                                                   (pair mutez mutez)
                                                   (pair address address)
                                                   address ] */ ;
                                           CDAAR ;
                                           DIP { DUP
                                                 /* [ pair unit
                                                         (pair nat mutez mutez)
                                                         (pair nat timestamp timestamp)
                                                         (pair mutez mutez)
                                                         (pair address address)
                                                         address
                                                    : pair unit
                                                         (pair nat mutez mutez)
                                                         (pair nat timestamp timestamp)
                                                         (pair mutez mutez)
                                                         (pair address address)
                                                         address ] */ ;
                                                 CDDAAR }
                                           /* [ nat : nat
                                              : pair unit
                                                   (pair nat mutez mutez)
                                                   (pair nat timestamp timestamp)
                                                   (pair mutez mutez)
                                                   (pair address address)
                                                   address ] */ ;
                                           COMPARE
                                           /* [ int
                                              : pair unit
                                                   (pair nat mutez mutez)
                                                   (pair nat timestamp timestamp)
                                                   (pair mutez mutez)
                                                   (pair address address)
                                                   address ] */ ;
                                           LT
                                           /* [ bool
                                              : pair unit
                                                   (pair nat mutez mutez)
                                                   (pair nat timestamp timestamp)
                                                   (pair mutez mutez)
                                                   (pair address address)
                                                   address ] */ ;
                                           IF { CDR
                                                /* [ pair (pair nat mutez mutez)
                                                        (pair nat timestamp timestamp)
                                                        (pair mutez mutez)
                                                        (pair address address)
                                                        address ] */ ;
                                                NIL operation
                                                /* [ list operation
                                                   : pair (pair nat mutez mutez)
                                                        (pair nat timestamp timestamp)
                                                        (pair mutez mutez)
                                                        (pair address address)
                                                        address ] */ }
                                              { BALANCE
                                                /* [ mutez
                                                   : pair unit
                                                        (pair nat mutez mutez)
                                                        (pair nat timestamp timestamp)
                                                        (pair mutez mutez)
                                                        (pair address address)
                                                        address ] */ ;
                                                DIP { DUP
                                                      /* [ pair unit
                                                              (pair nat mutez mutez)
                                                              (pair nat timestamp timestamp)
                                                              (pair mutez mutez)
                                                              (pair address address)
                                                              address
                                                         : pair unit
                                                              (pair nat mutez mutez)
                                                              (pair nat timestamp timestamp)
                                                              (pair mutez mutez)
                                                              (pair address address)
                                                              address ] */ ;
                                                      CDDDDADR }
                                                /* [ mutez : address
                                                   : pair unit
                                                        (pair nat mutez mutez)
                                                        (pair nat timestamp timestamp)
                                                        (pair mutez mutez)
                                                        (pair address address)
                                                        address ] */ ;
                                                DIP 2
                                                    { CDR
                                                      /* [ pair (pair nat mutez mutez)
                                                              (pair nat timestamp timestamp)
                                                              (pair mutez mutez)
                                                              (pair address address)
                                                              address ] */ }
                                                /* [ mutez : address
                                                   : pair (pair nat mutez mutez)
                                                        (pair nat timestamp timestamp)
                                                        (pair mutez mutez)
                                                        (pair address address)
                                                        address ] */ ;
                                                DIP { CONTRACT
                                                        unit
                                                      /* [ option (contract unit)
                                                         : pair (pair nat mutez mutez)
                                                              (pair nat timestamp timestamp)
                                                              (pair mutez mutez)
                                                              (pair address address)
                                                              address ] */ ;
                                                      ASSERT_SOME }
                                                /* [ mutez : contract unit
                                                   : pair (pair nat mutez mutez)
                                                        (pair nat timestamp timestamp)
                                                        (pair mutez mutez)
                                                        (pair address address)
                                                        address ] */ ;
                                                UNIT
                                                /* [ unit : mutez : contract unit
                                                   : pair (pair nat mutez mutez)
                                                        (pair nat timestamp timestamp)
                                                        (pair mutez mutez)
                                                        (pair address address)
                                                        address ] */ ;
                                                TRANSFER_TOKENS
                                                /* [ operation
                                                   : pair (pair nat mutez mutez)
                                                        (pair nat timestamp timestamp)
                                                        (pair mutez mutez)
                                                        (pair address address)
                                                        address ] */ ;
                                                NIL operation
                                                /* [ list operation : operation
                                                   : pair (pair nat mutez mutez)
                                                        (pair nat timestamp timestamp)
                                                        (pair mutez mutez)
                                                        (pair address address)
                                                        address ] */ ;
                                                SWAP
                                                /* [ operation : list operation
                                                   : pair (pair nat mutez mutez)
                                                        (pair nat timestamp timestamp)
                                                        (pair mutez mutez)
                                                        (pair address address)
                                                        address ] */ ;
                                                CONS
                                                /* [ list operation
                                                   : pair (pair nat mutez mutez)
                                                        (pair nat timestamp timestamp)
                                                        (pair mutez mutez)
                                                        (pair address address)
                                                        address ] */ } } ;
                                       PAIR
                                       /* [ pair (list operation)
                                               (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ }
                                     { BALANCE
                                       /* [ mutez
                                          : pair (or string nat)
                                               (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       DIP { DUP
                                             /* [ pair (or string nat)
                                                     (pair nat mutez mutez)
                                                     (pair nat timestamp timestamp)
                                                     (pair mutez mutez)
                                                     (pair address address)
                                                     address
                                                : pair (or string nat)
                                                     (pair nat mutez mutez)
                                                     (pair nat timestamp timestamp)
                                                     (pair mutez mutez)
                                                     (pair address address)
                                                     address ] */ ;
                                             CDDDDAAR }
                                       /* [ mutez : address
                                          : pair (or string nat)
                                               (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       DIP 2
                                           { CDR
                                             /* [ pair (pair nat mutez mutez)
                                                     (pair nat timestamp timestamp)
                                                     (pair mutez mutez)
                                                     (pair address address)
                                                     address ] */ }
                                       /* [ mutez : address
                                          : pair (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       DIP { CONTRACT
                                               unit
                                             /* [ option (contract unit)
                                                : pair (pair nat mutez mutez)
                                                     (pair nat timestamp timestamp)
                                                     (pair mutez mutez)
                                                     (pair address address)
                                                     address ] */ ;
                                             ASSERT_SOME }
                                       /* [ mutez : contract unit
                                          : pair (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       UNIT
                                       /* [ unit : mutez : contract unit
                                          : pair (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       TRANSFER_TOKENS
                                       /* [ operation
                                          : pair (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       NIL operation
                                       /* [ list operation : operation
                                          : pair (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       SWAP
                                       /* [ operation : list operation
                                          : pair (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       CONS
                                       /* [ list operation
                                          : pair (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ ;
                                       PAIR
                                       /* [ pair (list operation)
                                               (pair nat mutez mutez)
                                               (pair nat timestamp timestamp)
                                               (pair mutez mutez)
                                               (pair address address)
                                               address ] */ } } } } } } } }
Well typed (Gas remaining: 1039998.017 units remaining)	michelson_test_scripts/attic/id.tz
{ parameter string ;
  storage string ;
  code { CAR
         /* [ string ] */ ;
         NIL operation
         /* [ list operation : string ] */ ;
         PAIR
         /* [ pair (list operation) string ] */ } }
Well typed (Gas remaining: 1039995.570 units remaining)	michelson_test_scripts/attic/infinite_loop.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH bool True
         /* [ bool ] */ ;
         LOOP { PUSH bool True /* [ bool ] */ }
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039977.186 units remaining)	michelson_test_scripts/attic/insertion_sort.tz
{ parameter (list int) ;
  storage (list int) ;
  code { CAR
         /* [ list int ] */ ;
         NIL int
         /* [ list int : list int ] */ ;
         SWAP
         /* [ list int : list int ] */ ;
         ITER { SWAP
                /* [ list int : int ] */ ;
                DIP 2 { NIL int /* [ list int ] */ }
                /* [ list int : int : list int ] */ ;
                PUSH bool True
                /* [ bool : list int : int : list int ] */ ;
                LOOP { IF_CONS
                         { SWAP
                           /* [ list int : int : int : list int ] */ ;
                           DIP { DUP
                                 /* [ int : int : int : list int ] */ ;
                                 DIP 2 { DUP /* [ int : int : list int ] */ }
                                 /* [ int : int : int : int : list int ] */ ;
                                 DIP { CMPLT }
                                 /* [ int : bool : int : list int ] */ ;
                                 SWAP
                                 /* [ bool : int : int : list int ] */ }
                           /* [ list int : bool : int : int : list int ] */ ;
                           SWAP
                           /* [ bool : list int : int : int : list int ] */ ;
                           IF { DIP { SWAP
                                      /* [ int : int : list int ] */ ;
                                      DIP { CONS /* [ list int ] */ }
                                      /* [ int : list int ] */ }
                                /* [ list int : int : list int ] */ ;
                                PUSH bool True
                                /* [ bool : list int : int : list int ] */ }
                              { SWAP
                                /* [ int : list int : int : list int ] */ ;
                                CONS
                                /* [ list int : int : list int ] */ ;
                                PUSH bool False
                                /* [ bool : list int : int : list int ] */ } }
                         { NIL int
                           /* [ list int : int : list int ] */ ;
                           PUSH bool False
                           /* [ bool : list int : int : list int ] */ } }
                /* [ list int : int : list int ] */ ;
                SWAP
                /* [ int : list int : list int ] */ ;
                CONS
                /* [ list int : list int ] */ ;
                SWAP
                /* [ list int : list int ] */ ;
                ITER { CONS /* [ list int ] */ }
                /* [ list int ] */ }
         /* [ list int ] */ ;
         NIL operation
         /* [ list operation : list int ] */ ;
         PAIR
         /* [ pair (list operation) (list int) ] */ } }
Well typed (Gas remaining: 1039970.322 units remaining)	michelson_test_scripts/attic/int_publisher.tz
{ parameter (option (pair signature int)) ;
  storage (pair key int) ;
  code { DUP
         /* [ pair (option (pair signature int)) key int
            : pair (option (pair signature int)) key int ] */ ;
         DUP
         /* [ pair (option (pair signature int)) key int
            : pair (option (pair signature int)) key int
            : pair (option (pair signature int)) key int ] */ ;
         CAR
         /* [ option (pair signature int) : pair (option (pair signature int)) key int
            : pair (option (pair signature int)) key int ] */ ;
         IF_NONE
           { PUSH mutez
                  1000000
             /* [ mutez : pair (option (pair signature int)) key int
                : pair (option (pair signature int)) key int ] */ ;
             AMOUNT
             /* [ mutez : mutez : pair (option (pair signature int)) key int
                : pair (option (pair signature int)) key int ] */ ;
             CMPLE ;
             IF { FAIL }
                { /* [ pair (option (pair signature int)) key int
                     : pair (option (pair signature int)) key int ] */ } ;
             CDR
             /* [ pair key int : pair (option (pair signature int)) key int ] */ ;
             DIP { CDDR }
             /* [ pair key int : int ] */ }
           { DUP
             /* [ pair signature int : pair signature int
                : pair (option (pair signature int)) key int
                : pair (option (pair signature int)) key int ] */ ;
             DIP { SWAP
                   /* [ pair (option (pair signature int)) key int : pair signature int
                      : pair (option (pair signature int)) key int ] */ }
             /* [ pair signature int : pair (option (pair signature int)) key int
                : pair signature int : pair (option (pair signature int)) key int ] */ ;
             SWAP
             /* [ pair (option (pair signature int)) key int : pair signature int
                : pair signature int : pair (option (pair signature int)) key int ] */ ;
             CDAR ;
             DIP { DUP
                   /* [ pair signature int : pair signature int : pair signature int
                      : pair (option (pair signature int)) key int ] */ ;
                   CAR
                   /* [ signature : pair signature int : pair signature int
                      : pair (option (pair signature int)) key int ] */ ;
                   DIP { CDR
                         /* [ int : pair signature int : pair (option (pair signature int)) key int ] */ ;
                         PACK
                         /* [ bytes : pair signature int : pair (option (pair signature int)) key int ] */ ;
                         BLAKE2B
                         /* [ bytes : pair signature int : pair (option (pair signature int)) key int ] */ }
                   /* [ signature : bytes : pair signature int
                      : pair (option (pair signature int)) key int ] */ }
             /* [ key : signature : bytes : pair signature int
                : pair (option (pair signature int)) key int ] */ ;
             CHECK_SIGNATURE
             /* [ bool : pair signature int : pair (option (pair signature int)) key int ] */ ;
             IF { CDR
                  /* [ int : pair (option (pair signature int)) key int ] */ ;
                  SWAP
                  /* [ pair (option (pair signature int)) key int : int ] */ ;
                  DIP { DUP /* [ int : int ] */ }
                  /* [ pair (option (pair signature int)) key int : int : int ] */ ;
                  CDAR ;
                  PAIR
                  /* [ pair key int : int ] */ }
                { DROP
                  /* [ pair (option (pair signature int)) key int ] */ ;
                  DUP
                  /* [ pair (option (pair signature int)) key int
                     : pair (option (pair signature int)) key int ] */ ;
                  CDR
                  /* [ pair key int : pair (option (pair signature int)) key int ] */ ;
                  DIP { CDDR }
                  /* [ pair key int : int ] */ } } ;
         DIP { DROP /* [] */ }
         /* [ pair key int ] */ ;
         NIL operation
         /* [ list operation : pair key int ] */ ;
         PAIR
         /* [ pair (list operation) key int ] */ } }
Well typed (Gas remaining: 1039974.735 units remaining)	michelson_test_scripts/attic/king_of_tez.tz
{ parameter key_hash ;
  storage (pair timestamp (pair mutez key_hash)) ;
  code { DUP
         /* [ pair key_hash timestamp mutez key_hash
            : pair key_hash timestamp mutez key_hash ] */ ;
         CDAR ;
         NOW
         /* [ timestamp : timestamp : pair key_hash timestamp mutez key_hash ] */ ;
         CMPGT ;
         IF { CAR
              /* [ key_hash ] */ ;
              AMOUNT
              /* [ mutez : key_hash ] */ ;
              PAIR
              /* [ pair mutez key_hash ] */ ;
              NOW
              /* [ timestamp : pair mutez key_hash ] */ ;
              PUSH int 604800
              /* [ int : timestamp : pair mutez key_hash ] */ ;
              ADD
              /* [ timestamp : pair mutez key_hash ] */ ;
              PAIR
              /* [ pair timestamp mutez key_hash ] */ ;
              NIL operation
              /* [ list operation : pair timestamp mutez key_hash ] */ }
            { DUP
              /* [ pair key_hash timestamp mutez key_hash
                 : pair key_hash timestamp mutez key_hash ] */ ;
              CDDAR ;
              AMOUNT
              /* [ mutez : mutez : pair key_hash timestamp mutez key_hash ] */ ;
              CMPLT ;
              IF { FAIL }
                 { CAR
                   /* [ key_hash ] */ ;
                   DUP
                   /* [ key_hash : key_hash ] */ ;
                   DIP { AMOUNT
                         /* [ mutez : key_hash ] */ ;
                         PAIR
                         /* [ pair mutez key_hash ] */ ;
                         NOW
                         /* [ timestamp : pair mutez key_hash ] */ ;
                         PUSH int 604800
                         /* [ int : timestamp : pair mutez key_hash ] */ ;
                         ADD
                         /* [ timestamp : pair mutez key_hash ] */ ;
                         PAIR
                         /* [ pair timestamp mutez key_hash ] */ }
                   /* [ key_hash : pair timestamp mutez key_hash ] */ ;
                   IMPLICIT_ACCOUNT
                   /* [ contract unit : pair timestamp mutez key_hash ] */ ;
                   AMOUNT
                   /* [ mutez : contract unit : pair timestamp mutez key_hash ] */ ;
                   UNIT
                   /* [ unit : mutez : contract unit : pair timestamp mutez key_hash ] */ ;
                   TRANSFER_TOKENS
                   /* [ operation : pair timestamp mutez key_hash ] */ ;
                   NIL operation
                   /* [ list operation : operation : pair timestamp mutez key_hash ] */ ;
                   SWAP
                   /* [ operation : list operation : pair timestamp mutez key_hash ] */ ;
                   CONS
                   /* [ list operation : pair timestamp mutez key_hash ] */ } } ;
         PAIR
         /* [ pair (list operation) timestamp mutez key_hash ] */ } }
Well typed (Gas remaining: 1039985.851 units remaining)	michelson_test_scripts/attic/list_of_transactions.tz
{ parameter unit ;
  storage (list address) ;
  code { CDR
         /* [ list address ] */ ;
         DUP
         /* [ list address : list address ] */ ;
         DIP { NIL operation /* [ list operation : list address ] */ }
         /* [ list address : list operation : list address ] */ ;
         PUSH bool True
         /* [ bool : list address : list operation : list address ] */ ;
         LOOP { IF_CONS
                  { CONTRACT
                      unit
                    /* [ option (contract unit) : list address : list operation : list address ] */ ;
                    ASSERT_SOME ;
                    PUSH mutez
                         1000000
                    /* [ mutez : contract unit : list address : list operation : list address ] */ ;
                    UNIT
                    /* [ unit : mutez : contract unit : list address : list operation
                       : list address ] */ ;
                    TRANSFER_TOKENS
                    /* [ operation : list address : list operation : list address ] */ ;
                    SWAP
                    /* [ list address : operation : list operation : list address ] */ ;
                    DIP { CONS /* [ list operation : list address ] */ }
                    /* [ list address : list operation : list address ] */ ;
                    PUSH bool True
                    /* [ bool : list address : list operation : list address ] */ }
                  { NIL address
                    /* [ list address : list operation : list address ] */ ;
                    PUSH bool False
                    /* [ bool : list address : list operation : list address ] */ } }
         /* [ list address : list operation : list address ] */ ;
         DROP
         /* [ list operation : list address ] */ ;
         PAIR
         /* [ pair (list operation) (list address) ] */ } }
Well typed (Gas remaining: 1039959.640 units remaining)	michelson_test_scripts/attic/queue.tz
{ parameter (option string) ;
  storage (pair (option string) (pair (pair nat nat) (map nat string))) ;
  code { DUP
         /* [ pair (option string) (option string) (pair nat nat) (map nat string)
            : pair (option string) (option string) (pair nat nat) (map nat string) ] */ ;
         CAR
         /* [ option string
            : pair (option string) (option string) (pair nat nat) (map nat string) ] */ ;
         IF_NONE
           { CDDR ;
             DUP
             /* [ pair (pair nat nat) (map nat string)
                : pair (pair nat nat) (map nat string) ] */ ;
             CAR
             /* [ pair nat nat : pair (pair nat nat) (map nat string) ] */ ;
             DIP { CDR /* [ map nat string ] */ ; DUP /* [ map nat string : map nat string ] */ }
             /* [ pair nat nat : map nat string : map nat string ] */ ;
             DUP
             /* [ pair nat nat : pair nat nat : map nat string : map nat string ] */ ;
             CAR
             /* [ nat : pair nat nat : map nat string : map nat string ] */ ;
             SWAP
             /* [ pair nat nat : nat : map nat string : map nat string ] */ ;
             DIP { GET /* [ option string : map nat string ] */ }
             /* [ pair nat nat : option string : map nat string ] */ ;
             SWAP
             /* [ option string : pair nat nat : map nat string ] */ ;
             IF_NONE
               { NONE string
                 /* [ option string : pair nat nat : map nat string ] */ ;
                 DIP { PAIR /* [ pair (pair nat nat) (map nat string) ] */ }
                 /* [ option string : pair (pair nat nat) (map nat string) ] */ ;
                 PAIR
                 /* [ pair (option string) (pair nat nat) (map nat string) ] */ }
               { SOME
                 /* [ option string : pair nat nat : map nat string ] */ ;
                 DIP { DUP
                       /* [ pair nat nat : pair nat nat : map nat string ] */ ;
                       DIP { CAR
                             /* [ nat : map nat string ] */ ;
                             DIP { NONE string /* [ option string : map nat string ] */ }
                             /* [ nat : option string : map nat string ] */ ;
                             UPDATE
                             /* [ map nat string ] */ }
                       /* [ pair nat nat : map nat string ] */ ;
                       DUP
                       /* [ pair nat nat : pair nat nat : map nat string ] */ ;
                       CAR
                       /* [ nat : pair nat nat : map nat string ] */ ;
                       PUSH nat 1
                       /* [ nat : nat : pair nat nat : map nat string ] */ ;
                       ADD
                       /* [ nat : pair nat nat : map nat string ] */ ;
                       DIP { CDR /* [ nat : map nat string ] */ }
                       /* [ nat : nat : map nat string ] */ ;
                       PAIR
                       /* [ pair nat nat : map nat string ] */ ;
                       PAIR
                       /* [ pair (pair nat nat) (map nat string) ] */ }
                 /* [ option string : pair (pair nat nat) (map nat string) ] */ ;
                 PAIR
                 /* [ pair (option string) (pair nat nat) (map nat string) ] */ } }
           { DIP { DUP
                   /* [ pair (option string) (option string) (pair nat nat) (map nat string)
                      : pair (option string) (option string) (pair nat nat) (map nat string) ] */ ;
                   CDDAR ;
                   DIP { CDDDR }
                   /* [ pair nat nat : map nat string ] */ ;
                   DUP
                   /* [ pair nat nat : pair nat nat : map nat string ] */ }
             /* [ string : pair nat nat : pair nat nat : map nat string ] */ ;
             SWAP
             /* [ pair nat nat : string : pair nat nat : map nat string ] */ ;
             CAR
             /* [ nat : string : pair nat nat : map nat string ] */ ;
             DIP { SOME
                   /* [ option string : pair nat nat : map nat string ] */ ;
                   SWAP
                   /* [ pair nat nat : option string : map nat string ] */ ;
                   CDR
                   /* [ nat : option string : map nat string ] */ ;
                   DUP
                   /* [ nat : nat : option string : map nat string ] */ ;
                   DIP { UPDATE /* [ map nat string ] */ }
                   /* [ nat : map nat string ] */ ;
                   PUSH nat 1
                   /* [ nat : nat : map nat string ] */ ;
                   ADD
                   /* [ nat : map nat string ] */ }
             /* [ nat : nat : map nat string ] */ ;
             PAIR
             /* [ pair nat nat : map nat string ] */ ;
             PAIR
             /* [ pair (pair nat nat) (map nat string) ] */ ;
             NONE string
             /* [ option string : pair (pair nat nat) (map nat string) ] */ ;
             PAIR
             /* [ pair (option string) (pair nat nat) (map nat string) ] */ } ;
         NIL operation
         /* [ list operation : pair (option string) (pair nat nat) (map nat string) ] */ ;
         PAIR
         /* [ pair (list operation) (option string) (pair nat nat) (map nat string) ] */ } }
Well typed (Gas remaining: 1039978.831 units remaining)	michelson_test_scripts/attic/reduce_map.tz
{ parameter (pair (lambda int int) (list int)) ;
  storage (list int) ;
  code { DIP { NIL int /* [ list int ] */ }
         /* [ pair (pair (lambda int int) (list int)) (list int) : list int ] */ ;
         CAR
         /* [ pair (lambda int int) (list int) : list int ] */ ;
         DUP
         /* [ pair (lambda int int) (list int) : pair (lambda int int) (list int)
            : list int ] */ ;
         DIP { CAR
               /* [ lambda int int : list int ] */ ;
               PAIR
               /* [ pair (lambda int int) (list int) ] */ }
         /* [ pair (lambda int int) (list int) : pair (lambda int int) (list int) ] */ ;
         CDR
         /* [ list int : pair (lambda int int) (list int) ] */ ;
         ITER { PAIR
                /* [ pair int (lambda int int) (list int) ] */ ;
                DUP
                /* [ pair int (lambda int int) (list int)
                   : pair int (lambda int int) (list int) ] */ ;
                CDAR ;
                DIP { DUP
                      /* [ pair int (lambda int int) (list int)
                         : pair int (lambda int int) (list int) ] */ ;
                      DIP { CDAR }
                      /* [ pair int (lambda int int) (list int) : lambda int int ] */ ;
                      DUP
                      /* [ pair int (lambda int int) (list int) : pair int (lambda int int) (list int)
                         : lambda int int ] */ ;
                      CAR
                      /* [ int : pair int (lambda int int) (list int) : lambda int int ] */ ;
                      DIP { CDDR ; SWAP /* [ lambda int int : list int ] */ }
                      /* [ int : lambda int int : list int ] */ ;
                      EXEC
                      /* [ int : list int ] */ ;
                      CONS
                      /* [ list int ] */ }
                /* [ lambda int int : list int ] */ ;
                PAIR
                /* [ pair (lambda int int) (list int) ] */ }
         /* [ pair (lambda int int) (list int) ] */ ;
         CDR
         /* [ list int ] */ ;
         DIP { NIL int /* [ list int ] */ }
         /* [ list int : list int ] */ ;
         ITER { CONS /* [ list int ] */ }
         /* [ list int ] */ ;
         NIL operation
         /* [ list operation : list int ] */ ;
         PAIR
         /* [ pair (list operation) (list int) ] */ } }
Well typed (Gas remaining: 1039983.510 units remaining)	michelson_test_scripts/attic/reentrancy.tz
{ parameter unit ;
  storage (pair address address) ;
  code { CDR
         /* [ pair address address ] */ ;
         DUP
         /* [ pair address address : pair address address ] */ ;
         CAR
         /* [ address : pair address address ] */ ;
         CONTRACT unit
         /* [ option (contract unit) : pair address address ] */ ;
         ASSERT_SOME ;
         PUSH mutez 5000000
         /* [ mutez : contract unit : pair address address ] */ ;
         UNIT
         /* [ unit : mutez : contract unit : pair address address ] */ ;
         TRANSFER_TOKENS
         /* [ operation : pair address address ] */ ;
         DIP { DUP
               /* [ pair address address : pair address address ] */ ;
               CDR
               /* [ address : pair address address ] */ ;
               CONTRACT unit
               /* [ option (contract unit) : pair address address ] */ ;
               ASSERT_SOME ;
               PUSH mutez 5000000
               /* [ mutez : contract unit : pair address address ] */ ;
               UNIT
               /* [ unit : mutez : contract unit : pair address address ] */ ;
               TRANSFER_TOKENS
               /* [ operation : pair address address ] */ }
         /* [ operation : operation : pair address address ] */ ;
         DIP 2
             { NIL operation /* [ list operation : pair address address ] */ }
         /* [ operation : operation : list operation : pair address address ] */ ;
         DIP { CONS /* [ list operation : pair address address ] */ }
         /* [ operation : list operation : pair address address ] */ ;
         CONS
         /* [ list operation : pair address address ] */ ;
         PAIR
         /* [ pair (list operation) address address ] */ } }
Well typed (Gas remaining: 1039970.211 units remaining)	michelson_test_scripts/attic/reservoir.tz
{ parameter unit ;
  storage (pair (pair (timestamp %T) (mutez %N)) (pair (address %A) (address %B))) ;
  code { CDR
         /* [ pair (pair timestamp mutez) address address ] */ ;
         DUP
         /* [ pair (pair timestamp mutez) address address
            : pair (pair timestamp mutez) address address ] */ ;
         CAAR %T ;
         NOW
         /* [ timestamp : timestamp : pair (pair timestamp mutez) address address ] */ ;
         COMPARE
         /* [ int : pair (pair timestamp mutez) address address ] */ ;
         LE
         /* [ bool : pair (pair timestamp mutez) address address ] */ ;
         IF { DUP
              /* [ pair (pair timestamp mutez) address address
                 : pair (pair timestamp mutez) address address ] */ ;
              CADR %N ;
              BALANCE
              /* [ mutez : mutez : pair (pair timestamp mutez) address address ] */ ;
              COMPARE
              /* [ int : pair (pair timestamp mutez) address address ] */ ;
              LE
              /* [ bool : pair (pair timestamp mutez) address address ] */ ;
              IF { NIL operation
                   /* [ list operation : pair (pair timestamp mutez) address address ] */ ;
                   PAIR
                   /* [ pair (list operation) (pair timestamp mutez) address address ] */ }
                 { DUP
                   /* [ pair (pair timestamp mutez) address address
                      : pair (pair timestamp mutez) address address ] */ ;
                   CDDR %B ;
                   CONTRACT
                     unit
                   /* [ option (contract unit) : pair (pair timestamp mutez) address address ] */ ;
                   ASSERT_SOME ;
                   BALANCE
                   /* [ mutez : contract unit : pair (pair timestamp mutez) address address ] */ ;
                   UNIT
                   /* [ unit : mutez : contract unit
                      : pair (pair timestamp mutez) address address ] */ ;
                   TRANSFER_TOKENS
                   /* [ operation : pair (pair timestamp mutez) address address ] */ ;
                   NIL operation
                   /* [ list operation : operation : pair (pair timestamp mutez) address address ] */ ;
                   SWAP
                   /* [ operation : list operation : pair (pair timestamp mutez) address address ] */ ;
                   CONS
                   /* [ list operation : pair (pair timestamp mutez) address address ] */ ;
                   PAIR
                   /* [ pair (list operation) (pair timestamp mutez) address address ] */ } }
            { DUP
              /* [ pair (pair timestamp mutez) address address
                 : pair (pair timestamp mutez) address address ] */ ;
              CDAR %A ;
              CONTRACT
                unit
              /* [ option (contract unit) : pair (pair timestamp mutez) address address ] */ ;
              ASSERT_SOME ;
              BALANCE
              /* [ mutez : contract unit : pair (pair timestamp mutez) address address ] */ ;
              UNIT
              /* [ unit : mutez : contract unit
                 : pair (pair timestamp mutez) address address ] */ ;
              TRANSFER_TOKENS
              /* [ operation : pair (pair timestamp mutez) address address ] */ ;
              NIL operation
              /* [ list operation : operation : pair (pair timestamp mutez) address address ] */ ;
              SWAP
              /* [ operation : list operation : pair (pair timestamp mutez) address address ] */ ;
              CONS
              /* [ list operation : pair (pair timestamp mutez) address address ] */ ;
              PAIR
              /* [ pair (list operation) (pair timestamp mutez) address address ] */ } } }
Well typed (Gas remaining: 1039891.106 units remaining)	michelson_test_scripts/attic/scrutable_reservoir.tz
{ parameter unit ;
  storage
    (pair string
          (pair timestamp (pair (pair mutez mutez) (pair address (pair address address))))) ;
  code { DUP
         /* [ pair unit string timestamp (pair mutez mutez) address address address
            : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
         CDAR ;
         PUSH string
              "open"
         /* [ string : string
            : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
         COMPARE
         /* [ int
            : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
         NEQ
         /* [ bool
            : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
         IF { FAIL }
            { DUP
              /* [ pair unit string timestamp (pair mutez mutez) address address address
                 : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
              CDDAR ;
              NOW
              /* [ timestamp : timestamp
                 : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
              COMPARE
              /* [ int
                 : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
              LT
              /* [ bool
                 : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
              IF { PUSH mutez
                        0
                   /* [ mutez
                      : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
                   DIP { DUP
                         /* [ pair unit string timestamp (pair mutez mutez) address address address
                            : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
                         CDDDAAR }
                   /* [ mutez : mutez
                      : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
                   ADD
                   /* [ mutez
                      : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
                   DIP { DUP
                         /* [ pair unit string timestamp (pair mutez mutez) address address address
                            : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
                         CDDDADR }
                   /* [ mutez : mutez
                      : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
                   ADD
                   /* [ mutez
                      : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
                   BALANCE
                   /* [ mutez : mutez
                      : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
                   COMPARE
                   /* [ int
                      : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
                   LT
                   /* [ bool
                      : pair unit string timestamp (pair mutez mutez) address address address ] */ ;
                   IF { CDR
                        /* [ pair string timestamp (pair mutez mutez) address address address ] */ ;
                        NIL operation
                        /* [ list operation
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        PAIR
                        /* [ pair (list operation) string timestamp (pair mutez mutez) address address address ] */ }
                      { CDDR ;
                        PUSH string
                             "success"
                        /* [ string : pair timestamp (pair mutez mutez) address address address ] */ ;
                        PAIR
                        /* [ pair string timestamp (pair mutez mutez) address address address ] */ ;
                        DUP
                        /* [ pair string timestamp (pair mutez mutez) address address address
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        CDDAAR ;
                        DIP { DUP
                              /* [ pair string timestamp (pair mutez mutez) address address address
                                 : pair string timestamp (pair mutez mutez) address address address ] */ ;
                              CDDDAR }
                        /* [ mutez : address
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        DIP { CONTRACT
                                unit
                              /* [ option (contract unit)
                                 : pair string timestamp (pair mutez mutez) address address address ] */ ;
                              ASSERT_SOME }
                        /* [ mutez : contract unit
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        UNIT
                        /* [ unit : mutez : contract unit
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        TRANSFER_TOKENS
                        /* [ operation
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        DIP { DUP
                              /* [ pair string timestamp (pair mutez mutez) address address address
                                 : pair string timestamp (pair mutez mutez) address address address ] */ ;
                              CDDADR ;
                              DIP { DUP
                                    /* [ pair string timestamp (pair mutez mutez) address address address
                                       : pair string timestamp (pair mutez mutez) address address address ] */ ;
                                    CDDDDAR }
                              /* [ mutez : address
                                 : pair string timestamp (pair mutez mutez) address address address ] */ ;
                              DIP { CONTRACT
                                      unit
                                    /* [ option (contract unit)
                                       : pair string timestamp (pair mutez mutez) address address address ] */ ;
                                    ASSERT_SOME }
                              /* [ mutez : contract unit
                                 : pair string timestamp (pair mutez mutez) address address address ] */ ;
                              UNIT
                              /* [ unit : mutez : contract unit
                                 : pair string timestamp (pair mutez mutez) address address address ] */ ;
                              TRANSFER_TOKENS
                              /* [ operation
                                 : pair string timestamp (pair mutez mutez) address address address ] */ }
                        /* [ operation : operation
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        NIL operation
                        /* [ list operation : operation : operation
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        SWAP
                        /* [ operation : list operation : operation
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        CONS
                        /* [ list operation : operation
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        SWAP
                        /* [ operation : list operation
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        CONS
                        /* [ list operation
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        PAIR
                        /* [ pair (list operation) string timestamp (pair mutez mutez) address address address ] */ } }
                 { CDDR ;
                   PUSH string
                        "timeout"
                   /* [ string : pair timestamp (pair mutez mutez) address address address ] */ ;
                   PAIR
                   /* [ pair string timestamp (pair mutez mutez) address address address ] */ ;
                   BALANCE
                   /* [ mutez : pair string timestamp (pair mutez mutez) address address address ] */ ;
                   DIP { DUP
                         /* [ pair string timestamp (pair mutez mutez) address address address
                            : pair string timestamp (pair mutez mutez) address address address ] */ ;
                         CDDAAR }
                   /* [ mutez : mutez
                      : pair string timestamp (pair mutez mutez) address address address ] */ ;
                   COMPARE
                   /* [ int : pair string timestamp (pair mutez mutez) address address address ] */ ;
                   LT
                   /* [ bool : pair string timestamp (pair mutez mutez) address address address ] */ ;
                   IF { BALANCE
                        /* [ mutez : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        DIP { DUP
                              /* [ pair string timestamp (pair mutez mutez) address address address
                                 : pair string timestamp (pair mutez mutez) address address address ] */ ;
                              CDDDAR }
                        /* [ mutez : address
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        DIP { CONTRACT
                                unit
                              /* [ option (contract unit)
                                 : pair string timestamp (pair mutez mutez) address address address ] */ ;
                              ASSERT_SOME }
                        /* [ mutez : contract unit
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        UNIT
                        /* [ unit : mutez : contract unit
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        TRANSFER_TOKENS
                        /* [ operation
                           : pair string timestamp (pair mutez mutez) address address address ] */ }
                      { DUP
                        /* [ pair string timestamp (pair mutez mutez) address address address
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        CDDAAR ;
                        DIP { DUP
                              /* [ pair string timestamp (pair mutez mutez) address address address
                                 : pair string timestamp (pair mutez mutez) address address address ] */ ;
                              CDDDAR }
                        /* [ mutez : address
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        DIP { CONTRACT
                                unit
                              /* [ option (contract unit)
                                 : pair string timestamp (pair mutez mutez) address address address ] */ ;
                              ASSERT_SOME }
                        /* [ mutez : contract unit
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        UNIT
                        /* [ unit : mutez : contract unit
                           : pair string timestamp (pair mutez mutez) address address address ] */ ;
                        TRANSFER_TOKENS
                        /* [ operation
                           : pair string timestamp (pair mutez mutez) address address address ] */ } ;
                   DIP { BALANCE
                         /* [ mutez : pair string timestamp (pair mutez mutez) address address address ] */ ;
                         DIP { DUP
                               /* [ pair string timestamp (pair mutez mutez) address address address
                                  : pair string timestamp (pair mutez mutez) address address address ] */ ;
                               CDDDDDR }
                         /* [ mutez : address
                            : pair string timestamp (pair mutez mutez) address address address ] */ ;
                         DIP { CONTRACT
                                 unit
                               /* [ option (contract unit)
                                  : pair string timestamp (pair mutez mutez) address address address ] */ ;
                               ASSERT_SOME }
                         /* [ mutez : contract unit
                            : pair string timestamp (pair mutez mutez) address address address ] */ ;
                         UNIT
                         /* [ unit : mutez : contract unit
                            : pair string timestamp (pair mutez mutez) address address address ] */ ;
                         TRANSFER_TOKENS
                         /* [ operation
                            : pair string timestamp (pair mutez mutez) address address address ] */ }
                   /* [ operation : operation
                      : pair string timestamp (pair mutez mutez) address address address ] */ ;
                   NIL operation
                   /* [ list operation : operation : operation
                      : pair string timestamp (pair mutez mutez) address address address ] */ ;
                   SWAP
                   /* [ operation : list operation : operation
                      : pair string timestamp (pair mutez mutez) address address address ] */ ;
                   CONS
                   /* [ list operation : operation
                      : pair string timestamp (pair mutez mutez) address address address ] */ ;
                   SWAP
                   /* [ operation : list operation
                      : pair string timestamp (pair mutez mutez) address address address ] */ ;
                   CONS
                   /* [ list operation
                      : pair string timestamp (pair mutez mutez) address address address ] */ ;
                   PAIR
                   /* [ pair (list operation) string timestamp (pair mutez mutez) address address address ] */ } } } }
Well typed (Gas remaining: 1039977.017 units remaining)	michelson_test_scripts/attic/spawn_identities.tz
{ parameter nat ;
  storage (list address) ;
  code { /* [ pair string string ] */
         DUP
         /* [ list operation : string ] */ ;
         CAR
         /* [ nat : pair nat (list address) ] */ ;
         DIP { CDR /* [ list address ] */ ; NIL operation /* [ list operation : list address ] */ }
         /* [ pair (list operation) string ] */ ;
         PUSH bool True
         /* [ bool : nat : list operation : list address ] */ ;
         LOOP { DUP
                /* [ nat : nat : list operation : list address ] */ ;
                PUSH nat 0
                /* [ nat : nat : nat : list operation : list address ] */ ;
                CMPEQ ;
                IF { PUSH bool False /* [ bool : nat : list operation : list address ] */ }
                   { PUSH nat 1
                     /* [ nat : nat : list operation : list address ] */ ;
                     SWAP
                     /* [ nat : nat : list operation : list address ] */ ;
                     SUB
                     /* [ int : list operation : list address ] */ ;
                     ABS
                     /* [ nat : list operation : list address ] */ ;
                     PUSH string "init"
                     /* [ string : nat : list operation : list address ] */ ;
                     PUSH mutez 5000000
                     /* [ mutez : string : nat : list operation : list address ] */ ;
                     NONE key_hash
                     /* [ option key_hash : mutez : string : nat : list operation : list address ] */ ;
                     CREATE_CONTRACT
                       { parameter string ;
                         storage string ;
                         code { CAR ; NIL operation ; PAIR } }
                     /* [ operation : address : nat : list operation : list address ] */ ;
                     SWAP
                     /* [ address : operation : nat : list operation : list address ] */ ;
                     DIP { SWAP
                           /* [ nat : operation : list operation : list address ] */ ;
                           DIP { CONS /* [ list operation : list address ] */ }
                           /* [ nat : list operation : list address ] */ }
                     /* [ address : nat : list operation : list address ] */ ;
                     SWAP
                     /* [ nat : address : list operation : list address ] */ ;
                     DIP { SWAP
                           /* [ list operation : address : list address ] */ ;
                           DIP { CONS /* [ list address ] */ }
                           /* [ list operation : list address ] */ }
                     /* [ nat : list operation : list address ] */ ;
                     PUSH bool True
                     /* [ bool : nat : list operation : list address ] */ } }
         /* [ nat : list operation : list address ] */ ;
         DROP
         /* [ list operation : list address ] */ ;
         PAIR
         /* [ pair (list operation) (list address) ] */ } }
Well typed (Gas remaining: 1039955.119 units remaining)	michelson_test_scripts/entrypoints/big_map_entrypoints.tz
{ storage (pair (big_map string nat) (big_map string nat)) ;
  parameter
    (or (unit %default
        /* [ list operation : big_map string nat ] */)
        (or (or %mem
               (string %mem_left)
               (string %mem_right)
            /* [ pair (list operation) (big_map string nat) ] */)
            (or (or %add (pair %add_left string nat) (pair %add_right string nat))
                (or %rem (string %rem_left) (string %rem_right))))
    /* [ big_map string nat ] */)
  /* [ string : big_map string nat ] */ ;
  code { UNPAIR
         /* [ or unit
               (or (or string string) (or (or (pair string nat) (pair string nat)) (or string string)))
            : pair (big_map string nat) (big_map string nat) ] */ ;
         IF_LEFT
           { DROP
             /* [ pair (big_map string nat) (big_map string nat) ] */ ;
             DUP
             /* [ pair (big_map string nat) (big_map string nat)
                : pair (big_map string nat) (big_map string nat) ] */ ;
             CAR
             /* [ big_map string nat : pair (big_map string nat) (big_map string nat) ] */ ;
             PUSH mutez
                  0
             /* [ mutez : big_map string nat
                : pair (big_map string nat) (big_map string nat) ] */ ;
             NONE key_hash
             /* [ option key_hash : mutez : big_map string nat
                : pair (big_map string nat) (big_map string nat) ] */ ;
             CREATE_CONTRACT
               { parameter string ;
                 storage (big_map string nat) ;
                 code { UNPAIR ; DROP ; NIL operation ; PAIR } }
             /* [ operation : address : pair (big_map string nat) (big_map string nat) ] */ ;
             DIP { DROP /* [ pair (big_map string nat) (big_map string nat) ] */ }
             /* [ operation : pair (big_map string nat) (big_map string nat) ] */ ;
             NIL operation
             /* [ list operation : operation
                : pair (big_map string nat) (big_map string nat) ] */ ;
             SWAP
             /* [ operation : list operation
                : pair (big_map string nat) (big_map string nat) ] */ ;
             CONS
             /* [ list operation : pair (big_map string nat) (big_map string nat) ] */ ;
             PAIR
             /* [ pair (list operation) (big_map string nat) (big_map string nat) ] */ }
           { IF_LEFT
               { IF_LEFT
                   { DIP { UNPAIR /* [ big_map string nat : big_map string nat ] */ }
                     /* [ string : big_map string nat : big_map string nat ] */ ;
                     DIP { DUP /* [ big_map string nat : big_map string nat : big_map string nat ] */ }
                     /* [ string : big_map string nat : big_map string nat : big_map string nat ] */ ;
                     MEM
                     /* [ bool : big_map string nat : big_map string nat ] */ ;
                     ASSERT }
                   { DIP { UNPAIR
                           /* [ big_map string nat : big_map string nat ] */ ;
                           SWAP
                           /* [ big_map string nat : big_map string nat ] */ }
                     /* [ string : big_map string nat : big_map string nat ] */ ;
                     DIP { DUP /* [ big_map string nat : big_map string nat : big_map string nat ] */ }
                     /* [ string : big_map string nat : big_map string nat : big_map string nat ] */ ;
                     MEM
                     /* [ bool : big_map string nat : big_map string nat ] */ ;
                     ASSERT ;
                     SWAP
                     /* [ big_map string nat : big_map string nat ] */ } }
               { IF_LEFT
                   { IF_LEFT
                       { UNPAIR
                         /* [ string : nat : pair (big_map string nat) (big_map string nat) ] */ ;
                         DIP 2
                             { UNPAIR /* [ big_map string nat : big_map string nat ] */ }
                         /* [ string : nat : big_map string nat : big_map string nat ] */ ;
                         DIP { SOME /* [ option nat : big_map string nat : big_map string nat ] */ }
                         /* [ string : option nat : big_map string nat : big_map string nat ] */ ;
                         UPDATE
                         /* [ big_map string nat : big_map string nat ] */ }
                       { UNPAIR
                         /* [ string : nat : pair (big_map string nat) (big_map string nat) ] */ ;
                         DIP 2
                             { UNPAIR
                               /* [ big_map string nat : big_map string nat ] */ ;
                               SWAP
                               /* [ big_map string nat : big_map string nat ] */ }
                         /* [ string : nat : big_map string nat : big_map string nat ] */ ;
                         DIP { SOME /* [ option nat : big_map string nat : big_map string nat ] */ }
                         /* [ string : option nat : big_map string nat : big_map string nat ] */ ;
                         UPDATE
                         /* [ big_map string nat : big_map string nat ] */ ;
                         SWAP
                         /* [ big_map string nat : big_map string nat ] */ } }
                   { IF_LEFT
                       { DIP { UNPAIR /* [ big_map string nat : big_map string nat ] */ }
                         /* [ string : big_map string nat : big_map string nat ] */ ;
                         DIP { NONE nat /* [ option nat : big_map string nat : big_map string nat ] */ }
                         /* [ string : option nat : big_map string nat : big_map string nat ] */ ;
                         UPDATE
                         /* [ big_map string nat : big_map string nat ] */ }
                       { DIP { UNPAIR
                               /* [ big_map string nat : big_map string nat ] */ ;
                               SWAP
                               /* [ big_map string nat : big_map string nat ] */ }
                         /* [ string : big_map string nat : big_map string nat ] */ ;
                         DIP { NONE nat /* [ option nat : big_map string nat : big_map string nat ] */ }
                         /* [ string : option nat : big_map string nat : big_map string nat ] */ ;
                         UPDATE
                         /* [ big_map string nat : big_map string nat ] */ ;
                         SWAP
                         /* [ big_map string nat : big_map string nat ] */ } } } ;
             PAIR
             /* [ pair (big_map string nat) (big_map string nat) ] */ ;
             NIL operation
             /* [ list operation : pair (big_map string nat) (big_map string nat) ] */ ;
             PAIR
             /* [ pair (list operation) (big_map string nat) (big_map string nat) ] */ } } }
Well typed (Gas remaining: 1039961.799 units remaining)	michelson_test_scripts/entrypoints/delegatable_target.tz
{ parameter
    (or (or (key_hash %set_delegate) (unit %remove_delegate)) (or %default string nat)) ;
  storage (pair key_hash (pair string nat)) ;
  code { DUP
         /* [ pair (or (or key_hash unit) (or string nat)) key_hash string nat
            : pair (or (or key_hash unit) (or string nat)) key_hash string nat ] */ ;
         CAR
         /* [ or (or key_hash unit) (or string nat)
            : pair (or (or key_hash unit) (or string nat)) key_hash string nat ] */ ;
         IF_LEFT
           { PUSH mutez
                  0
             /* [ mutez : or key_hash unit
                : pair (or (or key_hash unit) (or string nat)) key_hash string nat ] */ ;
             AMOUNT
             /* [ mutez : mutez : or key_hash unit
                : pair (or (or key_hash unit) (or string nat)) key_hash string nat ] */ ;
             ASSERT_CMPEQ ;
             DUP 2
             /* [ pair (or (or key_hash unit) (or string nat)) key_hash string nat
                : or key_hash unit
                : pair (or (or key_hash unit) (or string nat)) key_hash string nat ] */ ;
             CDR
             /* [ pair key_hash string nat : or key_hash unit
                : pair (or (or key_hash unit) (or string nat)) key_hash string nat ] */ ;
             CAR
             /* [ key_hash : or key_hash unit
                : pair (or (or key_hash unit) (or string nat)) key_hash string nat ] */ ;
             IMPLICIT_ACCOUNT
             /* [ contract unit : or key_hash unit
                : pair (or (or key_hash unit) (or string nat)) key_hash string nat ] */ ;
             ADDRESS
             /* [ address : or key_hash unit
                : pair (or (or key_hash unit) (or string nat)) key_hash string nat ] */ ;
             SENDER
             /* [ address : address : or key_hash unit
                : pair (or (or key_hash unit) (or string nat)) key_hash string nat ] */ ;
             IFCMPNEQ
               { SENDER
                 /* [ address : or key_hash unit
                    : pair (or (or key_hash unit) (or string nat)) key_hash string nat ] */ ;
                 PUSH string
                      "Only the owner can operate."
                 /* [ string : address : or key_hash unit
                    : pair (or (or key_hash unit) (or string nat)) key_hash string nat ] */ ;
                 PAIR
                 /* [ pair string address : or key_hash unit
                    : pair (or (or key_hash unit) (or string nat)) key_hash string nat ] */ ;
                 FAILWITH
                 /* [] */ }
               { DIP { CDR
                       /* [ pair key_hash string nat ] */ ;
                       NIL operation
                       /* [ list operation : pair key_hash string nat ] */ }
                 /* [ or key_hash unit : list operation : pair key_hash string nat ] */ ;
                 IF_LEFT
                   { SOME
                     /* [ option key_hash : list operation : pair key_hash string nat ] */ ;
                     SET_DELEGATE
                     /* [ operation : list operation : pair key_hash string nat ] */ ;
                     CONS
                     /* [ list operation : pair key_hash string nat ] */ ;
                     PAIR
                     /* [ pair (list operation) key_hash string nat ] */ }
                   { DROP
                     /* [ list operation : pair key_hash string nat ] */ ;
                     NONE key_hash
                     /* [ option key_hash : list operation : pair key_hash string nat ] */ ;
                     SET_DELEGATE
                     /* [ operation : list operation : pair key_hash string nat ] */ ;
                     CONS
                     /* [ list operation : pair key_hash string nat ] */ ;
                     PAIR
                     /* [ pair (list operation) key_hash string nat ] */ } } }
           { DIP { CDR
                   /* [ pair key_hash string nat ] */ ;
                   DUP
                   /* [ pair key_hash string nat : pair key_hash string nat ] */ ;
                   CDR
                   /* [ pair string nat : pair key_hash string nat ] */ }
             /* [ or string nat : pair string nat : pair key_hash string nat ] */ ;
             PAIR
             /* [ pair (or string nat) string nat : pair key_hash string nat ] */ ;
             { UNPAIR
               /* [ or string nat : pair string nat : pair key_hash string nat ] */ ;
               IF_LEFT
                 { DIP { UNPAIR
                         /* [ string : nat : pair key_hash string nat ] */ ;
                         DROP
                         /* [ nat : pair key_hash string nat ] */ }
                   /* [ string : nat : pair key_hash string nat ] */ }
                 { DUG 1
                   /* [ pair string nat : nat : pair key_hash string nat ] */ ;
                   UNPAIR
                   /* [ string : nat : nat : pair key_hash string nat ] */ ;
                   DIP { DROP /* [ nat : pair key_hash string nat ] */ }
                   /* [ string : nat : pair key_hash string nat ] */ } ;
               PAIR
               /* [ pair string nat : pair key_hash string nat ] */ ;
               NIL operation
               /* [ list operation : pair string nat : pair key_hash string nat ] */ ;
               PAIR
               /* [ pair (list operation) string nat : pair key_hash string nat ] */ } ;
             SWAP
             /* [ pair key_hash string nat : pair (list operation) string nat ] */ ;
             CAR
             /* [ key_hash : pair (list operation) string nat ] */ ;
             SWAP
             /* [ pair (list operation) string nat : key_hash ] */ ;
             UNPAIR
             /* [ list operation : pair string nat : key_hash ] */ ;
             DIP { SWAP /* [ key_hash : pair string nat ] */ ; PAIR /* [ pair key_hash string nat ] */ }
             /* [ list operation : pair key_hash string nat ] */ ;
             PAIR
             /* [ pair (list operation) key_hash string nat ] */ } } }
Well typed (Gas remaining: 1039984.594 units remaining)	michelson_test_scripts/entrypoints/manager.tz
{ parameter (or (lambda %do unit (list operation)) (unit %default)) ;
  storage key_hash ;
  code { UNPAIR
         /* [ or (lambda unit (list operation)) unit : key_hash ] */ ;
         IF_LEFT
           { PUSH mutez 0
             /* [ mutez : lambda unit (list operation) : key_hash ] */ ;
             AMOUNT
             /* [ mutez : mutez : lambda unit (list operation) : key_hash ] */ ;
             ASSERT_CMPEQ ;
             DUP 2
             /* [ key_hash : lambda unit (list operation) : key_hash ] */ ;
             IMPLICIT_ACCOUNT
             /* [ contract unit : lambda unit (list operation) : key_hash ] */ ;
             ADDRESS
             /* [ address : lambda unit (list operation) : key_hash ] */ ;
             SENDER
             /* [ address : address : lambda unit (list operation) : key_hash ] */ ;
             ASSERT_CMPEQ ;
             UNIT
             /* [ unit : lambda unit (list operation) : key_hash ] */ ;
             EXEC
             /* [ list operation : key_hash ] */ ;
             PAIR
             /* [ pair (list operation) key_hash ] */ }
           { DROP
             /* [ key_hash ] */ ;
             NIL operation
             /* [ list operation : key_hash ] */ ;
             PAIR
             /* [ pair (list operation) key_hash ] */ } } }
Well typed (Gas remaining: 1039990.499 units remaining)	michelson_test_scripts/entrypoints/no_default_target.tz
{ storage (pair string nat) ;
  parameter (or unit (or %data string nat)) ;
  code { UNPAIR
         /* [ or unit (or string nat) : pair string nat ] */ ;
         IF_LEFT
           { DROP
             /* [ pair string nat ] */ ;
             NIL operation
             /* [ list operation : pair string nat ] */ ;
             PAIR
             /* [ pair (list operation) string nat ] */ }
           { IF_LEFT
               { DIP { UNPAIR /* [ string : nat ] */ ; DROP /* [ nat ] */ } /* [ string : nat ] */ }
               { DUG 1
                 /* [ pair string nat : nat ] */ ;
                 UNPAIR
                 /* [ string : nat : nat ] */ ;
                 DIP { DROP /* [ nat ] */ }
                 /* [ string : nat ] */ } ;
             PAIR
             /* [ pair string nat ] */ ;
             NIL operation
             /* [ list operation : pair string nat ] */ ;
             PAIR
             /* [ pair (list operation) string nat ] */ } } }
Well typed (Gas remaining: 1039990.499 units remaining)	michelson_test_scripts/entrypoints/no_entrypoint_target.tz
{ storage (pair string nat) ;
  parameter (or unit (or string nat)) ;
  code { UNPAIR
         /* [ or unit (or string nat) : pair string nat ] */ ;
         IF_LEFT
           { DROP
             /* [ pair string nat ] */ ;
             NIL operation
             /* [ list operation : pair string nat ] */ ;
             PAIR
             /* [ pair (list operation) string nat ] */ }
           { IF_LEFT
               { DIP { UNPAIR /* [ string : nat ] */ ; DROP /* [ nat ] */ } /* [ string : nat ] */ }
               { DUG 1
                 /* [ pair string nat : nat ] */ ;
                 UNPAIR
                 /* [ string : nat : nat ] */ ;
                 DIP { DROP /* [ nat ] */ }
                 /* [ string : nat ] */ } ;
             PAIR
             /* [ pair string nat ] */ ;
             NIL operation
             /* [ list operation : pair string nat ] */ ;
             PAIR
             /* [ pair (list operation) string nat ] */ } } }
Well typed (Gas remaining: 1039990.499 units remaining)	michelson_test_scripts/entrypoints/rooted_target.tz
{ storage (pair string nat) ;
  parameter (or %root unit (or %default string nat)) ;
  code { UNPAIR
         /* [ or unit (or string nat) : pair string nat ] */ ;
         IF_LEFT
           { DROP
             /* [ pair string nat ] */ ;
             NIL operation
             /* [ list operation : pair string nat ] */ ;
             PAIR
             /* [ pair (list operation) string nat ] */ }
           { IF_LEFT
               { DIP { UNPAIR /* [ string : nat ] */ ; DROP /* [ nat ] */ } /* [ string : nat ] */ }
               { DUG 1
                 /* [ pair string nat : nat ] */ ;
                 UNPAIR
                 /* [ string : nat : nat ] */ ;
                 DIP { DROP /* [ nat ] */ }
                 /* [ string : nat ] */ } ;
             PAIR
             /* [ pair string nat ] */ ;
             NIL operation
             /* [ list operation : pair string nat ] */ ;
             PAIR
             /* [ pair (list operation) string nat ] */ } } }
Well typed (Gas remaining: 1039997.610 units remaining)	michelson_test_scripts/entrypoints/simple_entrypoints.tz
{ parameter (or (unit %A) (or (string %B) (nat %C))) ;
  storage unit ;
  code { CDR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039995.316 units remaining)	michelson_test_scripts/macros/assert.tz
{ parameter bool ;
  storage unit ;
  code { CAR
         /* [ bool ] */ ;
         ASSERT ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.694 units remaining)	michelson_test_scripts/macros/assert_cmpeq.tz
{ parameter (pair int int) ;
  storage unit ;
  code { CAR
         /* [ pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int ] */ ;
         CAR
         /* [ int : pair int int ] */ ;
         DIP { CDR /* [ int ] */ }
         /* [ int : int ] */ ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.694 units remaining)	michelson_test_scripts/macros/assert_cmpge.tz
{ parameter (pair int int) ;
  storage unit ;
  code { CAR
         /* [ pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int ] */ ;
         CAR
         /* [ int : pair int int ] */ ;
         DIP { CDR /* [ int ] */ }
         /* [ int : int ] */ ;
         ASSERT_CMPGE ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.694 units remaining)	michelson_test_scripts/macros/assert_cmpgt.tz
{ parameter (pair int int) ;
  storage unit ;
  code { CAR
         /* [ pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int ] */ ;
         CAR
         /* [ int : pair int int ] */ ;
         DIP { CDR /* [ int ] */ }
         /* [ int : int ] */ ;
         ASSERT_CMPGT ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.694 units remaining)	michelson_test_scripts/macros/assert_cmple.tz
{ parameter (pair int int) ;
  storage unit ;
  code { CAR
         /* [ pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int ] */ ;
         CAR
         /* [ int : pair int int ] */ ;
         DIP { CDR /* [ int ] */ }
         /* [ int : int ] */ ;
         ASSERT_CMPLE ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.694 units remaining)	michelson_test_scripts/macros/assert_cmplt.tz
{ parameter (pair int int) ;
  storage unit ;
  code { CAR
         /* [ pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int ] */ ;
         CAR
         /* [ int : pair int int ] */ ;
         DIP { CDR /* [ int ] */ }
         /* [ int : int ] */ ;
         ASSERT_CMPLT ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.694 units remaining)	michelson_test_scripts/macros/assert_cmpneq.tz
{ parameter (pair int int) ;
  storage unit ;
  code { CAR
         /* [ pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int ] */ ;
         CAR
         /* [ int : pair int int ] */ ;
         DIP { CDR /* [ int ] */ }
         /* [ int : int ] */ ;
         ASSERT_CMPNEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.942 units remaining)	michelson_test_scripts/macros/assert_eq.tz
{ parameter (pair int int) ;
  storage unit ;
  code { CAR
         /* [ pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int ] */ ;
         CAR
         /* [ int : pair int int ] */ ;
         DIP { CDR /* [ int ] */ }
         /* [ int : int ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.942 units remaining)	michelson_test_scripts/macros/assert_ge.tz
{ parameter (pair int int) ;
  storage unit ;
  code { CAR
         /* [ pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int ] */ ;
         CAR
         /* [ int : pair int int ] */ ;
         DIP { CDR /* [ int ] */ }
         /* [ int : int ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_GE ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.942 units remaining)	michelson_test_scripts/macros/assert_gt.tz
{ parameter (pair int int) ;
  storage unit ;
  code { CAR
         /* [ pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int ] */ ;
         CAR
         /* [ int : pair int int ] */ ;
         DIP { CDR /* [ int ] */ }
         /* [ int : int ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_GT ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.942 units remaining)	michelson_test_scripts/macros/assert_le.tz
{ parameter (pair int int) ;
  storage unit ;
  code { CAR
         /* [ pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int ] */ ;
         CAR
         /* [ int : pair int int ] */ ;
         DIP { CDR /* [ int ] */ }
         /* [ int : int ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_LE ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.942 units remaining)	michelson_test_scripts/macros/assert_lt.tz
{ parameter (pair int int) ;
  storage unit ;
  code { CAR
         /* [ pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int ] */ ;
         CAR
         /* [ int : pair int int ] */ ;
         DIP { CDR /* [ int ] */ }
         /* [ int : int ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_LT ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.942 units remaining)	michelson_test_scripts/macros/assert_neq.tz
{ parameter (pair int int) ;
  storage unit ;
  code { CAR
         /* [ pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int ] */ ;
         CAR
         /* [ int : pair int int ] */ ;
         DIP { CDR /* [ int ] */ }
         /* [ int : int ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_NEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039971.464 units remaining)	michelson_test_scripts/macros/big_map_get_add.tz
{ parameter (pair (pair %set_pair int (option int)) (pair %check_pair int (option int))) ;
  storage (pair (big_map int int) unit) ;
  code { DUP
         /* [ pair (pair (pair int (option int)) int (option int)) (big_map int int) unit
            : pair (pair (pair int (option int)) int (option int)) (big_map int int) unit ] */ ;
         DIP { CDAR }
         /* [ pair (pair (pair int (option int)) int (option int)) (big_map int int) unit
            : big_map int int ] */ ;
         DUP
         /* [ pair (pair (pair int (option int)) int (option int)) (big_map int int) unit
            : pair (pair (pair int (option int)) int (option int)) (big_map int int) unit
            : big_map int int ] */ ;
         DIP { CADR ;
               DUP
               /* [ pair int (option int) : pair int (option int) : big_map int int ] */ ;
               CAR
               /* [ int : pair int (option int) : big_map int int ] */ ;
               DIP { CDR /* [ option int : big_map int int ] */ }
               /* [ int : option int : big_map int int ] */ ;
               UPDATE
               /* [ big_map int int ] */ ;
               DUP
               /* [ big_map int int : big_map int int ] */ }
         /* [ pair (pair (pair int (option int)) int (option int)) (big_map int int) unit
            : big_map int int : big_map int int ] */ ;
         CADR ;
         DUP
         /* [ pair int (option int) : pair int (option int) : big_map int int
            : big_map int int ] */ ;
         CDR
         /* [ option int : pair int (option int) : big_map int int : big_map int int ] */ ;
         DIP { CAR
               /* [ int : big_map int int : big_map int int ] */ ;
               GET
               /* [ option int : big_map int int ] */ }
         /* [ option int : option int : big_map int int ] */ ;
         IF_SOME
           { SWAP
             /* [ option int : int : big_map int int ] */ ;
             IF_SOME { ASSERT_CMPEQ } { FAIL } }
           { ASSERT_NONE } ;
         UNIT
         /* [ unit : big_map int int ] */ ;
         SWAP
         /* [ big_map int int : unit ] */ ;
         PAIR
         /* [ pair (big_map int int) unit ] */ ;
         NIL operation
         /* [ list operation : pair (big_map int int) unit ] */ ;
         PAIR
         /* [ pair (list operation) (big_map int int) unit ] */ } }
Well typed (Gas remaining: 1039984.426 units remaining)	michelson_test_scripts/macros/big_map_mem.tz
{ parameter (pair int bool) ;
  storage (pair (big_map int unit) unit) ;
  code { DUP
         /* [ pair (pair int bool) (big_map int unit) unit
            : pair (pair int bool) (big_map int unit) unit ] */ ;
         DUP
         /* [ pair (pair int bool) (big_map int unit) unit
            : pair (pair int bool) (big_map int unit) unit
            : pair (pair int bool) (big_map int unit) unit ] */ ;
         CADR ;
         DIP { CAAR ;
               DIP { CDAR ; DUP /* [ big_map int unit : big_map int unit ] */ }
               /* [ int : big_map int unit : big_map int unit ] */ ;
               MEM
               /* [ bool : big_map int unit ] */ }
         /* [ bool : bool : big_map int unit ] */ ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit : big_map int unit ] */ ;
         SWAP
         /* [ big_map int unit : unit ] */ ;
         PAIR
         /* [ pair (big_map int unit) unit ] */ ;
         NIL operation
         /* [ list operation : pair (big_map int unit) unit ] */ ;
         PAIR
         /* [ pair (list operation) (big_map int unit) unit ] */ } }
Well typed (Gas remaining: 1039985.285 units remaining)	michelson_test_scripts/macros/build_list.tz
{ parameter nat ;
  storage (list nat) ;
  code { CAR @counter
         /* [ nat ] */ ;
         NIL @acc nat
         /* [ list nat : nat ] */ ;
         SWAP
         /* [ nat : list nat ] */ ;
         DUP @cmp_num
         /* [ nat : nat : list nat ] */ ;
         PUSH nat 0
         /* [ nat : nat : nat : list nat ] */ ;
         CMPNEQ ;
         LOOP { DUP
                /* [ nat : nat : list nat ] */ ;
                DIP { SWAP /* [ list nat : nat ] */ }
                /* [ nat : list nat : nat ] */ ;
                CONS @acc
                /* [ list nat : nat ] */ ;
                SWAP
                /* [ nat : list nat ] */ ;
                PUSH nat 1
                /* [ nat : nat : list nat ] */ ;
                SWAP
                /* [ nat : nat : list nat ] */ ;
                SUB @counter
                /* [ int : list nat ] */ ;
                DUP
                /* [ int : int : list nat ] */ ;
                DIP { ABS /* [ nat : list nat ] */ }
                /* [ int : nat : list nat ] */ ;
                PUSH int 0
                /* [ int : int : nat : list nat ] */ ;
                CMPNEQ }
         /* [ nat : list nat ] */ ;
         CONS
         /* [ list nat ] */ ;
         NIL operation
         /* [ list operation : list nat ] */ ;
         PAIR
         /* [ pair (list operation) (list nat) ] */ } }
Well typed (Gas remaining: 1039965.258 units remaining)	michelson_test_scripts/macros/carn_and_cdrn.tz
{ parameter (pair nat nat nat unit) ;
  storage unit ;
  code { CAR
         /* [ pair nat nat nat unit ] */ ;
         DUP
         /* [ pair nat nat nat unit : pair nat nat nat unit ] */ ;
         CAR
         /* [ nat : pair nat nat nat unit ] */ ;
         PUSH nat 1
         /* [ nat : nat : pair nat nat nat unit ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair nat nat nat unit : pair nat nat nat unit ] */ ;
         CAR 0 ;
         PUSH nat 1
         /* [ nat : nat : pair nat nat nat unit ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair nat nat nat unit : pair nat nat nat unit ] */ ;
         CAR 1 ;
         PUSH nat 4
         /* [ nat : nat : pair nat nat nat unit ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair nat nat nat unit : pair nat nat nat unit ] */ ;
         CAR 2 ;
         PUSH nat 2
         /* [ nat : nat : pair nat nat nat unit ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair nat nat nat unit : pair nat nat nat unit ] */ ;
         CDR 3 ;
         UNIT
         /* [ unit : unit : pair nat nat nat unit ] */ ;
         ASSERT_CMPEQ ;
         DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039971.433 units remaining)	michelson_test_scripts/macros/compare.tz
{ parameter (pair mutez mutez) ;
  storage (list bool) ;
  code { CAR
         /* [ pair mutez mutez ] */ ;
         DUP
         /* [ pair mutez mutez : pair mutez mutez ] */ ;
         DUP
         /* [ pair mutez mutez : pair mutez mutez : pair mutez mutez ] */ ;
         DUP
         /* [ pair mutez mutez : pair mutez mutez : pair mutez mutez : pair mutez mutez ] */ ;
         DUP
         /* [ pair mutez mutez : pair mutez mutez : pair mutez mutez : pair mutez mutez
            : pair mutez mutez ] */ ;
         DIP 5
             { NIL bool /* [ list bool ] */ }
         /* [ pair mutez mutez : pair mutez mutez : pair mutez mutez : pair mutez mutez
            : pair mutez mutez : list bool ] */ ;
         DIP 4
             { DUP
               /* [ pair mutez mutez : pair mutez mutez : list bool ] */ ;
               CAR
               /* [ mutez : pair mutez mutez : list bool ] */ ;
               DIP { CDR /* [ mutez : list bool ] */ }
               /* [ mutez : mutez : list bool ] */ ;
               COMPARE
               /* [ int : list bool ] */ ;
               LE
               /* [ bool : list bool ] */ ;
               CONS
               /* [ list bool ] */ }
         /* [ pair mutez mutez : pair mutez mutez : pair mutez mutez : pair mutez mutez
            : list bool ] */ ;
         DIP 3
             { DUP
               /* [ pair mutez mutez : pair mutez mutez : list bool ] */ ;
               CAR
               /* [ mutez : pair mutez mutez : list bool ] */ ;
               DIP { CDR /* [ mutez : list bool ] */ }
               /* [ mutez : mutez : list bool ] */ ;
               COMPARE
               /* [ int : list bool ] */ ;
               GE
               /* [ bool : list bool ] */ ;
               CONS
               /* [ list bool ] */ }
         /* [ pair mutez mutez : pair mutez mutez : pair mutez mutez : list bool ] */ ;
         DIP 2
             { DUP
               /* [ pair mutez mutez : pair mutez mutez : list bool ] */ ;
               CAR
               /* [ mutez : pair mutez mutez : list bool ] */ ;
               DIP { CDR /* [ mutez : list bool ] */ }
               /* [ mutez : mutez : list bool ] */ ;
               COMPARE
               /* [ int : list bool ] */ ;
               LT
               /* [ bool : list bool ] */ ;
               CONS
               /* [ list bool ] */ }
         /* [ pair mutez mutez : pair mutez mutez : list bool ] */ ;
         DIP { DUP
               /* [ pair mutez mutez : pair mutez mutez : list bool ] */ ;
               CAR
               /* [ mutez : pair mutez mutez : list bool ] */ ;
               DIP { CDR /* [ mutez : list bool ] */ }
               /* [ mutez : mutez : list bool ] */ ;
               COMPARE
               /* [ int : list bool ] */ ;
               GT
               /* [ bool : list bool ] */ ;
               CONS
               /* [ list bool ] */ }
         /* [ pair mutez mutez : list bool ] */ ;
         DUP
         /* [ pair mutez mutez : pair mutez mutez : list bool ] */ ;
         CAR
         /* [ mutez : pair mutez mutez : list bool ] */ ;
         DIP { CDR /* [ mutez : list bool ] */ }
         /* [ mutez : mutez : list bool ] */ ;
         COMPARE
         /* [ int : list bool ] */ ;
         EQ
         /* [ bool : list bool ] */ ;
         CONS
         /* [ list bool ] */ ;
         NIL operation
         /* [ list operation : list bool ] */ ;
         PAIR
         /* [ pair (list operation) (list bool) ] */ } }
Well typed (Gas remaining: 1039971.433 units remaining)	michelson_test_scripts/macros/compare_bytes.tz
{ parameter (pair bytes bytes) ;
  storage (list bool) ;
  code { CAR
         /* [ pair bytes bytes ] */ ;
         DUP
         /* [ pair bytes bytes : pair bytes bytes ] */ ;
         DUP
         /* [ pair bytes bytes : pair bytes bytes : pair bytes bytes ] */ ;
         DUP
         /* [ pair bytes bytes : pair bytes bytes : pair bytes bytes : pair bytes bytes ] */ ;
         DUP
         /* [ pair bytes bytes : pair bytes bytes : pair bytes bytes : pair bytes bytes
            : pair bytes bytes ] */ ;
         DIP 5
             { NIL bool /* [ list bool ] */ }
         /* [ pair bytes bytes : pair bytes bytes : pair bytes bytes : pair bytes bytes
            : pair bytes bytes : list bool ] */ ;
         DIP 4
             { DUP
               /* [ pair bytes bytes : pair bytes bytes : list bool ] */ ;
               CAR
               /* [ bytes : pair bytes bytes : list bool ] */ ;
               DIP { CDR /* [ bytes : list bool ] */ }
               /* [ bytes : bytes : list bool ] */ ;
               COMPARE
               /* [ int : list bool ] */ ;
               LE
               /* [ bool : list bool ] */ ;
               CONS
               /* [ list bool ] */ }
         /* [ pair bytes bytes : pair bytes bytes : pair bytes bytes : pair bytes bytes
            : list bool ] */ ;
         DIP 3
             { DUP
               /* [ pair bytes bytes : pair bytes bytes : list bool ] */ ;
               CAR
               /* [ bytes : pair bytes bytes : list bool ] */ ;
               DIP { CDR /* [ bytes : list bool ] */ }
               /* [ bytes : bytes : list bool ] */ ;
               COMPARE
               /* [ int : list bool ] */ ;
               GE
               /* [ bool : list bool ] */ ;
               CONS
               /* [ list bool ] */ }
         /* [ pair bytes bytes : pair bytes bytes : pair bytes bytes : list bool ] */ ;
         DIP 2
             { DUP
               /* [ pair bytes bytes : pair bytes bytes : list bool ] */ ;
               CAR
               /* [ bytes : pair bytes bytes : list bool ] */ ;
               DIP { CDR /* [ bytes : list bool ] */ }
               /* [ bytes : bytes : list bool ] */ ;
               COMPARE
               /* [ int : list bool ] */ ;
               LT
               /* [ bool : list bool ] */ ;
               CONS
               /* [ list bool ] */ }
         /* [ pair bytes bytes : pair bytes bytes : list bool ] */ ;
         DIP { DUP
               /* [ pair bytes bytes : pair bytes bytes : list bool ] */ ;
               CAR
               /* [ bytes : pair bytes bytes : list bool ] */ ;
               DIP { CDR /* [ bytes : list bool ] */ }
               /* [ bytes : bytes : list bool ] */ ;
               COMPARE
               /* [ int : list bool ] */ ;
               GT
               /* [ bool : list bool ] */ ;
               CONS
               /* [ list bool ] */ }
         /* [ pair bytes bytes : list bool ] */ ;
         DUP
         /* [ pair bytes bytes : pair bytes bytes : list bool ] */ ;
         CAR
         /* [ bytes : pair bytes bytes : list bool ] */ ;
         DIP { CDR /* [ bytes : list bool ] */ }
         /* [ bytes : bytes : list bool ] */ ;
         COMPARE
         /* [ int : list bool ] */ ;
         EQ
         /* [ bool : list bool ] */ ;
         CONS
         /* [ list bool ] */ ;
         NIL operation
         /* [ list operation : list bool ] */ ;
         PAIR
         /* [ pair (list operation) (list bool) ] */ } }
Well typed (Gas remaining: 1039998.443 units remaining)	michelson_test_scripts/macros/fail.tz
{ parameter unit ; storage unit ; code { FAIL } }
Well typed (Gas remaining: 1039988.389 units remaining)	michelson_test_scripts/macros/guestbook.tz
{ parameter string ;
  storage (map address (option string)) ;
  code { UNPAIR @message @guestbook
         /* [ string : map address (option string) ] */ ;
         SWAP
         /* [ map address (option string) : string ] */ ;
         DUP
         /* [ map address (option string) : map address (option string) : string ] */ ;
         SENDER
         /* [ address : map address (option string) : map address (option string)
            : string ] */ ;
         GET @previous_message
         /* [ option (option string) : map address (option string) : string ] */ ;
         ASSERT_SOME ;
         ASSERT_NONE ;
         SWAP
         /* [ string : map address (option string) ] */ ;
         SOME
         /* [ option string : map address (option string) ] */ ;
         SOME
         /* [ option (option string) : map address (option string) ] */ ;
         SENDER
         /* [ address : option (option string) : map address (option string) ] */ ;
         UPDATE
         /* [ map address (option string) ] */ ;
         NIL operation
         /* [ list operation : map address (option string) ] */ ;
         PAIR
         /* [ pair (list operation) (map address (option string)) ] */ } }
Well typed (Gas remaining: 1039993.538 units remaining)	michelson_test_scripts/macros/macro_annotations.tz
{ parameter unit ;
  storage (pair (unit %truc) unit) ;
  code { DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         UNIT
         /* [ unit : unit ] */ ;
         PAIR %truc
         /* [ pair unit unit ] */ ;
         UNIT
         /* [ unit : pair unit unit ] */ ;
         DUP @new_storage 2
         /* [ pair unit unit : unit : pair unit unit ] */ ;
         DIP { DROP /* [ pair unit unit ] */ ; DROP /* [] */ }
         /* [ pair unit unit ] */ ;
         NIL operation
         /* [ list operation : pair unit unit ] */ ;
         PAIR
         /* [ pair (list operation) unit unit ] */ } }
Well typed (Gas remaining: 1039967.257 units remaining)	michelson_test_scripts/macros/map_caddaadr.tz
{ parameter unit ;
  storage (pair (pair nat (pair nat (pair (pair (pair (nat %p) (mutez %value)) nat) nat))) nat) ;
  code { MAP_CDADDAADR @new_storage %value
           { PUSH mutez 1000000
             /* [ mutez : mutez : pair nat mutez ] */ ;
             ADD
             /* [ mutez : pair nat mutez ] */ } ;
         NIL operation
         /* [ list operation
            : pair unit (pair nat nat (pair (pair nat mutez) nat) nat) nat ] */ ;
         SWAP
         /* [ pair unit (pair nat nat (pair (pair nat mutez) nat) nat) nat
            : list operation ] */ ;
         SET_CAR } }
Well typed (Gas remaining: 1039988.067 units remaining)	michelson_test_scripts/macros/max_in_list.tz
{ parameter (list int) ;
  storage (option int) ;
  code { CAR
         /* [ list int ] */ ;
         DIP { NONE int /* [ option int ] */ }
         /* [ list int : option int ] */ ;
         ITER { SWAP
                /* [ option int : int ] */ ;
                IF_NONE
                  { SOME /* [ option int ] */ }
                  { DIP { DUP /* [ int : int ] */ }
                    /* [ int : int : int ] */ ;
                    DUP
                    /* [ int : int : int : int ] */ ;
                    DIP { SWAP /* [ int : int : int ] */ }
                    /* [ int : int : int : int ] */ ;
                    CMPLE ;
                    IF { DROP /* [ int ] */ } { DIP { DROP /* [] */ } /* [ int ] */ } ;
                    SOME
                    /* [ option int ] */ } }
         /* [ option int ] */ ;
         NIL operation
         /* [ list operation : option int ] */ ;
         PAIR
         /* [ pair (list operation) (option int) ] */ } }
Well typed (Gas remaining: 1039992.054 units remaining)	michelson_test_scripts/macros/min.tz
{ parameter (pair int int) ;
  storage int ;
  code { CAR
         /* [ pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int : pair int int ] */ ;
         CAR
         /* [ int : pair int int : pair int int ] */ ;
         DIP { CDR /* [ int : pair int int ] */ }
         /* [ int : int : pair int int ] */ ;
         CMPLT ;
         IF { CAR /* [ int ] */ } { CDR /* [ int ] */ } ;
         NIL operation
         /* [ list operation : int ] */ ;
         PAIR
         /* [ pair (list operation) int ] */ } }
Well typed (Gas remaining: 1039988.944 units remaining)	michelson_test_scripts/macros/pair_macro.tz
{ parameter unit ;
  storage unit ;
  code { UNIT
         /* [ unit : pair unit unit ] */ ;
         UNIT
         /* [ unit : unit : pair unit unit ] */ ;
         UNIT
         /* [ unit : unit : unit : pair unit unit ] */ ;
         UNIT
         /* [ unit : unit : unit : unit : pair unit unit ] */ ;
         UNIT
         /* [ unit : unit : unit : unit : unit : pair unit unit ] */ ;
         PAPAPAPAIR @name %x1 %x2 %x3 %x4 %x5 ;
         CDDDAR %x4 @fourth ;
         DROP
         /* [ pair unit unit ] */ ;
         CDR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039971.173 units remaining)	michelson_test_scripts/macros/set_caddaadr.tz
{ parameter mutez ;
  storage (pair (pair nat (pair nat (pair (pair (pair (nat %p) (mutez %value)) nat) nat))) nat) ;
  code { DUP
         /* [ pair mutez (pair nat nat (pair (pair nat mutez) nat) nat) nat
            : pair mutez (pair nat nat (pair (pair nat mutez) nat) nat) nat ] */ ;
         CAR
         /* [ mutez : pair mutez (pair nat nat (pair (pair nat mutez) nat) nat) nat ] */ ;
         SWAP
         /* [ pair mutez (pair nat nat (pair (pair nat mutez) nat) nat) nat : mutez ] */ ;
         CDR
         /* [ pair (pair nat nat (pair (pair nat mutez) nat) nat) nat : mutez ] */ ;
         SET_CADDAADR @toplevel_pair_name %value ;
         NIL operation
         /* [ list operation : pair (pair nat nat (pair (pair nat mutez) nat) nat) nat ] */ ;
         PAIR
         /* [ pair (list operation) (pair nat nat (pair (pair nat mutez) nat) nat) nat ] */ } }
Well typed (Gas remaining: 1039993.856 units remaining)	michelson_test_scripts/macros/take_my_money.tz
{ parameter key_hash ;
  storage unit ;
  code { CAR
         /* [ key_hash ] */ ;
         IMPLICIT_ACCOUNT
         /* [ contract unit ] */ ;
         DIP { UNIT /* [ unit ] */ }
         /* [ contract unit : unit ] */ ;
         PUSH mutez 1000000
         /* [ mutez : contract unit : unit ] */ ;
         UNIT
         /* [ unit : mutez : contract unit : unit ] */ ;
         TRANSFER_TOKENS
         /* [ operation : unit ] */ ;
         NIL operation
         /* [ list operation : operation : unit ] */ ;
         SWAP
         /* [ operation : list operation : unit ] */ ;
         CONS
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039977.177 units remaining)	michelson_test_scripts/macros/unpair_macro.tz
{ parameter (unit :param_unit) ;
  storage (unit :u1) ;
  code { DROP
         /* [] */ ;
         UNIT :u4 @a4
         /* [ unit ] */ ;
         UNIT :u3 @a3
         /* [ unit : unit ] */ ;
         UNIT :u2 @a2
         /* [ unit : unit : unit ] */ ;
         UNIT :u1 @a1
         /* [ unit : unit : unit : unit ] */ ;
         PAIR
         /* [ pair unit unit : unit : unit ] */ ;
         UNPAIR @x1 @x2
         /* [ unit : unit : unit : unit ] */ ;
         PPAIPAIR @p1 %x1 %x2 %x3 %x4 ;
         UNPPAIPAIR %x1 % %x3 %x4 @uno @due @tre @quattro ;
         PAPAPAIR @p2 %x1 %x2 %x3 %x4 ;
         UNPAPAPAIR @un @deux @trois @quatre ;
         PAPPAIIR @p3 %x1 %x2 %x3 %x4 ;
         UNPAPPAIIR @one @two @three @four ;
         DIP { DROP /* [ unit : unit ] */ ; DROP /* [ unit ] */ ; DROP /* [] */ }
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039563.035 units remaining)	michelson_test_scripts/mini_scenarios/999_constant.tz
{ parameter unit ;
  storage int ;
  code { DROP
         /* [] */ ;
         PUSH int
              (constant
                 "expruQN5r2umbZVHy6WynYM8f71F8zS4AERz9bugF8UkPBEqrHLuU8"
                 /* [ list operation : int ] */)
         /* [ int ] */ ;
         NIL operation /* [ pair (list operation) int ] */ ;
         PAIR } }
Well typed (Gas remaining: 1039988.898 units remaining)	michelson_test_scripts/mini_scenarios/add_clear_tickets_015.tz
{ parameter (or (pair %add nat string) (unit %clear)) ;
  storage (list (ticket string)) ;
  code { UNPAIR
         /* [ or (pair nat string) unit : list (ticket string) ] */ ;
         IF_LEFT
           { UNPAIR
             /* [ nat : string : list (ticket string) ] */ ;
             DIG 2
             /* [ list (ticket string) : nat : string ] */ ;
             SWAP
             /* [ nat : list (ticket string) : string ] */ ;
             DIG 2
             /* [ string : nat : list (ticket string) ] */ ;
             TICKET
             /* [ option (ticket string) : list (ticket string) ] */ ;
             ASSERT_SOME ;
             CONS
             /* [ list (ticket string) ] */ ;
             NIL operation
             /* [ list operation : list (ticket string) ] */ ;
             PAIR
             /* [ pair (list operation) (list (ticket string)) ] */ }
           { DROP 2
             /* [] */ ;
             NIL (ticket string)
             /* [ list (ticket string) ] */ ;
             NIL operation
             /* [ list operation : list (ticket string) ] */ ;
             PAIR
             /* [ pair (list operation) (list (ticket string)) ] */ } } }
Well typed (Gas remaining: 1039999.395 units remaining)	michelson_test_scripts/mini_scenarios/always_fails.tz
{ parameter string ; storage unit ; code FAILWITH /* [] */ }
Well typed (Gas remaining: 1039979.965 units remaining)	michelson_test_scripts/mini_scenarios/authentication.tz
{ parameter (pair (lambda unit (list operation)) signature) ;
  storage (pair (nat %counter) key) ;
  code { UNPPAIPAIR ;
         DUP 3
         /* [ nat : lambda unit (list operation) : signature : nat : key ] */ ;
         DUP 2
         /* [ lambda unit (list operation) : nat : lambda unit (list operation)
            : signature : nat : key ] */ ;
         SELF
         /* [ contract (pair (lambda unit (list operation)) signature)
            : lambda unit (list operation) : nat : lambda unit (list operation)
            : signature : nat : key ] */ ;
         CHAIN_ID
         /* [ chain_id : contract (pair (lambda unit (list operation)) signature)
            : lambda unit (list operation) : nat : lambda unit (list operation)
            : signature : nat : key ] */ ;
         PPAIPAIR ;
         PACK
         /* [ bytes : lambda unit (list operation) : signature : nat : key ] */ ;
         DIP { SWAP /* [ signature : lambda unit (list operation) : nat : key ] */ }
         /* [ bytes : signature : lambda unit (list operation) : nat : key ] */ ;
         DUP 5
         /* [ key : bytes : signature : lambda unit (list operation) : nat : key ] */ ;
         DIP { SWAP /* [ signature : bytes : lambda unit (list operation) : nat : key ] */ }
         /* [ key : signature : bytes : lambda unit (list operation) : nat : key ] */ ;
         DUP 3
         /* [ bytes : key : signature : bytes : lambda unit (list operation) : nat
            : key ] */ ;
         DIP { CHECK_SIGNATURE /* [ bool : lambda unit (list operation) : nat : key ] */ }
         /* [ bytes : bool : lambda unit (list operation) : nat : key ] */ ;
         SWAP
         /* [ bool : bytes : lambda unit (list operation) : nat : key ] */ ;
         IF { DROP /* [ lambda unit (list operation) : nat : key ] */ } { FAILWITH /* [] */ } ;
         UNIT
         /* [ unit : lambda unit (list operation) : nat : key ] */ ;
         EXEC
         /* [ list operation : nat : key ] */ ;
         DIP { PUSH nat 1 /* [ nat : nat : key ] */ ; ADD /* [ nat : key ] */ }
         /* [ list operation : nat : key ] */ ;
         PAPAIR } }
Well typed (Gas remaining: 1039996.366 units remaining)	michelson_test_scripts/mini_scenarios/big_map_all.tz
{ parameter (pair string (option nat)) ;
  storage (big_map string nat) ;
  code { UNPAIR
         /* [ pair string (option nat) : big_map string nat ] */ ;
         UNPAIR
         /* [ string : option nat : big_map string nat ] */ ;
         UPDATE
         /* [ big_map string nat ] */ ;
         NIL operation
         /* [ list operation : big_map string nat ] */ ;
         PAIR
         /* [ pair (list operation) (big_map string nat) ] */ } }
Well typed (Gas remaining: 1039955.119 units remaining)	michelson_test_scripts/mini_scenarios/big_map_entrypoints.tz
{ storage (pair (big_map string nat) (big_map string nat)) ;
  parameter
    (or (unit %default
        /* [ list operation : big_map string nat ] */)
        (or (or %mem
               (string %mem_left)
               (string %mem_right)
            /* [ pair (list operation) (big_map string nat) ] */)
            (or (or %add (pair %add_left string nat) (pair %add_right string nat))
                (or %rem (string %rem_left) (string %rem_right))))
    /* [ big_map string nat ] */)
  /* [ string : big_map string nat ] */ ;
  code { UNPAIR
         /* [ or unit
               (or (or string string) (or (or (pair string nat) (pair string nat)) (or string string)))
            : pair (big_map string nat) (big_map string nat) ] */ ;
         IF_LEFT
           { DROP
             /* [ pair (big_map string nat) (big_map string nat) ] */ ;
             DUP
             /* [ pair (big_map string nat) (big_map string nat)
                : pair (big_map string nat) (big_map string nat) ] */ ;
             CAR
             /* [ big_map string nat : pair (big_map string nat) (big_map string nat) ] */ ;
             PUSH mutez
                  0
             /* [ mutez : big_map string nat
                : pair (big_map string nat) (big_map string nat) ] */ ;
             NONE key_hash
             /* [ option key_hash : mutez : big_map string nat
                : pair (big_map string nat) (big_map string nat) ] */ ;
             CREATE_CONTRACT
               { parameter string ;
                 storage (big_map string nat) ;
                 code { UNPAIR ; DROP ; NIL operation ; PAIR } }
             /* [ operation : address : pair (big_map string nat) (big_map string nat) ] */ ;
             DIP { DROP /* [ pair (big_map string nat) (big_map string nat) ] */ }
             /* [ operation : pair (big_map string nat) (big_map string nat) ] */ ;
             NIL operation
             /* [ list operation : operation
                : pair (big_map string nat) (big_map string nat) ] */ ;
             SWAP
             /* [ operation : list operation
                : pair (big_map string nat) (big_map string nat) ] */ ;
             CONS
             /* [ list operation : pair (big_map string nat) (big_map string nat) ] */ ;
             PAIR
             /* [ pair (list operation) (big_map string nat) (big_map string nat) ] */ }
           { IF_LEFT
               { IF_LEFT
                   { DIP { UNPAIR /* [ big_map string nat : big_map string nat ] */ }
                     /* [ string : big_map string nat : big_map string nat ] */ ;
                     DIP { DUP /* [ big_map string nat : big_map string nat : big_map string nat ] */ }
                     /* [ string : big_map string nat : big_map string nat : big_map string nat ] */ ;
                     MEM
                     /* [ bool : big_map string nat : big_map string nat ] */ ;
                     ASSERT }
                   { DIP { UNPAIR
                           /* [ big_map string nat : big_map string nat ] */ ;
                           SWAP
                           /* [ big_map string nat : big_map string nat ] */ }
                     /* [ string : big_map string nat : big_map string nat ] */ ;
                     DIP { DUP /* [ big_map string nat : big_map string nat : big_map string nat ] */ }
                     /* [ string : big_map string nat : big_map string nat : big_map string nat ] */ ;
                     MEM
                     /* [ bool : big_map string nat : big_map string nat ] */ ;
                     ASSERT ;
                     SWAP
                     /* [ big_map string nat : big_map string nat ] */ } }
               { IF_LEFT
                   { IF_LEFT
                       { UNPAIR
                         /* [ string : nat : pair (big_map string nat) (big_map string nat) ] */ ;
                         DIP 2
                             { UNPAIR /* [ big_map string nat : big_map string nat ] */ }
                         /* [ string : nat : big_map string nat : big_map string nat ] */ ;
                         DIP { SOME /* [ option nat : big_map string nat : big_map string nat ] */ }
                         /* [ string : option nat : big_map string nat : big_map string nat ] */ ;
                         UPDATE
                         /* [ big_map string nat : big_map string nat ] */ }
                       { UNPAIR
                         /* [ string : nat : pair (big_map string nat) (big_map string nat) ] */ ;
                         DIP 2
                             { UNPAIR
                               /* [ big_map string nat : big_map string nat ] */ ;
                               SWAP
                               /* [ big_map string nat : big_map string nat ] */ }
                         /* [ string : nat : big_map string nat : big_map string nat ] */ ;
                         DIP { SOME /* [ option nat : big_map string nat : big_map string nat ] */ }
                         /* [ string : option nat : big_map string nat : big_map string nat ] */ ;
                         UPDATE
                         /* [ big_map string nat : big_map string nat ] */ ;
                         SWAP
                         /* [ big_map string nat : big_map string nat ] */ } }
                   { IF_LEFT
                       { DIP { UNPAIR /* [ big_map string nat : big_map string nat ] */ }
                         /* [ string : big_map string nat : big_map string nat ] */ ;
                         DIP { NONE nat /* [ option nat : big_map string nat : big_map string nat ] */ }
                         /* [ string : option nat : big_map string nat : big_map string nat ] */ ;
                         UPDATE
                         /* [ big_map string nat : big_map string nat ] */ }
                       { DIP { UNPAIR
                               /* [ big_map string nat : big_map string nat ] */ ;
                               SWAP
                               /* [ big_map string nat : big_map string nat ] */ }
                         /* [ string : big_map string nat : big_map string nat ] */ ;
                         DIP { NONE nat /* [ option nat : big_map string nat : big_map string nat ] */ }
                         /* [ string : option nat : big_map string nat : big_map string nat ] */ ;
                         UPDATE
                         /* [ big_map string nat : big_map string nat ] */ ;
                         SWAP
                         /* [ big_map string nat : big_map string nat ] */ } } } ;
             PAIR
             /* [ pair (big_map string nat) (big_map string nat) ] */ ;
             NIL operation
             /* [ list operation : pair (big_map string nat) (big_map string nat) ] */ ;
             PAIR
             /* [ pair (list operation) (big_map string nat) (big_map string nat) ] */ } } }
Well typed (Gas remaining: 1039956.880 units remaining)	michelson_test_scripts/mini_scenarios/big_map_magic.tz
{ storage (or (pair (big_map string string) (big_map string string)) unit) ;
  parameter
    (or (unit %swap)
        (or (or %reset (pair (big_map string string) (big_map string string)) unit)
            (or (pair %import (list (pair string string)) (list (pair string string)))
                (or (list %add (pair string string)) (list %rem string))))) ;
  code { UNPAIR
         /* [ or unit
               (or (or (pair (big_map string string) (big_map string string)) unit)
                   (or (pair (list (pair string string)) (list (pair string string)))
                       (or (list (pair string string)) (list string))))
            : or (pair (big_map string string) (big_map string string)) unit ] */ ;
         IF_LEFT
           { DROP
             /* [ or (pair (big_map string string) (big_map string string)) unit ] */ ;
             ASSERT_LEFT ;
             UNPAIR
             /* [ big_map string string : big_map string string ] */ ;
             SWAP
             /* [ big_map string string : big_map string string ] */ ;
             PAIR
             /* [ pair (big_map string string) (big_map string string) ] */ ;
             LEFT unit
             /* [ or (pair (big_map string string) (big_map string string)) unit ] */ }
           { IF_LEFT
               { SWAP
                 /* [ or (pair (big_map string string) (big_map string string)) unit
                    : or (pair (big_map string string) (big_map string string)) unit ] */ ;
                 DROP
                 /* [ or (pair (big_map string string) (big_map string string)) unit ] */ }
               { IF_LEFT
                   { DIP { ASSERT_RIGHT ; DROP /* [] */ }
                     /* [ pair (list (pair string string)) (list (pair string string)) ] */ ;
                     UNPAIR
                     /* [ list (pair string string) : list (pair string string) ] */ ;
                     DIP { EMPTY_BIG_MAP
                             string
                             string
                           /* [ big_map string string : list (pair string string) ] */ }
                     /* [ list (pair string string) : big_map string string
                        : list (pair string string) ] */ ;
                     ITER { UNPAIR
                            /* [ string : string : big_map string string : list (pair string string) ] */ ;
                            DIP { SOME
                                  /* [ option string : big_map string string : list (pair string string) ] */ }
                            /* [ string : option string : big_map string string
                               : list (pair string string) ] */ ;
                            UPDATE
                            /* [ big_map string string : list (pair string string) ] */ }
                     /* [ big_map string string : list (pair string string) ] */ ;
                     SWAP
                     /* [ list (pair string string) : big_map string string ] */ ;
                     DIP { EMPTY_BIG_MAP string string
                           /* [ big_map string string : big_map string string ] */ }
                     /* [ list (pair string string) : big_map string string : big_map string string ] */ ;
                     ITER { UNPAIR
                            /* [ string : string : big_map string string : big_map string string ] */ ;
                            DIP { SOME /* [ option string : big_map string string : big_map string string ] */ }
                            /* [ string : option string : big_map string string : big_map string string ] */ ;
                            UPDATE
                            /* [ big_map string string : big_map string string ] */ }
                     /* [ big_map string string : big_map string string ] */ ;
                     SWAP
                     /* [ big_map string string : big_map string string ] */ ;
                     PAIR
                     /* [ pair (big_map string string) (big_map string string) ] */ ;
                     LEFT unit
                     /* [ or (pair (big_map string string) (big_map string string)) unit ] */ }
                   { IF_LEFT
                       { DIP { ASSERT_LEFT ; UNPAIR /* [ big_map string string : big_map string string ] */ }
                         /* [ list (pair string string) : big_map string string : big_map string string ] */ ;
                         ITER { UNPAIR
                                /* [ string : string : big_map string string : big_map string string ] */ ;
                                DIP { SOME /* [ option string : big_map string string : big_map string string ] */ }
                                /* [ string : option string : big_map string string : big_map string string ] */ ;
                                UPDATE
                                /* [ big_map string string : big_map string string ] */ }
                         /* [ big_map string string : big_map string string ] */ ;
                         PAIR
                         /* [ pair (big_map string string) (big_map string string) ] */ ;
                         LEFT unit
                         /* [ or (pair (big_map string string) (big_map string string)) unit ] */ }
                       { DIP { ASSERT_LEFT ; UNPAIR /* [ big_map string string : big_map string string ] */ }
                         /* [ list string : big_map string string : big_map string string ] */ ;
                         ITER { DIP { NONE string
                                      /* [ option string : big_map string string : big_map string string ] */ }
                                /* [ string : option string : big_map string string : big_map string string ] */ ;
                                UPDATE
                                /* [ big_map string string : big_map string string ] */ }
                         /* [ big_map string string : big_map string string ] */ ;
                         PAIR
                         /* [ pair (big_map string string) (big_map string string) ] */ ;
                         LEFT unit
                         /* [ or (pair (big_map string string) (big_map string string)) unit ] */ } } } } ;
         NIL operation
         /* [ list operation
            : or (pair (big_map string string) (big_map string string)) unit ] */ ;
         PAIR
         /* [ pair (list operation) (or (pair (big_map string string) (big_map string string)) unit) ] */ } }
Well typed (Gas remaining: 1039994.336 units remaining)	michelson_test_scripts/mini_scenarios/big_map_read.tz
{ storage nat ;
  parameter (big_map nat nat) ;
  code { CAR
         /* [ big_map nat nat ] */ ;
         PUSH nat 1
         /* [ nat : big_map nat nat ] */ ;
         GET
         /* [ option nat ] */ ;
         ASSERT_SOME ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039997.037 units remaining)	michelson_test_scripts/mini_scenarios/big_map_store.tz
{ storage (big_map nat nat) ;
  parameter unit ;
  code { DROP
         /* [] */ ;
         EMPTY_BIG_MAP nat nat
         /* [ big_map nat nat ] */ ;
         NIL operation
         /* [ list operation : big_map nat nat ] */ ;
         PAIR
         /* [ pair (list operation) (big_map nat nat) ] */ } }
Well typed (Gas remaining: 1039995.088 units remaining)	michelson_test_scripts/mini_scenarios/big_map_write.tz
{ storage unit ;
  parameter (big_map nat nat) ;
  code { UNPAIR
         /* [ big_map nat nat : unit ] */ ;
         PUSH (option nat) (Some 1)
         /* [ option nat : big_map nat nat : unit ] */ ;
         PUSH nat 1
         /* [ nat : option nat : big_map nat nat : unit ] */ ;
         UPDATE
         /* [ big_map nat nat : unit ] */ ;
         DROP
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039995.168 units remaining)	michelson_test_scripts/mini_scenarios/cache_consistency.tz
{ parameter (or (unit %renew) (unit %keep)) ;
  storage (big_map (nat :a) string) ;
  code { UNPAIR
         /* [ or unit unit : big_map nat string ] */ ;
         IF_LEFT
           { DROP 2 /* [] */ ; EMPTY_BIG_MAP nat string /* [ big_map nat string ] */ }
           { DROP /* [ big_map nat string ] */ } ;
         NIL operation
         /* [ list operation : big_map nat string ] */ ;
         PAIR
         /* [ pair (list operation) (big_map nat string) ] */ } }
Well typed (Gas remaining: 1039986.487 units remaining)	michelson_test_scripts/mini_scenarios/check_signature.tz
{ parameter (pair key signature bytes) ;
  storage unit ;
  code { CAR
         /* [ pair key signature bytes ] */ ;
         UNPAIR
         /* [ key : pair signature bytes ] */ ;
         SWAP
         /* [ pair signature bytes : key ] */ ;
         UNPAIR
         /* [ signature : bytes : key ] */ ;
         DUP 3
         /* [ key : signature : bytes : key ] */ ;
         HASH_KEY
         /* [ key_hash : signature : bytes : key ] */ ;
         IMPLICIT_ACCOUNT
         /* [ contract unit : signature : bytes : key ] */ ;
         SENDER
         /* [ address : contract unit : signature : bytes : key ] */ ;
         SWAP
         /* [ contract unit : address : signature : bytes : key ] */ ;
         ADDRESS
         /* [ address : address : signature : bytes : key ] */ ;
         COMPARE
         /* [ int : signature : bytes : key ] */ ;
         EQ
         /* [ bool : signature : bytes : key ] */ ;
         IF { /* [ signature : bytes : key ] */ }
            { PUSH string "invalid signer"
              /* [ string : signature : bytes : key ] */ ;
              FAILWITH
              /* [] */ } ;
         DIG 2
         /* [ key : signature : bytes ] */ ;
         CHECK_SIGNATURE
         /* [ bool ] */ ;
         IF { UNIT /* [ unit ] */ }
            { PUSH string "invalid signature" /* [ string ] */ ; FAILWITH /* [] */ } ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039546.789 units remaining)	michelson_test_scripts/mini_scenarios/constant_entrypoints.tz
{ parameter
    (or (lambda %do
           (constant "exprvKFFbc7SnPjkPZgyhaHewQhmrouNjNae3DpsQ8KuADn9i2WuJ8")
           (list operation))
        (unit %default)) ;
  storage key_hash ;
  code { { { /* [ pair (or (lambda unit (list operation)) unit) key_hash ] */
             DUP
             /* [ or (lambda unit (list operation)) unit
                : pair (or (lambda unit (list operation)) unit) key_hash ] */ ;
             CAR
             /* [ or (lambda unit (list operation)) unit : key_hash ] */ ;
             DIP { /* [ pair (or (lambda unit (list operation)) unit) key_hash ] */ CDR } } } ;
         IF_LEFT
           { /* [ lambda unit (list operation) : key_hash ] */
             PUSH mutez 0 /* [ mutez : mutez : lambda unit (list operation) : key_hash ] */ ;
             AMOUNT ;
             { { /* [ mutez : mutez : lambda unit (list operation) : key_hash ] */
                 COMPARE
                 /* [ bool : lambda unit (list operation) : key_hash ] */ ;
                 EQ } ;
               IF {}
                  { { /* [ lambda unit (list operation) : key_hash ] */ UNIT /* [] */ ; FAILWITH } }
               /* [ lambda unit (list operation) : key_hash ] */ } ;
             { /* [ lambda unit (list operation) : key_hash ] */
               DIP { /* [ key_hash ] */ DUP /* [ key_hash : lambda unit (list operation) : key_hash ] */ } ;
               SWAP
               /* [ contract unit : lambda unit (list operation) : key_hash ] */ } ;
             IMPLICIT_ACCOUNT
             /* [ address : lambda unit (list operation) : key_hash ] */ ;
             ADDRESS
             /* [ address : address : lambda unit (list operation) : key_hash ] */ ;
             SENDER ;
             { { /* [ address : address : lambda unit (list operation) : key_hash ] */
                 COMPARE
                 /* [ bool : lambda unit (list operation) : key_hash ] */ ;
                 EQ } ;
               IF {}
                  { { /* [ lambda unit (list operation) : key_hash ] */
                      UNIT
                      /* [] */ ;
                      FAILWITH
                      /* [ unit : lambda unit (list operation) : key_hash ] */ } }
               /* [ lambda unit (list operation) : key_hash ] */ } ;
             UNIT
             /* [ list operation : key_hash ] */ ;
             EXEC
             /* [ pair (list operation) key_hash ] */ ;
             PAIR }
           { /* [ unit : key_hash ] */
             DROP
             /* [ list operation : key_hash ] */ ;
             NIL operation /* [ pair (list operation) key_hash ] */ ;
             PAIR } } }
Well typed (Gas remaining: 1039124.558 units remaining)	michelson_test_scripts/mini_scenarios/constant_unit.tz
{ parameter (constant "exprvKFFbc7SnPjkPZgyhaHewQhmrouNjNae3DpsQ8KuADn9i2WuJ8") ;
  storage (constant "exprvKFFbc7SnPjkPZgyhaHewQhmrouNjNae3DpsQ8KuADn9i2WuJ8") ;
  code { /* [] */
         DROP ;
         PUSH unit
              /* [ list operation : unit ] */
              (constant
                 "expruJpGVgueH6vjZDZQRjgXUuHBi4Y6UQ3cbz6swP2FMVybvnDjm5"
                 /* [ pair (list operation) unit ] */) ;
         NIL operation ;
         PAIR }
  /* [] */ }
Well typed (Gas remaining: 1039973.796 units remaining)	michelson_test_scripts/mini_scenarios/create_contract.tz
{ parameter (option address) ;
  storage unit ;
  code { /* [ pair string string ] */
         CAR
         /* [ list operation : string ] */ ;
         IF_NONE
           { /* [ list operation : string ] */
             PUSH string "dummy"
             /* [ string ] */ ;
             PUSH mutez 100000000
             /* [ mutez : string ] */ ;
             NONE key_hash
             /* [ option key_hash : mutez : string ] */ ;
             CREATE_CONTRACT
               { parameter string ;
                 storage string ;
                 code { CAR ; NIL operation ; PAIR } }
             /* [ operation : address ] */ ;
             DIP { SOME
                   /* [ option address ] */ ;
                   DIP { SELF
                         /* [ contract (option address) ] */ ;
                         PUSH mutez 0
                         /* [ mutez : contract (option address) ] */ }
                   /* [ option address : mutez : contract (option address) ] */ ;
                   TRANSFER_TOKENS
                   /* [ operation ] */ ;
                   NIL operation
                   /* [ list operation : operation ] */ ;
                   SWAP
                   /* [ operation : list operation ] */ ;
                   CONS
                   /* [ list operation ] */ }
             /* [ operation : list operation ] */ ;
             CONS
             /* [ list operation ] */ ;
             UNIT
             /* [ unit : list operation ] */ ;
             SWAP
             /* [ list operation : unit ] */ ;
             PAIR
             /* [ pair (list operation) unit ] */ }
           { SELF
             /* [ contract (option address) : address ] */ ;
             ADDRESS
             /* [ address : address ] */ ;
             SENDER
             /* [ address : address : address ] */ ;
             IFCMPNEQ { FAIL } { /* [ address ] */ } ;
             CONTRACT string
             /* [ option (contract string) ] */ ;
             IF_SOME { /* [ contract string ] */ } { FAIL } ;
             PUSH mutez 0
             /* [ mutez : contract string ] */ ;
             PUSH string "abcdefg"
             /* [ string : mutez : contract string ] */ ;
             TRANSFER_TOKENS
             /* [ operation ] */ ;
             NIL operation
             /* [ list operation : operation ] */ ;
             SWAP
             /* [ operation : list operation ] */ ;
             CONS
             /* [ list operation ] */ ;
             UNIT
             /* [ unit : list operation ] */ ;
             SWAP
             /* [ list operation : unit ] */ ;
             PAIR
             /* [ pair (list operation) unit ] */ } } }
Well typed (Gas remaining: 1039992.212 units remaining)	michelson_test_scripts/mini_scenarios/create_contract_simple.tz
{ parameter unit ;
  storage unit ;
  code { CAR
         /* [ string ] */ ;
         PUSH string "foo" /* [ pair (list operation) string ] */
         /* [ list operation : string ] */ ;
         PUSH mutez 0
         /* [ mutez : string : unit ] */ ;
         NONE key_hash
         /* [ option key_hash : mutez : string : unit ] */ ;
         CREATE_CONTRACT
           { parameter string ;
             storage string ;
             code { CAR ; NIL operation ; PAIR } }
         /* [ operation : address : unit ] */ ;
         DROP
         /* [ address : unit ] */ ;
         DROP
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039993.856 units remaining)	michelson_test_scripts/mini_scenarios/default_account.tz
{ parameter key_hash ;
  storage unit ;
  code { DIP { UNIT /* [ unit ] */ }
         /* [ pair key_hash unit : unit ] */ ;
         CAR
         /* [ key_hash : unit ] */ ;
         IMPLICIT_ACCOUNT
         /* [ contract unit : unit ] */ ;
         PUSH mutez 100000000
         /* [ mutez : contract unit : unit ] */ ;
         UNIT
         /* [ unit : mutez : contract unit : unit ] */ ;
         TRANSFER_TOKENS
         /* [ operation : unit ] */ ;
         NIL operation
         /* [ list operation : operation : unit ] */ ;
         SWAP
         /* [ operation : list operation : unit ] */ ;
         CONS
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.141 units remaining)	michelson_test_scripts/mini_scenarios/emit_events.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         PUSH string "right"
         /* [ string : unit ] */ ;
         RIGHT nat
         /* [ or nat string : unit ] */ ;
         EMIT %tag1
         /* [ operation : unit ] */ ;
         PUSH nat 2
         /* [ nat : operation : unit ] */ ;
         LEFT string
         /* [ or nat string : operation : unit ] */ ;
         EMIT %tag2 (or (nat %int) (string %str))
         /* [ operation : operation : unit ] */ ;
         NIL operation
         /* [ list operation : operation : operation : unit ] */ ;
         SWAP
         /* [ operation : list operation : operation : unit ] */ ;
         CONS
         /* [ list operation : operation : unit ] */ ;
         SWAP
         /* [ operation : list operation : unit ] */ ;
         CONS
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039990.815 units remaining)	michelson_test_scripts/mini_scenarios/execution_order_appender.tz
{ parameter unit ;
  storage (pair address string) ;
  code { CDR
         /* [ pair address string ] */ ;
         DUP
         /* [ pair address string : pair address string ] */ ;
         UNPAIR
         /* [ address : string : pair address string ] */ ;
         CONTRACT string
         /* [ option (contract string) : string : pair address string ] */ ;
         ASSERT_SOME ;
         PUSH mutez 0
         /* [ mutez : contract string : string : pair address string ] */ ;
         DIG 2
         /* [ string : mutez : contract string : pair address string ] */ ;
         TRANSFER_TOKENS
         /* [ operation : pair address string ] */ ;
         NIL operation
         /* [ list operation : operation : pair address string ] */ ;
         SWAP
         /* [ operation : list operation : pair address string ] */ ;
         CONS
         /* [ list operation : pair address string ] */ ;
         PAIR
         /* [ pair (list operation) address string ] */ } }
Well typed (Gas remaining: 1039992.750 units remaining)	michelson_test_scripts/mini_scenarios/execution_order_caller.tz
{ parameter unit ;
  storage (list address) ;
  code { CDR
         /* [ list address ] */ ;
         DUP
         /* [ list address : list address ] */ ;
         MAP { CONTRACT unit
               /* [ option (contract unit) : list address ] */ ;
               ASSERT_SOME ;
               PUSH mutez 0
               /* [ mutez : contract unit : list address ] */ ;
               UNIT
               /* [ unit : mutez : contract unit : list address ] */ ;
               TRANSFER_TOKENS
               /* [ operation : list address ] */ }
         /* [ list operation : list address ] */ ;
         PAIR
         /* [ pair (list operation) (list address) ] */ } }
Well typed (Gas remaining: 1039997.089 units remaining)	michelson_test_scripts/mini_scenarios/execution_order_storer.tz
{ parameter string ;
  storage string ;
  code { UNPAIR
         /* [ string : string ] */ ;
         SWAP
         /* [ string : string ] */ ;
         CONCAT
         /* [ string ] */ ;
         NIL operation
         /* [ list operation : string ] */ ;
         PAIR
         /* [ pair (list operation) string ] */ } }
Well typed (Gas remaining: 1039371.088 units remaining)	michelson_test_scripts/mini_scenarios/fa12_reference.tz
{ parameter
    (or (or (or (pair %transfer (address :from) (pair (address :to) (nat :value)))
                (pair %approve (address :spender) (nat :value)))
            (or (pair %getAllowance (pair (address :owner) (address :spender)) (contract nat))
                (or (pair %getBalance (address :owner) (contract nat))
                    (pair %getTotalSupply unit (contract nat)))))
        (or (or (bool %setPause) (address %setAdministrator))
            (or (pair %getAdministrator unit (contract address))
                (or (pair %mint (address :to) (nat :value)) (pair %burn (address :from) (nat :value)))))) ;
  storage
    (pair (big_map %ledger
             (address :user)
             (pair (nat :balance) (map :approvals (address :spender) (nat :value))))
          (pair (address %admin) (pair (bool %paused) (nat %totalSupply)))) ;
  code { CAST (pair (or (or (or (pair address (pair address nat)) (pair address nat))
                            (or (pair (pair address address) (contract nat))
                                (or (pair address (contract nat)) (pair unit (contract nat)))))
                        (or (or bool address)
                            (or (pair unit (contract address)) (or (pair address nat) (pair address nat)))))
                    (pair (big_map address (pair nat (map address nat))) (pair address (pair bool nat))))
         /* [ pair (or (or (or (pair address address nat) (pair address nat))
                         (or (pair (pair address address) (contract nat))
                             (or (pair address (contract nat)) (pair unit (contract nat)))))
                     (or (or bool address)
                         (or (pair unit (contract address)) (or (pair address nat) (pair address nat)))))
                 (big_map address (pair nat (map address nat)))
                 address
                 bool
                 nat ] */ ;
         DUP
         /* [ pair (or (or (or (pair address address nat) (pair address nat))
                         (or (pair (pair address address) (contract nat))
                             (or (pair address (contract nat)) (pair unit (contract nat)))))
                     (or (or bool address)
                         (or (pair unit (contract address)) (or (pair address nat) (pair address nat)))))
                 (big_map address (pair nat (map address nat)))
                 address
                 bool
                 nat
            : pair (or (or (or (pair address address nat) (pair address nat))
                         (or (pair (pair address address) (contract nat))
                             (or (pair address (contract nat)) (pair unit (contract nat)))))
                     (or (or bool address)
                         (or (pair unit (contract address)) (or (pair address nat) (pair address nat)))))
                 (big_map address (pair nat (map address nat)))
                 address
                 bool
                 nat ] */ ;
         CAR
         /* [ or (or (or (pair address address nat) (pair address nat))
                   (or (pair (pair address address) (contract nat))
                       (or (pair address (contract nat)) (pair unit (contract nat)))))
               (or (or bool address)
                   (or (pair unit (contract address)) (or (pair address nat) (pair address nat))))
            : pair (or (or (or (pair address address nat) (pair address nat))
                         (or (pair (pair address address) (contract nat))
                             (or (pair address (contract nat)) (pair unit (contract nat)))))
                     (or (or bool address)
                         (or (pair unit (contract address)) (or (pair address nat) (pair address nat)))))
                 (big_map address (pair nat (map address nat)))
                 address
                 bool
                 nat ] */ ;
         DIP { CDR
               /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
         /* [ or (or (or (pair address address nat) (pair address nat))
                   (or (pair (pair address address) (contract nat))
                       (or (pair address (contract nat)) (pair unit (contract nat)))))
               (or (or bool address)
                   (or (pair unit (contract address)) (or (pair address nat) (pair address nat))))
            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { DIP { DUP
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CDR
                           /* [ pair address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CDR
                           /* [ pair bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CAR
                           /* [ bool
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           IF { UNIT
                                /* [ unit
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                PUSH string
                                     "TokenOperationsArePaused"
                                /* [ string : unit
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                PAIR
                                /* [ pair string unit
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                FAILWITH
                                /* [] */ }
                              { /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ } }
                     /* [ pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DUP
                     /* [ pair address address nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DUP
                     /* [ pair address address nat : pair address address nat
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CDR
                     /* [ pair address nat : pair address address nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CAR
                     /* [ address : pair address address nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { CAR
                           /* [ address : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ address : address : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     COMPARE
                     /* [ int : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     EQ
                     /* [ bool : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     IF { DROP
                          /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                        { DUP
                          /* [ pair address address nat : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          CAR
                          /* [ address : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          SENDER
                          /* [ address : address : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          COMPARE
                          /* [ int : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          EQ
                          /* [ bool : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          IF { /* [ pair address address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                             { DUP
                               /* [ pair address address nat : pair address address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DUP
                                     /* [ pair address address nat : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { DIP { DUP
                                                 /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                           /* [ pair address address nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           CAR
                                           /* [ address
                                              : pair (big_map address (pair nat (map address nat))) address bool nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           SENDER
                                           /* [ address : address
                                              : pair (big_map address (pair nat (map address nat))) address bool nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           PAIR
                                           /* [ pair address address
                                              : pair (big_map address (pair nat (map address nat))) address bool nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           DUP
                                           /* [ pair address address : pair address address
                                              : pair (big_map address (pair nat (map address nat))) address bool nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           DIP { CDR
                                                 /* [ address
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                 DIP { CAR
                                                       /* [ big_map address (pair nat (map address nat))
                                                          : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                                 /* [ address : big_map address (pair nat (map address nat))
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                 GET
                                                 /* [ option (pair nat (map address nat))
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                 IF_NONE
                                                   { EMPTY_MAP
                                                       address
                                                       nat
                                                     /* [ map address nat
                                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                                   { CDR
                                                     /* [ map address nat
                                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } }
                                           /* [ pair address address : map address nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           CAR
                                           /* [ address : map address nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           GET
                                           /* [ option nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           IF_NONE
                                             { PUSH nat
                                                    0
                                               /* [ nat
                                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                             { /* [ nat
                                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } }
                                     /* [ pair address address nat : nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DUP
                                     /* [ pair address address nat : pair address address nat : nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CAR
                                     /* [ address : pair address address nat : nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { SENDER
                                           /* [ address : pair address address nat : nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           DIP { DUP
                                                 /* [ pair address address nat : pair address address nat : nat
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                 CDR
                                                 /* [ pair address nat : pair address address nat : nat
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                 CDR
                                                 /* [ nat : pair address address nat : nat
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                 DIP { DIP { DUP
                                                             /* [ nat : nat
                                                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                                       /* [ pair address address nat : nat : nat
                                                          : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                       SWAP
                                                       /* [ nat : pair address address nat : nat
                                                          : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                                 /* [ nat : nat : pair address address nat : nat
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                 SWAP
                                                 /* [ nat : nat : pair address address nat : nat
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                 SUB
                                                 /* [ int : pair address address nat : nat
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                 ISNAT
                                                 /* [ option nat : pair address address nat : nat
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                 IF_NONE
                                                   { DIP { DUP
                                                           /* [ nat : nat
                                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                                     /* [ pair address address nat : nat : nat
                                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                     SWAP
                                                     /* [ nat : pair address address nat : nat
                                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                     DIP { DUP
                                                           /* [ pair address address nat : pair address address nat : nat
                                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                                     /* [ nat : pair address address nat : pair address address nat : nat
                                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                     SWAP
                                                     /* [ pair address address nat : nat : pair address address nat : nat
                                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                     CDR
                                                     /* [ pair address nat : nat : pair address address nat : nat
                                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                     CDR
                                                     /* [ nat : nat : pair address address nat : nat
                                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                     PAIR
                                                     /* [ pair nat nat : pair address address nat : nat
                                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                     PUSH string
                                                          "NotEnoughAllowance"
                                                     /* [ string : pair nat nat : pair address address nat : nat
                                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                     PAIR
                                                     /* [ pair string nat nat : pair address address nat : nat
                                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                     FAILWITH
                                                     /* [] */ }
                                                   { /* [ nat : pair address address nat : nat
                                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } }
                                           /* [ address : nat : pair address address nat : nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           PAIR
                                           /* [ pair address nat : pair address address nat : nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ address : pair address nat : pair address address nat : nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     PAIR
                                     /* [ pair address address nat : pair address address nat : nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { DROP
                                           /* [ nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           DROP
                                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { DUP
                                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     SWAP
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { DUP
                                           /* [ pair address address nat : pair address address nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           CAR
                                           /* [ address : pair address address nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : address : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     SWAP
                                     /* [ address
                                        : pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { CAR
                                           /* [ big_map address (pair nat (map address nat)) : pair address address nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ address : big_map address (pair nat (map address nat))
                                        : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     GET
                                     /* [ option (pair nat (map address nat)) : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     IF_NONE
                                       { PUSH nat
                                              0
                                         /* [ nat : pair address address nat
                                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                         DIP { EMPTY_MAP
                                                 address
                                                 nat
                                               /* [ map address nat : pair address address nat
                                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                         /* [ nat : map address nat : pair address address nat
                                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                         PAIR
                                         /* [ pair nat (map address nat) : pair address address nat
                                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                         EMPTY_MAP
                                           address
                                           nat
                                         /* [ map address nat : pair nat (map address nat) : pair address address nat
                                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                       { DUP
                                         /* [ pair nat (map address nat) : pair nat (map address nat)
                                            : pair address address nat
                                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                         CDR
                                         /* [ map address nat : pair nat (map address nat) : pair address address nat
                                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                                     DIP { DIP { DUP
                                                 /* [ pair address address nat : pair address address nat
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                           /* [ pair nat (map address nat) : pair address address nat
                                              : pair address address nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           SWAP
                                           /* [ pair address address nat : pair nat (map address nat)
                                              : pair address address nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ map address nat : pair address address nat : pair nat (map address nat)
                                        : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     SWAP
                                     /* [ pair address address nat : map address nat : pair nat (map address nat)
                                        : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ pair address nat : map address nat : pair nat (map address nat)
                                        : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ nat : map address nat : pair nat (map address nat)
                                        : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DUP
                                     /* [ nat : nat : map address nat : pair nat (map address nat)
                                        : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     INT
                                     /* [ int : nat : map address nat : pair nat (map address nat)
                                        : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     EQ
                                     /* [ bool : nat : map address nat : pair nat (map address nat)
                                        : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     IF { DROP
                                          /* [ map address nat : pair nat (map address nat) : pair address address nat
                                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                          NONE nat
                                          /* [ option nat : map address nat : pair nat (map address nat)
                                             : pair address address nat
                                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                        { SOME
                                          /* [ option nat : map address nat : pair nat (map address nat)
                                             : pair address address nat
                                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                                     DIP { DIP { DIP { DUP
                                                       /* [ pair address address nat : pair address address nat
                                                          : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                                 /* [ pair nat (map address nat) : pair address address nat
                                                    : pair address address nat
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                 SWAP
                                                 /* [ pair address address nat : pair nat (map address nat)
                                                    : pair address address nat
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                           /* [ map address nat : pair address address nat : pair nat (map address nat)
                                              : pair address address nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           SWAP
                                           /* [ pair address address nat : map address nat : pair nat (map address nat)
                                              : pair address address nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ option nat : pair address address nat : map address nat
                                        : pair nat (map address nat) : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     SWAP
                                     /* [ pair address address nat : option nat : map address nat
                                        : pair nat (map address nat) : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ pair address nat : option nat : map address nat
                                        : pair nat (map address nat) : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CAR
                                     /* [ address : option nat : map address nat : pair nat (map address nat)
                                        : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     UPDATE
                                     /* [ map address nat : pair nat (map address nat) : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { DUP
                                           /* [ pair nat (map address nat) : pair nat (map address nat)
                                              : pair address address nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           DIP { CAR
                                                 /* [ nat : pair address address nat
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                           /* [ pair nat (map address nat) : nat : pair address address nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           CDR
                                           /* [ map address nat : nat : pair address address nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ map address nat : map address nat : nat : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { DROP
                                           /* [ nat : pair address address nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ map address nat : nat : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     SWAP
                                     /* [ nat : map address nat : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     PAIR
                                     /* [ pair nat (map address nat) : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     SWAP
                                     /* [ pair address address nat : pair nat (map address nat)
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CAR
                                     /* [ address : pair nat (map address nat)
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { SOME
                                           /* [ option (pair nat (map address nat))
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ address : option (pair nat (map address nat))
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { DIP { DUP
                                                 /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                                 CAR
                                                 /* [ big_map address (pair nat (map address nat))
                                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                           /* [ option (pair nat (map address nat))
                                              : big_map address (pair nat (map address nat))
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ address : option (pair nat (map address nat))
                                        : big_map address (pair nat (map address nat))
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     UPDATE
                                     /* [ big_map address (pair nat (map address nat))
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { DUP
                                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           DIP { CDR /* [ pair address bool nat ] */ }
                                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                              : pair address bool nat ] */ ;
                                           CAR
                                           /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ }
                                     /* [ big_map address (pair nat (map address nat))
                                        : big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                                     DIP { DROP /* [ pair address bool nat ] */ }
                                     /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                                     PAIR
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ pair address address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                          DIP { DUP
                                /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          SWAP
                          /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DIP { DUP
                                /* [ pair address address nat : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                             : pair address address nat : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          SWAP
                          /* [ pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          CDR
                          /* [ pair address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          CAR
                          /* [ address
                             : pair (big_map address (pair nat (map address nat))) address bool nat
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DIP { CAR
                                /* [ big_map address (pair nat (map address nat)) : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ address : big_map address (pair nat (map address nat))
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          GET
                          /* [ option (pair nat (map address nat)) : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          IF_NONE
                            { DUP
                              /* [ pair address address nat : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              CDR
                              /* [ pair address nat : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              CDR
                              /* [ nat : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              INT
                              /* [ int : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              EQ
                              /* [ bool : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              IF { NONE (pair nat (map address nat))
                                   /* [ option (pair nat (map address nat)) : pair address address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                 { DUP
                                   /* [ pair address address nat : pair address address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                   CDR
                                   /* [ pair address nat : pair address address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                   CDR
                                   /* [ nat : pair address address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                   DIP { EMPTY_MAP
                                           address
                                           nat
                                         /* [ map address nat : pair address address nat
                                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                   /* [ nat : map address nat : pair address address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                   PAIR
                                   /* [ pair nat (map address nat) : pair address address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                   SOME
                                   /* [ option (pair nat (map address nat)) : pair address address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } }
                            { DIP { DUP
                                    /* [ pair address address nat : pair address address nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                              /* [ pair nat (map address nat) : pair address address nat
                                 : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              SWAP
                              /* [ pair address address nat : pair nat (map address nat)
                                 : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              CDR
                              /* [ pair address nat : pair nat (map address nat) : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              CDR
                              /* [ nat : pair nat (map address nat) : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              DIP { DUP
                                    /* [ pair nat (map address nat) : pair nat (map address nat)
                                       : pair address address nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    CAR
                                    /* [ nat : pair nat (map address nat) : pair address address nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                              /* [ nat : nat : pair nat (map address nat) : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              ADD
                              /* [ nat : pair nat (map address nat) : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              DIP { DUP
                                    /* [ pair nat (map address nat) : pair nat (map address nat)
                                       : pair address address nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    DIP { CDR
                                          /* [ map address nat : pair address address nat
                                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                    /* [ pair nat (map address nat) : map address nat : pair address address nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    CAR
                                    /* [ nat : map address nat : pair address address nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                              /* [ nat : nat : map address nat : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              DIP { DROP
                                    /* [ map address nat : pair address address nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                              /* [ nat : map address nat : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              PAIR
                              /* [ pair nat (map address nat) : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              SOME
                              /* [ option (pair nat (map address nat)) : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                          SWAP
                          /* [ pair address address nat : option (pair nat (map address nat))
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DUP
                          /* [ pair address address nat : pair address address nat
                             : option (pair nat (map address nat))
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DIP { CDR
                                /* [ pair address nat : option (pair nat (map address nat))
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                CAR
                                /* [ address : option (pair nat (map address nat))
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { DIP { DUP
                                            /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                               : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                            CAR
                                            /* [ big_map address (pair nat (map address nat))
                                               : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                      /* [ option (pair nat (map address nat))
                                         : big_map address (pair nat (map address nat))
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                /* [ address : option (pair nat (map address nat))
                                   : big_map address (pair nat (map address nat))
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                UPDATE
                                /* [ big_map address (pair nat (map address nat))
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { DUP
                                      /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      DIP { CDR /* [ pair address bool nat ] */ }
                                      /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                         : pair address bool nat ] */ ;
                                      CAR
                                      /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ }
                                /* [ big_map address (pair nat (map address nat))
                                   : big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                                DIP { DROP /* [ pair address bool nat ] */ }
                                /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                                PAIR
                                /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DUP
                          /* [ pair address address nat : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DIP { CDR
                                /* [ pair address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                CDR
                                /* [ nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                INT
                                /* [ int
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { DUP
                                      /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      CDR
                                      /* [ pair address bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      CDR
                                      /* [ pair bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      CDR
                                      /* [ nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                /* [ int : nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                ADD
                                /* [ int
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                ISNAT
                                /* [ option nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                IF_NONE
                                  { PUSH string
                                         "Internal: Negative total supply"
                                    /* [ string
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    FAILWITH
                                    /* [] */ }
                                  { /* [ nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                                DIP { DUP
                                      /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      CDR
                                      /* [ pair address bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                /* [ nat : pair address bool nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { DUP
                                      /* [ pair address bool nat : pair address bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      DIP { CAR
                                            /* [ address
                                               : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                      /* [ pair address bool nat : address
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      CDR
                                      /* [ pair bool nat : address
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                /* [ nat : pair bool nat : address
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { DUP
                                      /* [ pair bool nat : pair bool nat : address
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      DIP { CAR
                                            /* [ bool : address
                                               : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                      /* [ pair bool nat : bool : address
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      CDR
                                      /* [ nat : bool : address
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                /* [ nat : nat : bool : address
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { DROP
                                      /* [ bool : address
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                /* [ nat : bool : address
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                SWAP
                                /* [ bool : nat : address
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                PAIR
                                /* [ pair bool nat : address
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                SWAP
                                /* [ address : pair bool nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                PAIR
                                /* [ pair address bool nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { DUP
                                      /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      DIP { CAR /* [ big_map address (pair nat (map address nat)) ] */ }
                                      /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                         : big_map address (pair nat (map address nat)) ] */ ;
                                      CDR
                                      /* [ pair address bool nat : big_map address (pair nat (map address nat)) ] */ }
                                /* [ pair address bool nat : pair address bool nat
                                   : big_map address (pair nat (map address nat)) ] */ ;
                                DIP { DROP /* [ big_map address (pair nat (map address nat)) ] */ }
                                /* [ pair address bool nat : big_map address (pair nat (map address nat)) ] */ ;
                                SWAP
                                /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                                PAIR
                                /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DIP { DUP
                                /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          SWAP
                          /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DIP { DUP
                                /* [ pair address address nat : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                             : pair address address nat : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          SWAP
                          /* [ pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          CAR
                          /* [ address
                             : pair (big_map address (pair nat (map address nat))) address bool nat
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DIP { CAR
                                /* [ big_map address (pair nat (map address nat)) : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ address : big_map address (pair nat (map address nat))
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          GET
                          /* [ option (pair nat (map address nat)) : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          IF_NONE
                            { CDR
                              /* [ pair address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              CDR
                              /* [ nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              PUSH nat
                                   0
                              /* [ nat : nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              SWAP
                              /* [ nat : nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              PAIR
                              /* [ pair nat nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              PUSH string
                                   "NotEnoughBalance"
                              /* [ string : pair nat nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              PAIR
                              /* [ pair string nat nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              FAILWITH
                              /* [] */ }
                            { /* [ pair nat (map address nat) : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                          DUP
                          /* [ pair nat (map address nat) : pair nat (map address nat)
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          CAR
                          /* [ nat : pair nat (map address nat) : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DIP { DIP { DUP
                                      /* [ pair address address nat : pair address address nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                /* [ pair nat (map address nat) : pair address address nat
                                   : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                SWAP
                                /* [ pair address address nat : pair nat (map address nat)
                                   : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ nat : pair address address nat : pair nat (map address nat)
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          SWAP
                          /* [ pair address address nat : nat : pair nat (map address nat)
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          CDR
                          /* [ pair address nat : nat : pair nat (map address nat)
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          CDR
                          /* [ nat : nat : pair nat (map address nat) : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          SWAP
                          /* [ nat : nat : pair nat (map address nat) : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          SUB
                          /* [ int : pair nat (map address nat) : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          ISNAT
                          /* [ option nat : pair nat (map address nat) : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          IF_NONE
                            { CAR
                              /* [ nat : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              DIP { DUP
                                    /* [ pair address address nat : pair address address nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                              /* [ nat : pair address address nat : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              SWAP
                              /* [ pair address address nat : nat : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              CDR
                              /* [ pair address nat : nat : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              CDR
                              /* [ nat : nat : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              PAIR
                              /* [ pair nat nat : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              PUSH string
                                   "NotEnoughBalance"
                              /* [ string : pair nat nat : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              PAIR
                              /* [ pair string nat nat : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                              FAILWITH
                              /* [] */ }
                            { /* [ nat : pair nat (map address nat) : pair address address nat
                                 : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                          DIP { DUP
                                /* [ pair nat (map address nat) : pair nat (map address nat)
                                   : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { CDR
                                      /* [ map address nat : pair address address nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                /* [ pair nat (map address nat) : map address nat : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                CAR
                                /* [ nat : map address nat : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ nat : nat : map address nat : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DIP { DROP
                                /* [ map address nat : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ nat : map address nat : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          PAIR
                          /* [ pair nat (map address nat) : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DIP { DUP
                                /* [ pair address address nat : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ pair nat (map address nat) : pair address address nat
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          SWAP
                          /* [ pair address address nat : pair nat (map address nat)
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DIP { DUP
                                /* [ pair nat (map address nat) : pair nat (map address nat)
                                   : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                CAR
                                /* [ nat : pair nat (map address nat) : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                INT
                                /* [ int : pair nat (map address nat) : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                EQ
                                /* [ bool : pair nat (map address nat) : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                IF { DUP
                                     /* [ pair nat (map address nat) : pair nat (map address nat)
                                        : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ map address nat : pair nat (map address nat) : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     SIZE
                                     /* [ nat : pair nat (map address nat) : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     INT
                                     /* [ int : pair nat (map address nat) : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     EQ
                                     /* [ bool : pair nat (map address nat) : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     IF { DROP
                                          /* [ pair address address nat
                                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                          NONE (pair nat (map address nat))
                                          /* [ option (pair nat (map address nat)) : pair address address nat
                                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                        { SOME
                                          /* [ option (pair nat (map address nat)) : pair address address nat
                                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } }
                                   { SOME
                                     /* [ option (pair nat (map address nat)) : pair address address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                                SWAP
                                /* [ pair address address nat : option (pair nat (map address nat))
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                CAR
                                /* [ address : option (pair nat (map address nat))
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { DIP { DUP
                                            /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                               : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                            CAR
                                            /* [ big_map address (pair nat (map address nat))
                                               : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                      /* [ option (pair nat (map address nat))
                                         : big_map address (pair nat (map address nat))
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                /* [ address : option (pair nat (map address nat))
                                   : big_map address (pair nat (map address nat))
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                UPDATE
                                /* [ big_map address (pair nat (map address nat))
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { DUP
                                      /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      DIP { CDR /* [ pair address bool nat ] */ }
                                      /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                         : pair address bool nat ] */ ;
                                      CAR
                                      /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ }
                                /* [ big_map address (pair nat (map address nat))
                                   : big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                                DIP { DROP /* [ pair address bool nat ] */ }
                                /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                                PAIR
                                /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DUP
                          /* [ pair address address nat : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DIP { CDR
                                /* [ pair address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                CDR
                                /* [ nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                NEG
                                /* [ int
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { DUP
                                      /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      CDR
                                      /* [ pair address bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      CDR
                                      /* [ pair bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      CDR
                                      /* [ nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                /* [ int : nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                ADD
                                /* [ int
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                ISNAT
                                /* [ option nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                IF_NONE
                                  { PUSH string
                                         "Internal: Negative total supply"
                                    /* [ string
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    FAILWITH
                                    /* [] */ }
                                  { /* [ nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                                DIP { DUP
                                      /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      CDR
                                      /* [ pair address bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                /* [ nat : pair address bool nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { DUP
                                      /* [ pair address bool nat : pair address bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      DIP { CAR
                                            /* [ address
                                               : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                      /* [ pair address bool nat : address
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      CDR
                                      /* [ pair bool nat : address
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                /* [ nat : pair bool nat : address
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { DUP
                                      /* [ pair bool nat : pair bool nat : address
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      DIP { CAR
                                            /* [ bool : address
                                               : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                      /* [ pair bool nat : bool : address
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      CDR
                                      /* [ nat : bool : address
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                /* [ nat : nat : bool : address
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { DROP
                                      /* [ bool : address
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                /* [ nat : bool : address
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                SWAP
                                /* [ bool : nat : address
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                PAIR
                                /* [ pair bool nat : address
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                SWAP
                                /* [ address : pair bool nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                PAIR
                                /* [ pair address bool nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                DIP { DUP
                                      /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                         : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                      DIP { CAR /* [ big_map address (pair nat (map address nat)) ] */ }
                                      /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                         : big_map address (pair nat (map address nat)) ] */ ;
                                      CDR
                                      /* [ pair address bool nat : big_map address (pair nat (map address nat)) ] */ }
                                /* [ pair address bool nat : pair address bool nat
                                   : big_map address (pair nat (map address nat)) ] */ ;
                                DIP { DROP /* [ big_map address (pair nat (map address nat)) ] */ }
                                /* [ pair address bool nat : big_map address (pair nat (map address nat)) ] */ ;
                                SWAP
                                /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                                PAIR
                                /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          DROP
                          /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                     NIL operation
                     /* [ list operation
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     PAIR
                     /* [ pair (list operation) (big_map address (pair nat (map address nat))) address bool nat ] */ }
                   { SENDER
                     /* [ address : pair address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     PAIR
                     /* [ pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DUP
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CDR
                           /* [ pair address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CDR
                           /* [ pair bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CAR
                           /* [ bool
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           IF { UNIT
                                /* [ unit
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                PUSH string
                                     "TokenOperationsArePaused"
                                /* [ string : unit
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                PAIR
                                /* [ pair string unit
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                FAILWITH
                                /* [] */ }
                              { /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ } }
                     /* [ pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DUP
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     SWAP
                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DUP
                           /* [ pair address address nat : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                        : pair address address nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     SWAP
                     /* [ pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DUP
                     /* [ pair address address nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { CAR
                           /* [ address
                              : pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           DIP { CAR
                                 /* [ big_map address (pair nat (map address nat)) : pair address address nat
                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                           /* [ address : big_map address (pair nat (map address nat))
                              : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           GET
                           /* [ option (pair nat (map address nat)) : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           IF_NONE
                             { EMPTY_MAP
                                 address
                                 nat
                               /* [ map address nat : pair address address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                             { CDR
                               /* [ map address nat : pair address address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } }
                     /* [ pair address address nat : map address nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CDR
                     /* [ pair address nat : map address nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CAR
                     /* [ address : map address nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     GET
                     /* [ option nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     IF_NONE
                       { PUSH nat
                              0
                         /* [ nat : pair address address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                       { /* [ nat : pair address address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                     DUP
                     /* [ nat : nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     INT
                     /* [ int : nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     EQ
                     /* [ bool : nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     IF { DROP
                          /* [ pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                        { DIP { DUP
                                /* [ pair address address nat : pair address address nat
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                          /* [ nat : pair address address nat : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          SWAP
                          /* [ pair address address nat : nat : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          CDR
                          /* [ pair address nat : nat : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          CDR
                          /* [ nat : nat : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          INT
                          /* [ int : nat : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          EQ
                          /* [ bool : nat : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          IF { DROP
                               /* [ pair address address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                             { PUSH string
                                    "UnsafeAllowanceChange"
                               /* [ string : nat : pair address address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               PAIR
                               /* [ pair string nat : pair address address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               FAILWITH
                               /* [] */ } } ;
                     DIP { DUP
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     SWAP
                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DUP
                           /* [ pair address address nat : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CAR
                           /* [ address : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                        : address : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     SWAP
                     /* [ address
                        : pair (big_map address (pair nat (map address nat))) address bool nat
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { CAR
                           /* [ big_map address (pair nat (map address nat)) : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ address : big_map address (pair nat (map address nat))
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     GET
                     /* [ option (pair nat (map address nat)) : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     IF_NONE
                       { PUSH nat
                              0
                         /* [ nat : pair address address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { EMPTY_MAP
                                 address
                                 nat
                               /* [ map address nat : pair address address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ nat : map address nat : pair address address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         PAIR
                         /* [ pair nat (map address nat) : pair address address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         EMPTY_MAP
                           address
                           nat
                         /* [ map address nat : pair nat (map address nat) : pair address address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                       { DUP
                         /* [ pair nat (map address nat) : pair nat (map address nat)
                            : pair address address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         CDR
                         /* [ map address nat : pair nat (map address nat) : pair address address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                     DIP { DIP { DUP
                                 /* [ pair address address nat : pair address address nat
                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                           /* [ pair nat (map address nat) : pair address address nat
                              : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           SWAP
                           /* [ pair address address nat : pair nat (map address nat)
                              : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ map address nat : pair address address nat : pair nat (map address nat)
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     SWAP
                     /* [ pair address address nat : map address nat : pair nat (map address nat)
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CDR
                     /* [ pair address nat : map address nat : pair nat (map address nat)
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CDR
                     /* [ nat : map address nat : pair nat (map address nat)
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DUP
                     /* [ nat : nat : map address nat : pair nat (map address nat)
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     INT
                     /* [ int : nat : map address nat : pair nat (map address nat)
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     EQ
                     /* [ bool : nat : map address nat : pair nat (map address nat)
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     IF { DROP
                          /* [ map address nat : pair nat (map address nat) : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                          NONE nat
                          /* [ option nat : map address nat : pair nat (map address nat)
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                        { SOME
                          /* [ option nat : map address nat : pair nat (map address nat)
                             : pair address address nat
                             : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                     DIP { DIP { DIP { DUP
                                       /* [ pair address address nat : pair address address nat
                                          : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                 /* [ pair nat (map address nat) : pair address address nat
                                    : pair address address nat
                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                 SWAP
                                 /* [ pair address address nat : pair nat (map address nat)
                                    : pair address address nat
                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                           /* [ map address nat : pair address address nat : pair nat (map address nat)
                              : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           SWAP
                           /* [ pair address address nat : map address nat : pair nat (map address nat)
                              : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ option nat : pair address address nat : map address nat
                        : pair nat (map address nat) : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     SWAP
                     /* [ pair address address nat : option nat : map address nat
                        : pair nat (map address nat) : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CDR
                     /* [ pair address nat : option nat : map address nat
                        : pair nat (map address nat) : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CAR
                     /* [ address : option nat : map address nat : pair nat (map address nat)
                        : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     UPDATE
                     /* [ map address nat : pair nat (map address nat) : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DUP
                           /* [ pair nat (map address nat) : pair nat (map address nat)
                              : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           DIP { CAR
                                 /* [ nat : pair address address nat
                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                           /* [ pair nat (map address nat) : nat : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CDR
                           /* [ map address nat : nat : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ map address nat : map address nat : nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DROP
                           /* [ nat : pair address address nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ map address nat : nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     SWAP
                     /* [ nat : map address nat : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     PAIR
                     /* [ pair nat (map address nat) : pair address address nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     SWAP
                     /* [ pair address address nat : pair nat (map address nat)
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CAR
                     /* [ address : pair nat (map address nat)
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { SOME
                           /* [ option (pair nat (map address nat))
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ address : option (pair nat (map address nat))
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DIP { DUP
                                 /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                 CAR
                                 /* [ big_map address (pair nat (map address nat))
                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                           /* [ option (pair nat (map address nat))
                              : big_map address (pair nat (map address nat))
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ address : option (pair nat (map address nat))
                        : big_map address (pair nat (map address nat))
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     UPDATE
                     /* [ big_map address (pair nat (map address nat))
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DUP
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           DIP { CDR /* [ pair address bool nat ] */ }
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair address bool nat ] */ ;
                           CAR
                           /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ }
                     /* [ big_map address (pair nat (map address nat))
                        : big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                     DIP { DROP /* [ pair address bool nat ] */ }
                     /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                     PAIR
                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     NIL operation
                     /* [ list operation
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     PAIR
                     /* [ pair (list operation) (big_map address (pair nat (map address nat))) address bool nat ] */ } }
               { IF_LEFT
                   { DUP
                     /* [ pair (pair address address) (contract nat)
                        : pair (pair address address) (contract nat)
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CAR
                     /* [ pair address address : pair (pair address address) (contract nat)
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { CDR
                           /* [ contract nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ pair address address : contract nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DIP { DUP
                                 /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                           /* [ contract nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           SWAP
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : contract nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ pair address address
                        : pair (big_map address (pair nat (map address nat))) address bool nat
                        : contract nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     PAIR
                     /* [ pair (pair address address)
                             (big_map address (pair nat (map address nat)))
                             address
                             bool
                             nat : contract nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DUP
                     /* [ pair (pair address address)
                             (big_map address (pair nat (map address nat)))
                             address
                             bool
                             nat
                        : pair (pair address address)
                             (big_map address (pair nat (map address nat)))
                             address
                             bool
                             nat : contract nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CAR
                     /* [ pair address address
                        : pair (pair address address)
                             (big_map address (pair nat (map address nat)))
                             address
                             bool
                             nat : contract nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { CDR
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : contract nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ pair address address
                        : pair (big_map address (pair nat (map address nat))) address bool nat
                        : contract nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DUP
                     /* [ pair address address : pair address address
                        : pair (big_map address (pair nat (map address nat))) address bool nat
                        : contract nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { CAR
                           /* [ address
                              : pair (big_map address (pair nat (map address nat))) address bool nat
                              : contract nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           DIP { CAR
                                 /* [ big_map address (pair nat (map address nat)) : contract nat
                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                           /* [ address : big_map address (pair nat (map address nat)) : contract nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           GET
                           /* [ option (pair nat (map address nat)) : contract nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           IF_NONE
                             { EMPTY_MAP
                                 address
                                 nat
                               /* [ map address nat : contract nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                             { CDR
                               /* [ map address nat : contract nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } }
                     /* [ pair address address : map address nat : contract nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CDR
                     /* [ address : map address nat : contract nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     GET
                     /* [ option nat : contract nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     IF_NONE
                       { PUSH nat
                              0
                         /* [ nat : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                       { /* [ nat : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                     DIP { AMOUNT
                           /* [ mutez : contract nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ nat : mutez : contract nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     TRANSFER_TOKENS
                     /* [ operation
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     NIL operation
                     /* [ list operation : operation
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     SWAP
                     /* [ operation : list operation
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CONS
                     /* [ list operation
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     PAIR
                     /* [ pair (list operation) (big_map address (pair nat (map address nat))) address bool nat ] */ }
                   { IF_LEFT
                       { DUP
                         /* [ pair address (contract nat) : pair address (contract nat)
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         CAR
                         /* [ address : pair address (contract nat)
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { CDR
                               /* [ contract nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ address : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { DIP { DUP
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ contract nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               SWAP
                               /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                  : contract nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ address
                            : pair (big_map address (pair nat (map address nat))) address bool nat
                            : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         PAIR
                         /* [ pair address (big_map address (pair nat (map address nat))) address bool nat
                            : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DUP
                         /* [ pair address (big_map address (pair nat (map address nat))) address bool nat
                            : pair address (big_map address (pair nat (map address nat))) address bool nat
                            : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         CAR
                         /* [ address
                            : pair address (big_map address (pair nat (map address nat))) address bool nat
                            : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { CDR
                               /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                  : contract nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ address
                            : pair (big_map address (pair nat (map address nat))) address bool nat
                            : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { CAR
                               /* [ big_map address (pair nat (map address nat)) : contract nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ address : big_map address (pair nat (map address nat)) : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         GET
                         /* [ option (pair nat (map address nat)) : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         IF_NONE
                           { PUSH nat
                                  0
                             /* [ nat : contract nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                           { CAR
                             /* [ nat : contract nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                         DIP { AMOUNT
                               /* [ mutez : contract nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ nat : mutez : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         TRANSFER_TOKENS
                         /* [ operation
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         NIL operation
                         /* [ list operation : operation
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         SWAP
                         /* [ operation : list operation
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         CONS
                         /* [ list operation
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         PAIR
                         /* [ pair (list operation) (big_map address (pair nat (map address nat))) address bool nat ] */ }
                       { DUP
                         /* [ pair unit (contract nat) : pair unit (contract nat)
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         CAR
                         /* [ unit : pair unit (contract nat)
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { CDR
                               /* [ contract nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ unit : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { DIP { DUP
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ contract nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               SWAP
                               /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                  : contract nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ unit : pair (big_map address (pair nat (map address nat))) address bool nat
                            : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         PAIR
                         /* [ pair unit (big_map address (pair nat (map address nat))) address bool nat
                            : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         CDR
                         /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                            : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         CDR
                         /* [ pair address bool nat : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         CDR
                         /* [ pair bool nat : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         CDR
                         /* [ nat : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { AMOUNT
                               /* [ mutez : contract nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ nat : mutez : contract nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         TRANSFER_TOKENS
                         /* [ operation
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         NIL operation
                         /* [ list operation : operation
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         SWAP
                         /* [ operation : list operation
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         CONS
                         /* [ list operation
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         PAIR
                         /* [ pair (list operation) (big_map address (pair nat (map address nat))) address bool nat ] */ } } } }
           { IF_LEFT
               { IF_LEFT
                   { DIP { DUP
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CDR
                           /* [ pair address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CAR
                           /* [ address
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           SENDER
                           /* [ address : address
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           COMPARE
                           /* [ int
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           EQ
                           /* [ bool
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           IF { /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                              { UNIT
                                /* [ unit
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                PUSH string
                                     "SenderIsNotAdmin"
                                /* [ string : unit
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                PAIR
                                /* [ pair string unit
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                FAILWITH
                                /* [] */ } }
                     /* [ bool
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DUP
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CDR
                           /* [ pair address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ bool : pair address bool nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DUP
                           /* [ pair address bool nat : pair address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           DIP { CAR
                                 /* [ address
                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                           /* [ pair address bool nat : address
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CDR
                           /* [ pair bool nat : address
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ bool : pair bool nat : address
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DUP
                           /* [ pair bool nat : pair bool nat : address
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           DIP { CDR
                                 /* [ nat : address
                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                           /* [ pair bool nat : nat : address
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CAR
                           /* [ bool : nat : address
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ bool : bool : nat : address
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DROP
                           /* [ nat : address
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ bool : nat : address
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     PAIR
                     /* [ pair bool nat : address
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     SWAP
                     /* [ address : pair bool nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     PAIR
                     /* [ pair address bool nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DUP
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           DIP { CAR /* [ big_map address (pair nat (map address nat)) ] */ }
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : big_map address (pair nat (map address nat)) ] */ ;
                           CDR
                           /* [ pair address bool nat : big_map address (pair nat (map address nat)) ] */ }
                     /* [ pair address bool nat : pair address bool nat
                        : big_map address (pair nat (map address nat)) ] */ ;
                     DIP { DROP /* [ big_map address (pair nat (map address nat)) ] */ }
                     /* [ pair address bool nat : big_map address (pair nat (map address nat)) ] */ ;
                     SWAP
                     /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                     PAIR
                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     NIL operation
                     /* [ list operation
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     PAIR
                     /* [ pair (list operation) (big_map address (pair nat (map address nat))) address bool nat ] */ }
                   { DIP { DUP
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CDR
                           /* [ pair address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CAR
                           /* [ address
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           SENDER
                           /* [ address : address
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           COMPARE
                           /* [ int
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           EQ
                           /* [ bool
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           IF { /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                              { UNIT
                                /* [ unit
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                PUSH string
                                     "SenderIsNotAdmin"
                                /* [ string : unit
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                PAIR
                                /* [ pair string unit
                                   : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                FAILWITH
                                /* [] */ } }
                     /* [ address
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DUP
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CDR
                           /* [ pair address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ address : pair address bool nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DUP
                           /* [ pair address bool nat : pair address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           DIP { CDR
                                 /* [ pair bool nat
                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                           /* [ pair address bool nat : pair bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           CAR
                           /* [ address : pair bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ address : address : pair bool nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DROP
                           /* [ pair bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ address : pair bool nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     PAIR
                     /* [ pair address bool nat
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DUP
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           DIP { CAR /* [ big_map address (pair nat (map address nat)) ] */ }
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : big_map address (pair nat (map address nat)) ] */ ;
                           CDR
                           /* [ pair address bool nat : big_map address (pair nat (map address nat)) ] */ }
                     /* [ pair address bool nat : pair address bool nat
                        : big_map address (pair nat (map address nat)) ] */ ;
                     DIP { DROP /* [ big_map address (pair nat (map address nat)) ] */ }
                     /* [ pair address bool nat : big_map address (pair nat (map address nat)) ] */ ;
                     SWAP
                     /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                     PAIR
                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     NIL operation
                     /* [ list operation
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     PAIR
                     /* [ pair (list operation) (big_map address (pair nat (map address nat))) address bool nat ] */ } }
               { IF_LEFT
                   { DUP
                     /* [ pair unit (contract address) : pair unit (contract address)
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CAR
                     /* [ unit : pair unit (contract address)
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { CDR
                           /* [ contract address
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ unit : contract address
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { DIP { DUP
                                 /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                    : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                           /* [ contract address
                              : pair (big_map address (pair nat (map address nat))) address bool nat
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                           SWAP
                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                              : contract address
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ unit : pair (big_map address (pair nat (map address nat))) address bool nat
                        : contract address
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     PAIR
                     /* [ pair unit (big_map address (pair nat (map address nat))) address bool nat
                        : contract address
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CDR
                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                        : contract address
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CDR
                     /* [ pair address bool nat : contract address
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CAR
                     /* [ address : contract address
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     DIP { AMOUNT
                           /* [ mutez : contract address
                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                     /* [ address : mutez : contract address
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     TRANSFER_TOKENS
                     /* [ operation
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     NIL operation
                     /* [ list operation : operation
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     SWAP
                     /* [ operation : list operation
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     CONS
                     /* [ list operation
                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                     PAIR
                     /* [ pair (list operation) (big_map address (pair nat (map address nat))) address bool nat ] */ }
                   { IF_LEFT
                       { DIP { DUP
                               /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               CDR
                               /* [ pair address bool nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               CAR
                               /* [ address
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               SENDER
                               /* [ address : address
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               COMPARE
                               /* [ int
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               EQ
                               /* [ bool
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               IF { /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                  { UNIT
                                    /* [ unit
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    PUSH string
                                         "SenderIsNotAdmin"
                                    /* [ string : unit
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    PAIR
                                    /* [ pair string unit
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    FAILWITH
                                    /* [] */ } }
                         /* [ pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { DUP
                               /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         SWAP
                         /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                            : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { DUP
                               /* [ pair address nat : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                            : pair address nat : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         SWAP
                         /* [ pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat
                            : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         CAR
                         /* [ address
                            : pair (big_map address (pair nat (map address nat))) address bool nat
                            : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { CAR
                               /* [ big_map address (pair nat (map address nat)) : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ address : big_map address (pair nat (map address nat)) : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         GET
                         /* [ option (pair nat (map address nat)) : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         IF_NONE
                           { DUP
                             /* [ pair address nat : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             CDR
                             /* [ nat : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             INT
                             /* [ int : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             EQ
                             /* [ bool : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             IF { NONE (pair nat (map address nat))
                                  /* [ option (pair nat (map address nat)) : pair address nat
                                     : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                { DUP
                                  /* [ pair address nat : pair address nat
                                     : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                  CDR
                                  /* [ nat : pair address nat
                                     : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                  DIP { EMPTY_MAP
                                          address
                                          nat
                                        /* [ map address nat : pair address nat
                                           : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                  /* [ nat : map address nat : pair address nat
                                     : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                  PAIR
                                  /* [ pair nat (map address nat) : pair address nat
                                     : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                  SOME
                                  /* [ option (pair nat (map address nat)) : pair address nat
                                     : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } }
                           { DIP { DUP
                                   /* [ pair address nat : pair address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                             /* [ pair nat (map address nat) : pair address nat : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             SWAP
                             /* [ pair address nat : pair nat (map address nat) : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             CDR
                             /* [ nat : pair nat (map address nat) : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             DIP { DUP
                                   /* [ pair nat (map address nat) : pair nat (map address nat) : pair address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                   CAR
                                   /* [ nat : pair nat (map address nat) : pair address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                             /* [ nat : nat : pair nat (map address nat) : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             ADD
                             /* [ nat : pair nat (map address nat) : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             DIP { DUP
                                   /* [ pair nat (map address nat) : pair nat (map address nat) : pair address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                   DIP { CDR
                                         /* [ map address nat : pair address nat
                                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                   /* [ pair nat (map address nat) : map address nat : pair address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                   CAR
                                   /* [ nat : map address nat : pair address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                             /* [ nat : nat : map address nat : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             DIP { DROP
                                   /* [ map address nat : pair address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                             /* [ nat : map address nat : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             PAIR
                             /* [ pair nat (map address nat) : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             SOME
                             /* [ option (pair nat (map address nat)) : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                         SWAP
                         /* [ pair address nat : option (pair nat (map address nat))
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DUP
                         /* [ pair address nat : pair address nat : option (pair nat (map address nat))
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { CAR
                               /* [ address : option (pair nat (map address nat))
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DIP { DUP
                                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           CAR
                                           /* [ big_map address (pair nat (map address nat))
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ option (pair nat (map address nat))
                                        : big_map address (pair nat (map address nat))
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ address : option (pair nat (map address nat))
                                  : big_map address (pair nat (map address nat))
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               UPDATE
                               /* [ big_map address (pair nat (map address nat))
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DUP
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { CDR /* [ pair address bool nat ] */ }
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair address bool nat ] */ ;
                                     CAR
                                     /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ }
                               /* [ big_map address (pair nat (map address nat))
                                  : big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                               DIP { DROP /* [ pair address bool nat ] */ }
                               /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                               PAIR
                               /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DUP
                         /* [ pair address nat : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { CDR
                               /* [ nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               INT
                               /* [ int
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DUP
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ pair address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ pair bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ int : nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               ADD
                               /* [ int
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               ISNAT
                               /* [ option nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               IF_NONE
                                 { PUSH string
                                        "Internal: Negative total supply"
                                   /* [ string
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                   FAILWITH
                                   /* [] */ }
                                 { /* [ nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                               DIP { DUP
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ pair address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ nat : pair address bool nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DUP
                                     /* [ pair address bool nat : pair address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { CAR
                                           /* [ address
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ pair address bool nat : address
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ pair bool nat : address
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ nat : pair bool nat : address
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DUP
                                     /* [ pair bool nat : pair bool nat : address
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { CAR
                                           /* [ bool : address
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ pair bool nat : bool : address
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ nat : bool : address
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ nat : nat : bool : address
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DROP
                                     /* [ bool : address
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ nat : bool : address
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               SWAP
                               /* [ bool : nat : address
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               PAIR
                               /* [ pair bool nat : address
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               SWAP
                               /* [ address : pair bool nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               PAIR
                               /* [ pair address bool nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DUP
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { CAR /* [ big_map address (pair nat (map address nat)) ] */ }
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : big_map address (pair nat (map address nat)) ] */ ;
                                     CDR
                                     /* [ pair address bool nat : big_map address (pair nat (map address nat)) ] */ }
                               /* [ pair address bool nat : pair address bool nat
                                  : big_map address (pair nat (map address nat)) ] */ ;
                               DIP { DROP /* [ big_map address (pair nat (map address nat)) ] */ }
                               /* [ pair address bool nat : big_map address (pair nat (map address nat)) ] */ ;
                               SWAP
                               /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                               PAIR
                               /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DROP
                         /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         NIL operation
                         /* [ list operation
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         PAIR
                         /* [ pair (list operation) (big_map address (pair nat (map address nat))) address bool nat ] */ }
                       { DIP { DUP
                               /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               CDR
                               /* [ pair address bool nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               CAR
                               /* [ address
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               SENDER
                               /* [ address : address
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               COMPARE
                               /* [ int
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               EQ
                               /* [ bool
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               IF { /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                  { UNIT
                                    /* [ unit
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    PUSH string
                                         "SenderIsNotAdmin"
                                    /* [ string : unit
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    PAIR
                                    /* [ pair string unit
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    FAILWITH
                                    /* [] */ } }
                         /* [ pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { DUP
                               /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         SWAP
                         /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                            : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { DUP
                               /* [ pair address nat : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                            : pair address nat : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         SWAP
                         /* [ pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat
                            : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         CAR
                         /* [ address
                            : pair (big_map address (pair nat (map address nat))) address bool nat
                            : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { CAR
                               /* [ big_map address (pair nat (map address nat)) : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ address : big_map address (pair nat (map address nat)) : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         GET
                         /* [ option (pair nat (map address nat)) : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         IF_NONE
                           { CDR
                             /* [ nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             PUSH nat
                                  0
                             /* [ nat : nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             SWAP
                             /* [ nat : nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             PAIR
                             /* [ pair nat nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             PUSH string
                                  "NotEnoughBalance"
                             /* [ string : pair nat nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             PAIR
                             /* [ pair string nat nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             FAILWITH
                             /* [] */ }
                           { /* [ pair nat (map address nat) : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                         DUP
                         /* [ pair nat (map address nat) : pair nat (map address nat) : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         CAR
                         /* [ nat : pair nat (map address nat) : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { DIP { DUP
                                     /* [ pair address nat : pair address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ pair nat (map address nat) : pair address nat : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               SWAP
                               /* [ pair address nat : pair nat (map address nat) : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ nat : pair address nat : pair nat (map address nat) : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         SWAP
                         /* [ pair address nat : nat : pair nat (map address nat) : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         CDR
                         /* [ nat : nat : pair nat (map address nat) : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         SWAP
                         /* [ nat : nat : pair nat (map address nat) : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         SUB
                         /* [ int : pair nat (map address nat) : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         ISNAT
                         /* [ option nat : pair nat (map address nat) : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         IF_NONE
                           { CAR
                             /* [ nat : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             DIP { DUP
                                   /* [ pair address nat : pair address nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                             /* [ nat : pair address nat : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             SWAP
                             /* [ pair address nat : nat : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             CDR
                             /* [ nat : nat : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             PAIR
                             /* [ pair nat nat : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             PUSH string
                                  "NotEnoughBalance"
                             /* [ string : pair nat nat : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             PAIR
                             /* [ pair string nat nat : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                             FAILWITH
                             /* [] */ }
                           { /* [ nat : pair nat (map address nat) : pair address nat
                                : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                         DIP { DUP
                               /* [ pair nat (map address nat) : pair nat (map address nat) : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { CDR
                                     /* [ map address nat : pair address nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ pair nat (map address nat) : map address nat : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               CAR
                               /* [ nat : map address nat : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ nat : nat : map address nat : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { DROP
                               /* [ map address nat : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ nat : map address nat : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         PAIR
                         /* [ pair nat (map address nat) : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { DUP
                               /* [ pair address nat : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ pair nat (map address nat) : pair address nat : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         SWAP
                         /* [ pair address nat : pair nat (map address nat) : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { DUP
                               /* [ pair nat (map address nat) : pair nat (map address nat) : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               CAR
                               /* [ nat : pair nat (map address nat) : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               INT
                               /* [ int : pair nat (map address nat) : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               EQ
                               /* [ bool : pair nat (map address nat) : pair address nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               IF { DUP
                                    /* [ pair nat (map address nat) : pair nat (map address nat) : pair address nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    CDR
                                    /* [ map address nat : pair nat (map address nat) : pair address nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    SIZE
                                    /* [ nat : pair nat (map address nat) : pair address nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    INT
                                    /* [ int : pair nat (map address nat) : pair address nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    EQ
                                    /* [ bool : pair nat (map address nat) : pair address nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                    IF { DROP
                                         /* [ pair address nat
                                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                         NONE (pair nat (map address nat))
                                         /* [ option (pair nat (map address nat)) : pair address nat
                                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                       { SOME
                                         /* [ option (pair nat (map address nat)) : pair address nat
                                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } }
                                  { SOME
                                    /* [ option (pair nat (map address nat)) : pair address nat
                                       : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                               SWAP
                               /* [ pair address nat : option (pair nat (map address nat))
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               CAR
                               /* [ address : option (pair nat (map address nat))
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DIP { DUP
                                           /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                           CAR
                                           /* [ big_map address (pair nat (map address nat))
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ option (pair nat (map address nat))
                                        : big_map address (pair nat (map address nat))
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ address : option (pair nat (map address nat))
                                  : big_map address (pair nat (map address nat))
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               UPDATE
                               /* [ big_map address (pair nat (map address nat))
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DUP
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { CDR /* [ pair address bool nat ] */ }
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair address bool nat ] */ ;
                                     CAR
                                     /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ }
                               /* [ big_map address (pair nat (map address nat))
                                  : big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                               DIP { DROP /* [ pair address bool nat ] */ }
                               /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                               PAIR
                               /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DUP
                         /* [ pair address nat : pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DIP { CDR
                               /* [ nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               NEG
                               /* [ int
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DUP
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ pair address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ pair bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ int : nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               ADD
                               /* [ int
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               ISNAT
                               /* [ option nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               IF_NONE
                                 { PUSH string
                                        "Internal: Negative total supply"
                                   /* [ string
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                   FAILWITH
                                   /* [] */ }
                                 { /* [ nat
                                      : pair (big_map address (pair nat (map address nat))) address bool nat ] */ } ;
                               DIP { DUP
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ pair address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ nat : pair address bool nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DUP
                                     /* [ pair address bool nat : pair address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { CAR
                                           /* [ address
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ pair address bool nat : address
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ pair bool nat : address
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ nat : pair bool nat : address
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DUP
                                     /* [ pair bool nat : pair bool nat : address
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { CAR
                                           /* [ bool : address
                                              : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                                     /* [ pair bool nat : bool : address
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     CDR
                                     /* [ nat : bool : address
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ nat : nat : bool : address
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DROP
                                     /* [ bool : address
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                               /* [ nat : bool : address
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               SWAP
                               /* [ bool : nat : address
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               PAIR
                               /* [ pair bool nat : address
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               SWAP
                               /* [ address : pair bool nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               PAIR
                               /* [ pair address bool nat
                                  : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                               DIP { DUP
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                                     DIP { CAR /* [ big_map address (pair nat (map address nat)) ] */ }
                                     /* [ pair (big_map address (pair nat (map address nat))) address bool nat
                                        : big_map address (pair nat (map address nat)) ] */ ;
                                     CDR
                                     /* [ pair address bool nat : big_map address (pair nat (map address nat)) ] */ }
                               /* [ pair address bool nat : pair address bool nat
                                  : big_map address (pair nat (map address nat)) ] */ ;
                               DIP { DROP /* [ big_map address (pair nat (map address nat)) ] */ }
                               /* [ pair address bool nat : big_map address (pair nat (map address nat)) ] */ ;
                               SWAP
                               /* [ big_map address (pair nat (map address nat)) : pair address bool nat ] */ ;
                               PAIR
                               /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ }
                         /* [ pair address nat
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         DROP
                         /* [ pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         NIL operation
                         /* [ list operation
                            : pair (big_map address (pair nat (map address nat))) address bool nat ] */ ;
                         PAIR
                         /* [ pair (list operation) (big_map address (pair nat (map address nat))) address bool nat ] */ } } } } } }
Well typed (Gas remaining: 1039995.761 units remaining)	michelson_test_scripts/mini_scenarios/fail_on_false.tz
{ parameter bool ;
  storage unit ;
  code { UNPAIR
         /* [ bool : unit ] */ ;
         IF { NIL operation
              /* [ list operation : unit ] */ ;
              PAIR
              /* [ pair (list operation) unit ] */ }
            { DROP /* [] */ ; PUSH string "bang" /* [ string ] */ ; FAILWITH /* [] */ } } }
Well typed (Gas remaining: 1039941.741 units remaining)	michelson_test_scripts/mini_scenarios/generic_multisig.tz
{ parameter
    (or (unit %default)
        (pair %main
           (pair :payload
              (nat %counter)
              (or :action
                 (lambda %operation unit (list operation))
                 (pair %change_keys (nat %threshold) (list %keys key))))
           (list %sigs (option signature)))) ;
  storage (pair (nat %stored_counter) (pair (nat %threshold) (list %keys key))) ;
  code { UNPAIR
         /* [ or unit
               (pair (pair nat (or (lambda unit (list operation)) (pair nat (list key))))
                     (list (option signature))) : pair nat nat (list key) ] */ ;
         IF_LEFT
           { DROP
             /* [ pair nat nat (list key) ] */ ;
             NIL operation
             /* [ list operation : pair nat nat (list key) ] */ ;
             PAIR
             /* [ pair (list operation) nat nat (list key) ] */ }
           { PUSH mutez
                  0
             /* [ mutez
                : pair (pair nat (or (lambda unit (list operation)) (pair nat (list key))))
                     (list (option signature)) : pair nat nat (list key) ] */ ;
             AMOUNT
             /* [ mutez : mutez
                : pair (pair nat (or (lambda unit (list operation)) (pair nat (list key))))
                     (list (option signature)) : pair nat nat (list key) ] */ ;
             ASSERT_CMPEQ ;
             SWAP
             /* [ pair nat nat (list key)
                : pair (pair nat (or (lambda unit (list operation)) (pair nat (list key))))
                     (list (option signature)) ] */ ;
             DUP
             /* [ pair nat nat (list key) : pair nat nat (list key)
                : pair (pair nat (or (lambda unit (list operation)) (pair nat (list key))))
                     (list (option signature)) ] */ ;
             DIP { SWAP
                   /* [ pair (pair nat (or (lambda unit (list operation)) (pair nat (list key))))
                           (list (option signature)) : pair nat nat (list key) ] */ }
             /* [ pair nat nat (list key)
                : pair (pair nat (or (lambda unit (list operation)) (pair nat (list key))))
                     (list (option signature)) : pair nat nat (list key) ] */ ;
             DIP { UNPAIR
                   /* [ pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   DUP
                   /* [ pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   SELF
                   /* [ contract unit
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   ADDRESS
                   /* [ address
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   CHAIN_ID
                   /* [ chain_id : address
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   PAIR
                   /* [ pair chain_id address
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   PAIR
                   /* [ pair (pair chain_id address) nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   PACK
                   /* [ bytes : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   DIP { UNPAIR @counter
                         /* [ nat : or (lambda unit (list operation)) (pair nat (list key))
                            : list (option signature) : pair nat nat (list key) ] */ ;
                         DIP { SWAP
                               /* [ list (option signature)
                                  : or (lambda unit (list operation)) (pair nat (list key))
                                  : pair nat nat (list key) ] */ }
                         /* [ nat : list (option signature)
                            : or (lambda unit (list operation)) (pair nat (list key))
                            : pair nat nat (list key) ] */ }
                   /* [ bytes : nat : list (option signature)
                      : or (lambda unit (list operation)) (pair nat (list key))
                      : pair nat nat (list key) ] */ ;
                   SWAP
                   /* [ nat : bytes : list (option signature)
                      : or (lambda unit (list operation)) (pair nat (list key))
                      : pair nat nat (list key) ] */ }
             /* [ pair nat nat (list key) : nat : bytes : list (option signature)
                : or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             UNPAIR @stored_counter
             /* [ nat : pair nat (list key) : nat : bytes : list (option signature)
                : or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             DIP { SWAP
                   /* [ nat : pair nat (list key) : bytes : list (option signature)
                      : or (lambda unit (list operation)) (pair nat (list key))
                      : pair nat nat (list key) ] */ }
             /* [ nat : nat : pair nat (list key) : bytes : list (option signature)
                : or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             ASSERT_CMPEQ ;
             DIP { SWAP
                   /* [ list (option signature) : bytes
                      : or (lambda unit (list operation)) (pair nat (list key))
                      : pair nat nat (list key) ] */ }
             /* [ pair nat (list key) : list (option signature) : bytes
                : or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             UNPAIR @threshold @keys
             /* [ nat : list key : list (option signature) : bytes
                : or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             DIP { PUSH @valid
                     nat
                     0
                   /* [ nat : list key : list (option signature) : bytes
                      : or (lambda unit (list operation)) (pair nat (list key))
                      : pair nat nat (list key) ] */ ;
                   SWAP
                   /* [ list key : nat : list (option signature) : bytes
                      : or (lambda unit (list operation)) (pair nat (list key))
                      : pair nat nat (list key) ] */ ;
                   ITER { DIP { SWAP
                                /* [ list (option signature) : nat : bytes
                                   : or (lambda unit (list operation)) (pair nat (list key))
                                   : pair nat nat (list key) ] */ }
                          /* [ key : list (option signature) : nat : bytes
                             : or (lambda unit (list operation)) (pair nat (list key))
                             : pair nat nat (list key) ] */ ;
                          SWAP
                          /* [ list (option signature) : key : nat : bytes
                             : or (lambda unit (list operation)) (pair nat (list key))
                             : pair nat nat (list key) ] */ ;
                          IF_CONS
                            { IF_SOME
                                { SWAP
                                  /* [ list (option signature) : signature : key : nat : bytes
                                     : or (lambda unit (list operation)) (pair nat (list key))
                                     : pair nat nat (list key) ] */ ;
                                  DIP { SWAP
                                        /* [ key : signature : nat : bytes
                                           : or (lambda unit (list operation)) (pair nat (list key))
                                           : pair nat nat (list key) ] */ ;
                                        DIP 2
                                            { DUP 2
                                              /* [ bytes : nat : bytes
                                                 : or (lambda unit (list operation)) (pair nat (list key))
                                                 : pair nat nat (list key) ] */ }
                                        /* [ key : signature : bytes : nat : bytes
                                           : or (lambda unit (list operation)) (pair nat (list key))
                                           : pair nat nat (list key) ] */ ;
                                        { DUP 3
                                          /* [ bytes : key : signature : bytes : nat : bytes
                                             : or (lambda unit (list operation)) (pair nat (list key))
                                             : pair nat nat (list key) ] */ ;
                                          DIP { CHECK_SIGNATURE
                                                /* [ bool : nat : bytes
                                                   : or (lambda unit (list operation)) (pair nat (list key))
                                                   : pair nat nat (list key) ] */ }
                                          /* [ bytes : bool : nat : bytes
                                             : or (lambda unit (list operation)) (pair nat (list key))
                                             : pair nat nat (list key) ] */ ;
                                          SWAP
                                          /* [ bool : bytes : nat : bytes
                                             : or (lambda unit (list operation)) (pair nat (list key))
                                             : pair nat nat (list key) ] */ ;
                                          IF { DROP
                                               /* [ nat : bytes : or (lambda unit (list operation)) (pair nat (list key))
                                                  : pair nat nat (list key) ] */ }
                                             { FAILWITH /* [] */ } } ;
                                        PUSH nat
                                             1
                                        /* [ nat : nat : bytes : or (lambda unit (list operation)) (pair nat (list key))
                                           : pair nat nat (list key) ] */ ;
                                        ADD @valid
                                        /* [ nat : bytes : or (lambda unit (list operation)) (pair nat (list key))
                                           : pair nat nat (list key) ] */ }
                                  /* [ list (option signature) : nat : bytes
                                     : or (lambda unit (list operation)) (pair nat (list key))
                                     : pair nat nat (list key) ] */ }
                                { SWAP
                                  /* [ key : list (option signature) : nat : bytes
                                     : or (lambda unit (list operation)) (pair nat (list key))
                                     : pair nat nat (list key) ] */ ;
                                  DROP
                                  /* [ list (option signature) : nat : bytes
                                     : or (lambda unit (list operation)) (pair nat (list key))
                                     : pair nat nat (list key) ] */ } }
                            { FAIL } ;
                          SWAP
                          /* [ nat : list (option signature) : bytes
                             : or (lambda unit (list operation)) (pair nat (list key))
                             : pair nat nat (list key) ] */ }
                   /* [ nat : list (option signature) : bytes
                      : or (lambda unit (list operation)) (pair nat (list key))
                      : pair nat nat (list key) ] */ }
             /* [ nat : nat : list (option signature) : bytes
                : or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             ASSERT_CMPLE ;
             IF_CONS
               { FAIL }
               { /* [ bytes : or (lambda unit (list operation)) (pair nat (list key))
                    : pair nat nat (list key) ] */ } ;
             DROP
             /* [ or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             DIP { UNPAIR
                   /* [ nat : pair nat (list key) ] */ ;
                   PUSH nat 1
                   /* [ nat : nat : pair nat (list key) ] */ ;
                   ADD @new_counter
                   /* [ nat : pair nat (list key) ] */ ;
                   PAIR
                   /* [ pair nat nat (list key) ] */ }
             /* [ or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             IF_LEFT
               { UNIT
                 /* [ unit : lambda unit (list operation) : pair nat nat (list key) ] */ ;
                 EXEC
                 /* [ list operation : pair nat nat (list key) ] */ }
               { DIP { CAR /* [ nat ] */ }
                 /* [ pair nat (list key) : nat ] */ ;
                 SWAP
                 /* [ nat : pair nat (list key) ] */ ;
                 PAIR
                 /* [ pair nat nat (list key) ] */ ;
                 NIL operation
                 /* [ list operation : pair nat nat (list key) ] */ } ;
             PAIR
             /* [ pair (list operation) nat nat (list key) ] */ } } }
Well typed (Gas remaining: 1039536.611 units remaining)	michelson_test_scripts/mini_scenarios/groth16.tz
{ storage unit ;
  parameter
    (pair (pair (bls12_381_fr %input_x) (bls12_381_fr %input_y))
          (pair (pair (bls12_381_g1 %proof_a) (bls12_381_g2 %proof_b)) (bls12_381_g1 %proof_c))) ;
  code { CAR
         /* [ pair (pair bls12_381_fr bls12_381_fr) (pair bls12_381_g1 bls12_381_g2) bls12_381_g1 ] */ ;
         UNPPAIPPAIIR ;
         DIP 5
             { PUSH @vk_gamma_c
                 bls12_381_g1
                 0x063bd6e11e2fcaac1dd8cf68c6b1925a73c3c583e298ed37c41c3715115cf96358a42dbe85a0228cbfd8a6c8a8c54cd015b5ae2860d1cc47f84698d951f14d9448d03f04df2ca0ffe609a2067d6f1a892163a5e05e541279134cae52b1f23c6b
               /* [ bls12_381_g1 ] */ ;
               PUSH @vk_gamma_b
                 bls12_381_g1
                 0x11f5b5db1da7f1f26217edcce2219d016003af6e5b4d1ca3ad0ff477e354717e658bf16beddc4f4fb76ce39d3327811e0601709dc7ed98c70463cfa1ba33f99851b52b51d1a042d7425bec6277287441c399973632445ce61e7fdd63a70f0f60
               /* [ bls12_381_g1 : bls12_381_g1 ] */ ;
               PUSH @vk_gamma_a
                 bls12_381_g1
                 0x03535a322edd23c55b0ca025e54d450d95df49cc9ee873dcd500e8219f4771264bf159b3b105954d85c7bea8ffe1ea0400c767fe58989366c2837fba76f1b4f46644f19be8ad01e22d894b649e427e0d7e04677ee3919d982f0f96bb0a2f0c34
               /* [ bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
               PUSH @vk_delta
                 bls12_381_g2
                 0x10c6d5cdca84fc3c7f33061add256f48e0ab03a697832b338901898b650419eb6f334b28153fb73ad2ecd1cd2ac67053161e9f46cfbdaf7b1132a4654a55162850249650f9b873ac3113fa8c02ef1cd1df481480a4457f351d28f4da89d19fa405c3d77f686dc9a24d2681c9184bf2b091f62e6b24df651a3da8bd7067e14e7908fb02f8955b84af5081614cb5bc49b416d9edf914fc608c441b3f2eb8b6043736ddb9d4e4d62334a23b5625c14ef3e1a7e99258386310221b22d83a5eac035c
               /* [ bls12_381_g2 : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
               PUSH @vk_gamma
                 bls12_381_g2
                 0x16dcbd28bff336c2649c7dd1d8391ac7ce6f7ef0124a9db7a4a485a124199eded7ce963c1c18aee1eca9994fe06f192c00e0fb653e1fc737d8d0e2f2f91424ca01f6e6e7c5c04f1c43db03a2900cf6b942aaed6ae77daea6200e094b78c38d770028d531a9d1a118ec23d5a39be7aa6dc28f778da1988856d2235c4a35e81fa48380f050d4baf7ebd7b5e058bf294da916afc34562f097c02a8fcbcf62a00de44f8ae6cfa7acb8ad254e3aeea8b2af12f65b7ee0f54855cb9bd432f3436f238f
               /* [ bls12_381_g2 : bls12_381_g2 : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
               PUSH @vk_b
                 bls12_381_g2
                 0x0e9383f98df2c6e8b5b45f3876c3384596a0cdbc41349f83c4380bf463a050cdbd1d5057aa483a642e66486d1ed7362a1869e423c3877095e215c17282b11108601166f928043254bbce603bf86f4cec9f2e97e9660e98e4f5bce9b2b3bbacb40946b702ccfcc9a31e0bfc1543a2128edcc95807740a2310ae25eb47b935648e392c58dfae5b5e899d3b970d64e4e9e209741ea8bfedcfcc16b3fd890ff02c788ec0943feaaf01bbb354317acb85fcfd611133e4e563d53ca4e0f50e21cf2e7e
               /* [ bls12_381_g2 : bls12_381_g2 : bls12_381_g2 : bls12_381_g1 : bls12_381_g1
                  : bls12_381_g1 ] */ ;
               PUSH @vk_a
                 bls12_381_g1
                 0x1040577c7d349e332735fc947c868c24a665f812f5dc1e7f60e65e2df80be2267a4b7341ed2287285fccd517acd96d910abba947235c364553aa6445f2f2b3a1a728225a330286ba5197ab87f0edc560d89fc7b623812f7d0d633341726e597a
               /* [ bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2 : bls12_381_g1
                  : bls12_381_g1 : bls12_381_g1 ] */ }
         /* [ bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2 : bls12_381_g1
            : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2 : bls12_381_g1
            : bls12_381_g1 : bls12_381_g1 ] */ ;
         DUP
         /* [ bls12_381_fr : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         DUP 12
         /* [ bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_fr : bls12_381_g1
            : bls12_381_g2 : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g2 : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         MUL
         /* [ bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         DUP 3
         /* [ bls12_381_fr : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1
            : bls12_381_g2 : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g2 : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         DUP 14
         /* [ bls12_381_g1 : bls12_381_fr : bls12_381_g1 : bls12_381_fr : bls12_381_fr
            : bls12_381_g1 : bls12_381_g2 : bls12_381_g1 : bls12_381_g1 : bls12_381_g2
            : bls12_381_g2 : bls12_381_g2 : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         MUL
         /* [ bls12_381_g1 : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1
            : bls12_381_g2 : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g2 : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         ADD
         /* [ bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         DUP 11
         /* [ bls12_381_g1 : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1
            : bls12_381_g2 : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g2 : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         ADD @vk_x
         /* [ bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         NIL (pair bls12_381_g1 bls12_381_g2)
         /* [ list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g1 : bls12_381_fr
            : bls12_381_fr : bls12_381_g1 : bls12_381_g2 : bls12_381_g1 : bls12_381_g1
            : bls12_381_g2 : bls12_381_g2 : bls12_381_g2 : bls12_381_g1 : bls12_381_g1
            : bls12_381_g1 ] */ ;
         DUP 9
         /* [ bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g1
            : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2 : bls12_381_g1
            : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2 : bls12_381_g1
            : bls12_381_g1 : bls12_381_g1 ] */ ;
         DUP 9
         /* [ bls12_381_g1 : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2)
            : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         NEG
         /* [ bls12_381_g1 : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2)
            : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         PAIR
         /* [ pair bls12_381_g1 bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2)
            : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         CONS
         /* [ list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g1 : bls12_381_fr
            : bls12_381_fr : bls12_381_g1 : bls12_381_g2 : bls12_381_g1 : bls12_381_g1
            : bls12_381_g2 : bls12_381_g2 : bls12_381_g2 : bls12_381_g1 : bls12_381_g1
            : bls12_381_g1 ] */ ;
         DUP 11
         /* [ bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g1
            : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2 : bls12_381_g1
            : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2 : bls12_381_g1
            : bls12_381_g1 : bls12_381_g1 ] */ ;
         DUP 8
         /* [ bls12_381_g1 : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2)
            : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         NEG
         /* [ bls12_381_g1 : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2)
            : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         PAIR
         /* [ pair bls12_381_g1 bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2)
            : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         CONS
         /* [ list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g1 : bls12_381_fr
            : bls12_381_fr : bls12_381_g1 : bls12_381_g2 : bls12_381_g1 : bls12_381_g1
            : bls12_381_g2 : bls12_381_g2 : bls12_381_g2 : bls12_381_g1 : bls12_381_g1
            : bls12_381_g1 ] */ ;
         DUP 10
         /* [ bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g1
            : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2 : bls12_381_g1
            : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2 : bls12_381_g1
            : bls12_381_g1 : bls12_381_g1 ] */ ;
         DUP 3
         /* [ bls12_381_g1 : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2)
            : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         NEG
         /* [ bls12_381_g1 : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2)
            : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         PAIR
         /* [ pair bls12_381_g1 bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2)
            : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         CONS
         /* [ list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g1 : bls12_381_fr
            : bls12_381_fr : bls12_381_g1 : bls12_381_g2 : bls12_381_g1 : bls12_381_g1
            : bls12_381_g2 : bls12_381_g2 : bls12_381_g2 : bls12_381_g1 : bls12_381_g1
            : bls12_381_g1 ] */ ;
         DUP 6
         /* [ bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g1
            : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2 : bls12_381_g1
            : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2 : bls12_381_g1
            : bls12_381_g1 : bls12_381_g1 ] */ ;
         DUP 6
         /* [ bls12_381_g1 : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2)
            : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         PAIR
         /* [ pair bls12_381_g1 bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2)
            : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         CONS
         /* [ list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g1 : bls12_381_fr
            : bls12_381_fr : bls12_381_g1 : bls12_381_g2 : bls12_381_g1 : bls12_381_g1
            : bls12_381_g2 : bls12_381_g2 : bls12_381_g2 : bls12_381_g1 : bls12_381_g1
            : bls12_381_g1 ] */ ;
         PAIRING_CHECK
         /* [ bool : bls12_381_g1 : bls12_381_fr : bls12_381_fr : bls12_381_g1
            : bls12_381_g2 : bls12_381_g1 : bls12_381_g1 : bls12_381_g2 : bls12_381_g2
            : bls12_381_g2 : bls12_381_g1 : bls12_381_g1 : bls12_381_g1 ] */ ;
         ASSERT ;
         DROP 13
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039992.602 units remaining)	michelson_test_scripts/mini_scenarios/hardlimit.tz
{ parameter unit ;
  storage int ;
  code { CDR
         /* [ int ] */ ;
         DUP
         /* [ int : int ] */ ;
         PUSH int 0
         /* [ int : int : int ] */ ;
         CMPLT ;
         IF { PUSH int -1 /* [ int : int ] */ ; ADD /* [ int ] */ } { FAIL } ;
         NIL operation
         /* [ list operation : int ] */ ;
         PAIR
         /* [ pair (list operation) int ] */ } }
Well typed (Gas remaining: 1039991.478 units remaining)	michelson_test_scripts/mini_scenarios/large_error.tz
{ parameter int ;
  storage unit ;
  code { CAR
         /* [ int ] */ ;
         PUSH string "a"
         /* [ string : int ] */ ;
         SWAP
         /* [ int : string ] */ ;
         PUSH bool True
         /* [ bool : int : string ] */ ;
         LOOP { SWAP
                /* [ string : int ] */ ;
                DUP
                /* [ string : string : int ] */ ;
                CONCAT
                /* [ string : int ] */ ;
                SWAP
                /* [ int : string ] */ ;
                PUSH int -1
                /* [ int : int : string ] */ ;
                ADD
                /* [ int : string ] */ ;
                DUP
                /* [ int : int : string ] */ ;
                GT
                /* [ bool : int : string ] */ }
         /* [ int : string ] */ ;
         DROP
         /* [ string ] */ ;
         FAILWITH
         /* [] */ } }
Well typed (Gas remaining: 1035239.092 units remaining)	michelson_test_scripts/mini_scenarios/large_flat_contract.tz
{ parameter unit ;
  storage unit ;
  code { { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         { UNIT /* [ unit : pair unit unit ] */ ; DROP /* [ pair unit unit ] */ } ;
         CDR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1032048.446 units remaining)	michelson_test_scripts/mini_scenarios/large_str_id.tz
{ parameter (or int unit) ;
  storage (pair string string) ;
  code { UNPAIR
         /* [ or int unit : pair string string ] */ ;
         IF_LEFT
           { DIP 1 { UNPAIR /* [ string : string ] */ ; DROP /* [ string ] */ }
             /* [ int : string ] */ ;
             DUP
             /* [ int : int : string ] */ ;
             NEQ
             /* [ bool : int : string ] */ ;
             LOOP { SWAP
                    /* [ string : int ] */ ;
                    DUP
                    /* [ string : string : int ] */ ;
                    CONCAT
                    /* [ string : int ] */ ;
                    SWAP
                    /* [ int : string ] */ ;
                    PUSH int 1
                    /* [ int : int : string ] */ ;
                    SWAP
                    /* [ int : int : string ] */ ;
                    SUB
                    /* [ int : string ] */ ;
                    DUP
                    /* [ int : int : string ] */ ;
                    NEQ
                    /* [ bool : int : string ] */ }
             /* [ int : string ] */ ;
             DROP
             /* [ string ] */ ;
             DUP
             /* [ string : string ] */ ;
             PAIR
             /* [ pair string string ] */ }
           { DROP
             /* [ pair string string ] */ ;
             UNPAIR
             /* [ string : string ] */ ;
             DUP
             /* [ string : string : string ] */ ;
             DIP 1 { CONCAT /* [ string ] */ }
             /* [ string : string ] */ ;
             PAIR
             /* [ pair string string ] */ } ;
         NIL operation
         /* [ list operation : pair string string ] */ ;
         PAIR
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ ;
         DUP
         /* [ pair (list operation) string string : pair (list operation) string string ] */ ;
         DROP
         /* [ pair (list operation) string string ] */ } }
Well typed (Gas remaining: 1039945.396 units remaining)	michelson_test_scripts/mini_scenarios/legacy_multisig.tz
{ parameter
    (pair (pair :payload
             (nat %counter)
             (or :action
                (pair :transfer (mutez %amount) (contract %dest unit))
                (or (option %delegate key_hash)
                    (pair %change_keys (nat %threshold) (list %keys key)))))
          (list %sigs (option signature))) ;
  storage (pair (nat %stored_counter) (pair (nat %threshold) (list %keys key))) ;
  code { UNPAIR
         /* [ pair (pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))))
                 (list (option signature)) : pair nat nat (list key) ] */ ;
         SWAP
         /* [ pair nat nat (list key)
            : pair (pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))))
                 (list (option signature)) ] */ ;
         DUP
         /* [ pair nat nat (list key) : pair nat nat (list key)
            : pair (pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))))
                 (list (option signature)) ] */ ;
         DIP { SWAP
               /* [ pair (pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))))
                       (list (option signature)) : pair nat nat (list key) ] */ }
         /* [ pair nat nat (list key)
            : pair (pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))))
                 (list (option signature)) : pair nat nat (list key) ] */ ;
         DIP { UNPAIR
               /* [ pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key))))
                  : list (option signature) : pair nat nat (list key) ] */ ;
               DUP
               /* [ pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key))))
                  : pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key))))
                  : list (option signature) : pair nat nat (list key) ] */ ;
               SELF
               /* [ contract
                    (pair (pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))))
                          (list (option signature)))
                  : pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key))))
                  : pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key))))
                  : list (option signature) : pair nat nat (list key) ] */ ;
               ADDRESS
               /* [ address
                  : pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key))))
                  : pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key))))
                  : list (option signature) : pair nat nat (list key) ] */ ;
               CHAIN_ID
               /* [ chain_id : address
                  : pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key))))
                  : pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key))))
                  : list (option signature) : pair nat nat (list key) ] */ ;
               PAIR
               /* [ pair chain_id address
                  : pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key))))
                  : pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key))))
                  : list (option signature) : pair nat nat (list key) ] */ ;
               PAIR
               /* [ pair (pair chain_id address)
                       nat
                       (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key))))
                  : pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key))))
                  : list (option signature) : pair nat nat (list key) ] */ ;
               PACK
               /* [ bytes
                  : pair nat (or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key))))
                  : list (option signature) : pair nat nat (list key) ] */ ;
               DIP { UNPAIR @counter
                     /* [ nat
                        : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                        : list (option signature) : pair nat nat (list key) ] */ ;
                     DIP { SWAP
                           /* [ list (option signature)
                              : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                              : pair nat nat (list key) ] */ }
                     /* [ nat : list (option signature)
                        : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                        : pair nat nat (list key) ] */ }
               /* [ bytes : nat : list (option signature)
                  : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                  : pair nat nat (list key) ] */ ;
               SWAP
               /* [ nat : bytes : list (option signature)
                  : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                  : pair nat nat (list key) ] */ }
         /* [ pair nat nat (list key) : nat : bytes : list (option signature)
            : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
            : pair nat nat (list key) ] */ ;
         UNPAIR @stored_counter
         /* [ nat : pair nat (list key) : nat : bytes : list (option signature)
            : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
            : pair nat nat (list key) ] */ ;
         DIP { SWAP
               /* [ nat : pair nat (list key) : bytes : list (option signature)
                  : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                  : pair nat nat (list key) ] */ }
         /* [ nat : nat : pair nat (list key) : bytes : list (option signature)
            : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
            : pair nat nat (list key) ] */ ;
         ASSERT_CMPEQ ;
         DIP { SWAP
               /* [ list (option signature) : bytes
                  : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                  : pair nat nat (list key) ] */ }
         /* [ pair nat (list key) : list (option signature) : bytes
            : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
            : pair nat nat (list key) ] */ ;
         UNPAIR @threshold @keys
         /* [ nat : list key : list (option signature) : bytes
            : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
            : pair nat nat (list key) ] */ ;
         DIP { PUSH @valid
                 nat
                 0
               /* [ nat : list key : list (option signature) : bytes
                  : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                  : pair nat nat (list key) ] */ ;
               SWAP
               /* [ list key : nat : list (option signature) : bytes
                  : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                  : pair nat nat (list key) ] */ ;
               ITER { DIP { SWAP
                            /* [ list (option signature) : nat : bytes
                               : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                               : pair nat nat (list key) ] */ }
                      /* [ key : list (option signature) : nat : bytes
                         : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                         : pair nat nat (list key) ] */ ;
                      SWAP
                      /* [ list (option signature) : key : nat : bytes
                         : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                         : pair nat nat (list key) ] */ ;
                      IF_CONS
                        { IF_SOME
                            { SWAP
                              /* [ list (option signature) : signature : key : nat : bytes
                                 : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                                 : pair nat nat (list key) ] */ ;
                              DIP { SWAP
                                    /* [ key : signature : nat : bytes
                                       : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                                       : pair nat nat (list key) ] */ ;
                                    DIP 2
                                        { DUP 2
                                          /* [ bytes : nat : bytes
                                             : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                                             : pair nat nat (list key) ] */ }
                                    /* [ key : signature : bytes : nat : bytes
                                       : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                                       : pair nat nat (list key) ] */ ;
                                    { DUP 3
                                      /* [ bytes : key : signature : bytes : nat : bytes
                                         : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                                         : pair nat nat (list key) ] */ ;
                                      DIP { CHECK_SIGNATURE
                                            /* [ bool : nat : bytes
                                               : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                                               : pair nat nat (list key) ] */ }
                                      /* [ bytes : bool : nat : bytes
                                         : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                                         : pair nat nat (list key) ] */ ;
                                      SWAP
                                      /* [ bool : bytes : nat : bytes
                                         : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                                         : pair nat nat (list key) ] */ ;
                                      IF { DROP
                                           /* [ nat : bytes
                                              : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                                              : pair nat nat (list key) ] */ }
                                         { FAILWITH /* [] */ } } ;
                                    PUSH nat
                                         1
                                    /* [ nat : nat : bytes
                                       : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                                       : pair nat nat (list key) ] */ ;
                                    ADD @valid
                                    /* [ nat : bytes
                                       : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                                       : pair nat nat (list key) ] */ }
                              /* [ list (option signature) : nat : bytes
                                 : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                                 : pair nat nat (list key) ] */ }
                            { SWAP
                              /* [ key : list (option signature) : nat : bytes
                                 : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                                 : pair nat nat (list key) ] */ ;
                              DROP
                              /* [ list (option signature) : nat : bytes
                                 : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                                 : pair nat nat (list key) ] */ } }
                        { FAIL } ;
                      SWAP
                      /* [ nat : list (option signature) : bytes
                         : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                         : pair nat nat (list key) ] */ }
               /* [ nat : list (option signature) : bytes
                  : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
                  : pair nat nat (list key) ] */ }
         /* [ nat : nat : list (option signature) : bytes
            : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
            : pair nat nat (list key) ] */ ;
         ASSERT_CMPLE ;
         DROP
         /* [ bytes
            : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
            : pair nat nat (list key) ] */ ;
         DROP
         /* [ or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
            : pair nat nat (list key) ] */ ;
         DIP { UNPAIR
               /* [ nat : pair nat (list key) ] */ ;
               PUSH nat 1
               /* [ nat : nat : pair nat (list key) ] */ ;
               ADD @new_counter
               /* [ nat : pair nat (list key) ] */ ;
               PAIR
               /* [ pair nat nat (list key) ] */ }
         /* [ or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
            : pair nat nat (list key) ] */ ;
         NIL operation
         /* [ list operation
            : or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
            : pair nat nat (list key) ] */ ;
         SWAP
         /* [ or (pair mutez (contract unit)) (or (option key_hash) (pair nat (list key)))
            : list operation : pair nat nat (list key) ] */ ;
         IF_LEFT
           { UNPAIR
             /* [ mutez : contract unit : list operation : pair nat nat (list key) ] */ ;
             UNIT
             /* [ unit : mutez : contract unit : list operation : pair nat nat (list key) ] */ ;
             TRANSFER_TOKENS
             /* [ operation : list operation : pair nat nat (list key) ] */ ;
             CONS
             /* [ list operation : pair nat nat (list key) ] */ }
           { IF_LEFT
               { SET_DELEGATE
                 /* [ operation : list operation : pair nat nat (list key) ] */ ;
                 CONS
                 /* [ list operation : pair nat nat (list key) ] */ }
               { DIP { SWAP
                       /* [ pair nat nat (list key) : list operation ] */ ;
                       CAR
                       /* [ nat : list operation ] */ }
                 /* [ pair nat (list key) : nat : list operation ] */ ;
                 SWAP
                 /* [ nat : pair nat (list key) : list operation ] */ ;
                 PAIR
                 /* [ pair nat nat (list key) : list operation ] */ ;
                 SWAP
                 /* [ list operation : pair nat nat (list key) ] */ } } ;
         PAIR
         /* [ pair (list operation) nat nat (list key) ] */ } }
Well typed (Gas remaining: 1039983.350 units remaining)	michelson_test_scripts/mini_scenarios/lockup.tz
{ parameter unit ;
  storage (pair timestamp (pair mutez address)) ;
  code { CDR
         /* [ pair timestamp mutez address ] */ ;
         DUP
         /* [ pair timestamp mutez address : pair timestamp mutez address ] */ ;
         CAR
         /* [ timestamp : pair timestamp mutez address ] */ ;
         NOW
         /* [ timestamp : timestamp : pair timestamp mutez address ] */ ;
         CMPLT ;
         IF { FAIL } { /* [ pair timestamp mutez address ] */ } ;
         DUP
         /* [ pair timestamp mutez address : pair timestamp mutez address ] */ ;
         CDR
         /* [ pair mutez address : pair timestamp mutez address ] */ ;
         DUP
         /* [ pair mutez address : pair mutez address : pair timestamp mutez address ] */ ;
         CAR
         /* [ mutez : pair mutez address : pair timestamp mutez address ] */ ;
         DIP { CDR /* [ address : pair timestamp mutez address ] */ }
         /* [ mutez : address : pair timestamp mutez address ] */ ;
         DIP { CONTRACT unit
               /* [ option (contract unit) : pair timestamp mutez address ] */ ;
               ASSERT_SOME }
         /* [ mutez : contract unit : pair timestamp mutez address ] */ ;
         UNIT
         /* [ unit : mutez : contract unit : pair timestamp mutez address ] */ ;
         TRANSFER_TOKENS
         /* [ operation : pair timestamp mutez address ] */ ;
         NIL operation
         /* [ list operation : operation : pair timestamp mutez address ] */ ;
         SWAP
         /* [ operation : list operation : pair timestamp mutez address ] */ ;
         CONS
         /* [ list operation : pair timestamp mutez address ] */ ;
         PAIR
         /* [ pair (list operation) timestamp mutez address ] */ } }
Well typed (Gas remaining: 1039992.719 units remaining)	michelson_test_scripts/mini_scenarios/loop.tz
{ parameter int ;
  storage unit ;
  code { CAR
         /* [ int ] */ ;
         DUP
         /* [ int : int ] */ ;
         GT
         /* [ bool : int ] */ ;
         LOOP { PUSH int 1
                /* [ int : int ] */ ;
                SWAP
                /* [ int : int ] */ ;
                SUB
                /* [ int ] */ ;
                DUP
                /* [ int : int ] */ ;
                GT
                /* [ bool : int ] */ }
         /* [ int ] */ ;
         DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039751.719 units remaining)	michelson_test_scripts/mini_scenarios/lqt_fa12.mligo.tz
{ parameter
    (or (or (or (pair %approve (address %spender) (nat %value))
                (pair %getAllowance
                   (pair %request (address %owner) (address %spender))
                   (contract %callback nat)))
            (or (pair %getBalance (address %owner) (contract %callback nat))
                (pair %getTotalSupply (unit %request) (contract %callback nat))))
        (or (pair %mintOrBurn (int %quantity) (address %target))
            (pair %transfer (address %from) (pair (address %to) (nat %value))))) ;
  storage
    (pair (big_map %tokens address nat)
          (pair (big_map %allowances (pair (address %owner) (address %spender)) nat)
                (pair (address %admin) (nat %total_supply)))) ;
  code { DUP
         /* [ pair (or (or (or (pair address nat) (pair (pair address address) (contract nat)))
                         (or (pair address (contract nat)) (pair unit (contract nat))))
                     (or (pair int address) (pair address address nat)))
                 (big_map address nat)
                 (big_map (pair address address) nat)
                 address
                 nat
            : pair (or (or (or (pair address nat) (pair (pair address address) (contract nat)))
                         (or (pair address (contract nat)) (pair unit (contract nat))))
                     (or (pair int address) (pair address address nat)))
                 (big_map address nat)
                 (big_map (pair address address) nat)
                 address
                 nat ] */ ;
         CDR
         /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
            : pair (or (or (or (pair address nat) (pair (pair address address) (contract nat)))
                         (or (pair address (contract nat)) (pair unit (contract nat))))
                     (or (pair int address) (pair address address nat)))
                 (big_map address nat)
                 (big_map (pair address address) nat)
                 address
                 nat ] */ ;
         PUSH mutez
              0
         /* [ mutez
            : pair (big_map address nat) (big_map (pair address address) nat) address nat
            : pair (or (or (or (pair address nat) (pair (pair address address) (contract nat)))
                         (or (pair address (contract nat)) (pair unit (contract nat))))
                     (or (pair int address) (pair address address nat)))
                 (big_map address nat)
                 (big_map (pair address address) nat)
                 address
                 nat ] */ ;
         AMOUNT
         /* [ mutez : mutez
            : pair (big_map address nat) (big_map (pair address address) nat) address nat
            : pair (or (or (or (pair address nat) (pair (pair address address) (contract nat)))
                         (or (pair address (contract nat)) (pair unit (contract nat))))
                     (or (pair int address) (pair address address nat)))
                 (big_map address nat)
                 (big_map (pair address address) nat)
                 address
                 nat ] */ ;
         COMPARE
         /* [ int
            : pair (big_map address nat) (big_map (pair address address) nat) address nat
            : pair (or (or (or (pair address nat) (pair (pair address address) (contract nat)))
                         (or (pair address (contract nat)) (pair unit (contract nat))))
                     (or (pair int address) (pair address address nat)))
                 (big_map address nat)
                 (big_map (pair address address) nat)
                 address
                 nat ] */ ;
         NEQ
         /* [ bool
            : pair (big_map address nat) (big_map (pair address address) nat) address nat
            : pair (or (or (or (pair address nat) (pair (pair address address) (contract nat)))
                         (or (pair address (contract nat)) (pair unit (contract nat))))
                     (or (pair int address) (pair address address nat)))
                 (big_map address nat)
                 (big_map (pair address address) nat)
                 address
                 nat ] */ ;
         IF { PUSH string
                   "DontSendTez"
              /* [ string
                 : pair (big_map address nat) (big_map (pair address address) nat) address nat
                 : pair (or (or (or (pair address nat) (pair (pair address address) (contract nat)))
                              (or (pair address (contract nat)) (pair unit (contract nat))))
                          (or (pair int address) (pair address address nat)))
                      (big_map address nat)
                      (big_map (pair address address) nat)
                      address
                      nat ] */ ;
              FAILWITH
              /* [] */ }
            { /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                 : pair (or (or (or (pair address nat) (pair (pair address address) (contract nat)))
                              (or (pair address (contract nat)) (pair unit (contract nat))))
                          (or (pair int address) (pair address address nat)))
                      (big_map address nat)
                      (big_map (pair address address) nat)
                      address
                      nat ] */ } ;
         SWAP
         /* [ pair (or (or (or (pair address nat) (pair (pair address address) (contract nat)))
                         (or (pair address (contract nat)) (pair unit (contract nat))))
                     (or (pair int address) (pair address address nat)))
                 (big_map address nat)
                 (big_map (pair address address) nat)
                 address
                 nat
            : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
         CAR
         /* [ or (or (or (pair address nat) (pair (pair address address) (contract nat)))
                   (or (pair address (contract nat)) (pair unit (contract nat))))
               (or (pair int address) (pair address address nat))
            : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { SWAP
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair address nat ] */ ;
                     DUP
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair address nat ] */ ;
                     DUG 2
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CDR
                     /* [ pair (big_map (pair address address) nat) address nat : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CAR
                     /* [ big_map (pair address address) nat : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     SWAP
                     /* [ pair address nat : big_map (pair address address) nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DUP
                     /* [ pair address nat : pair address nat : big_map (pair address address) nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DUG 2
                     /* [ pair address nat : big_map (pair address address) nat : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CAR
                     /* [ address : big_map (pair address address) nat : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     SENDER
                     /* [ address : address : big_map (pair address address) nat : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     PAIR
                     /* [ pair address address : big_map (pair address address) nat
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     PUSH nat
                          0
                     /* [ nat : pair address address : big_map (pair address address) nat
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DIG 3
                     /* [ pair address nat : nat : pair address address
                        : big_map (pair address address) nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DUP
                     /* [ pair address nat : pair address nat : nat : pair address address
                        : big_map (pair address address) nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DUG 4
                     /* [ pair address nat : nat : pair address address
                        : big_map (pair address address) nat : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CDR
                     /* [ nat : nat : pair address address : big_map (pair address address) nat
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     COMPARE
                     /* [ int : pair address address : big_map (pair address address) nat
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     GT
                     /* [ bool : pair address address : big_map (pair address address) nat
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     PUSH nat
                          0
                     /* [ nat : bool : pair address address : big_map (pair address address) nat
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DIG 3
                     /* [ big_map (pair address address) nat : nat : bool : pair address address
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DUP
                     /* [ big_map (pair address address) nat : big_map (pair address address) nat
                        : nat : bool : pair address address : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DUG 4
                     /* [ big_map (pair address address) nat : nat : bool : pair address address
                        : big_map (pair address address) nat : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DIG 3
                     /* [ pair address address : big_map (pair address address) nat : nat : bool
                        : big_map (pair address address) nat : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DUP
                     /* [ pair address address : pair address address
                        : big_map (pair address address) nat : nat : bool
                        : big_map (pair address address) nat : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DUG 4
                     /* [ pair address address : big_map (pair address address) nat : nat : bool
                        : pair address address : big_map (pair address address) nat
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     GET
                     /* [ option nat : nat : bool : pair address address
                        : big_map (pair address address) nat : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     IF_NONE
                       { PUSH nat
                              0
                         /* [ nat : nat : bool : pair address address
                            : big_map (pair address address) nat : pair address nat
                            : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ }
                       { /* [ nat : nat : bool : pair address address
                            : big_map (pair address address) nat : pair address nat
                            : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                     COMPARE
                     /* [ int : bool : pair address address : big_map (pair address address) nat
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     GT
                     /* [ bool : bool : pair address address : big_map (pair address address) nat
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     AND
                     /* [ bool : pair address address : big_map (pair address address) nat
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     IF { PUSH string
                               "UnsafeAllowanceChange"
                          /* [ string : pair address address : big_map (pair address address) nat
                             : pair address nat
                             : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                          FAILWITH
                          /* [] */ }
                        { /* [ pair address address : big_map (pair address address) nat
                             : pair address nat
                             : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                     DIG 3
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair address address : big_map (pair address address) nat
                        : pair address nat ] */ ;
                     DUP
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair address address : big_map (pair address address) nat
                        : pair address nat ] */ ;
                     DUG 4
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair address address : big_map (pair address address) nat
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CDR
                     /* [ pair (big_map (pair address address) nat) address nat
                        : pair address address : big_map (pair address address) nat
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CDR
                     /* [ pair address nat : pair address address
                        : big_map (pair address address) nat : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DIG 2
                     /* [ big_map (pair address address) nat : pair address nat
                        : pair address address : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DIG 3
                     /* [ pair address nat : big_map (pair address address) nat : pair address nat
                        : pair address address
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CDR
                     /* [ nat : big_map (pair address address) nat : pair address nat
                        : pair address address
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     PUSH nat
                          0
                     /* [ nat : nat : big_map (pair address address) nat : pair address nat
                        : pair address address
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     SWAP
                     /* [ nat : nat : big_map (pair address address) nat : pair address nat
                        : pair address address
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DUP
                     /* [ nat : nat : nat : big_map (pair address address) nat : pair address nat
                        : pair address address
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DUG 2
                     /* [ nat : nat : nat : big_map (pair address address) nat : pair address nat
                        : pair address address
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     COMPARE
                     /* [ int : nat : big_map (pair address address) nat : pair address nat
                        : pair address address
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     EQ
                     /* [ bool : nat : big_map (pair address address) nat : pair address nat
                        : pair address address
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     IF { DROP
                          /* [ big_map (pair address address) nat : pair address nat
                             : pair address address
                             : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                          NONE nat
                          /* [ option nat : big_map (pair address address) nat : pair address nat
                             : pair address address
                             : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ }
                        { SOME
                          /* [ option nat : big_map (pair address address) nat : pair address nat
                             : pair address address
                             : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                     DIG 3
                     /* [ pair address address : option nat : big_map (pair address address) nat
                        : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     UPDATE
                     /* [ big_map (pair address address) nat : pair address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     PAIR
                     /* [ pair (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     SWAP
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map (pair address address) nat) address nat ] */ ;
                     CAR
                     /* [ big_map address nat
                        : pair (big_map (pair address address) nat) address nat ] */ ;
                     PAIR
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     NIL operation
                     /* [ list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     PAIR
                     /* [ pair (list operation)
                             (big_map address nat)
                             (big_map (pair address address) nat)
                             address
                             nat ] */ }
                   { SWAP
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (pair address address) (contract nat) ] */ ;
                     DUP
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (pair address address) (contract nat) ] */ ;
                     DIG 2
                     /* [ pair (pair address address) (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     NIL operation
                     /* [ list operation : pair (pair address address) (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     SWAP
                     /* [ pair (pair address address) (contract nat) : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DUP
                     /* [ pair (pair address address) (contract nat)
                        : pair (pair address address) (contract nat) : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DUG 2
                     /* [ pair (pair address address) (contract nat) : list operation
                        : pair (pair address address) (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CDR
                     /* [ contract nat : list operation : pair (pair address address) (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     PUSH mutez
                          0
                     /* [ mutez : contract nat : list operation
                        : pair (pair address address) (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DIG 4
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : mutez : contract nat : list operation
                        : pair (pair address address) (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CDR
                     /* [ pair (big_map (pair address address) nat) address nat : mutez
                        : contract nat : list operation : pair (pair address address) (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CAR
                     /* [ big_map (pair address address) nat : mutez : contract nat : list operation
                        : pair (pair address address) (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DIG 4
                     /* [ pair (pair address address) (contract nat)
                        : big_map (pair address address) nat : mutez : contract nat : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CAR
                     /* [ pair address address : big_map (pair address address) nat : mutez
                        : contract nat : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     GET
                     /* [ option nat : mutez : contract nat : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     IF_NONE
                       { PUSH nat
                              0
                         /* [ nat : mutez : contract nat : list operation
                            : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ }
                       { /* [ nat : mutez : contract nat : list operation
                            : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                     TRANSFER_TOKENS
                     /* [ operation : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CONS
                     /* [ list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     PAIR
                     /* [ pair (list operation)
                             (big_map address nat)
                             (big_map (pair address address) nat)
                             address
                             nat ] */ } }
               { IF_LEFT
                   { SWAP
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair address (contract nat) ] */ ;
                     DUP
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair address (contract nat) ] */ ;
                     DIG 2
                     /* [ pair address (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     NIL operation
                     /* [ list operation : pair address (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     SWAP
                     /* [ pair address (contract nat) : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DUP
                     /* [ pair address (contract nat) : pair address (contract nat) : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DUG 2
                     /* [ pair address (contract nat) : list operation : pair address (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CDR
                     /* [ contract nat : list operation : pair address (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     PUSH mutez
                          0
                     /* [ mutez : contract nat : list operation : pair address (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DIG 4
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : mutez : contract nat : list operation : pair address (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CAR
                     /* [ big_map address nat : mutez : contract nat : list operation
                        : pair address (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DIG 4
                     /* [ pair address (contract nat) : big_map address nat : mutez : contract nat
                        : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CAR
                     /* [ address : big_map address nat : mutez : contract nat : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     GET
                     /* [ option nat : mutez : contract nat : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     IF_NONE
                       { PUSH nat
                              0
                         /* [ nat : mutez : contract nat : list operation
                            : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ }
                       { /* [ nat : mutez : contract nat : list operation
                            : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                     TRANSFER_TOKENS
                     /* [ operation : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CONS
                     /* [ list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     PAIR
                     /* [ pair (list operation)
                             (big_map address nat)
                             (big_map (pair address address) nat)
                             address
                             nat ] */ }
                   { SWAP
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair unit (contract nat) ] */ ;
                     DUP
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair unit (contract nat) ] */ ;
                     DIG 2
                     /* [ pair unit (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     NIL operation
                     /* [ list operation : pair unit (contract nat)
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     SWAP
                     /* [ pair unit (contract nat) : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CDR
                     /* [ contract nat : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     PUSH mutez
                          0
                     /* [ mutez : contract nat : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     DIG 3
                     /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                        : mutez : contract nat : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CDR
                     /* [ pair (big_map (pair address address) nat) address nat : mutez
                        : contract nat : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CDR
                     /* [ pair address nat : mutez : contract nat : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CDR
                     /* [ nat : mutez : contract nat : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     TRANSFER_TOKENS
                     /* [ operation : list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     CONS
                     /* [ list operation
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     PAIR
                     /* [ pair (list operation)
                             (big_map address nat)
                             (big_map (pair address address) nat)
                             address
                             nat ] */ } } }
           { IF_LEFT
               { SWAP
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair int address ] */ ;
                 DUP
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair int address ] */ ;
                 DUG 2
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ pair (big_map (pair address address) nat) address nat : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ pair address nat : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ address : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 SENDER
                 /* [ address : address : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 COMPARE
                 /* [ int : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 NEQ
                 /* [ bool : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 IF { PUSH string
                           "OnlyAdmin"
                      /* [ string : pair int address
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      FAILWITH
                      /* [] */ }
                    { /* [ pair int address
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                 DUP
                 /* [ pair int address : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ int : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DIG 2
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : int : pair int address ] */ ;
                 DUP
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : int : pair int address ] */ ;
                 DUG 3
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : int : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ big_map address nat : int : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DIG 2
                 /* [ pair int address : big_map address nat : int
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUP
                 /* [ pair int address : pair int address : big_map address nat : int
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUG 3
                 /* [ pair int address : big_map address nat : int : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ address : big_map address nat : int : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 GET
                 /* [ option nat : int : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 IF_NONE
                   { PUSH nat
                          0
                     /* [ nat : int : pair int address
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ }
                   { /* [ nat : int : pair int address
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                 ADD
                 /* [ int : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 ISNAT
                 /* [ option nat : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 IF_NONE
                   { PUSH string
                          "Cannot burn more than the target's balance."
                     /* [ string : pair int address
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     FAILWITH
                     /* [] */ }
                   { /* [ nat : pair int address
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                 SWAP
                 /* [ pair int address : nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUP
                 /* [ pair int address : pair int address : nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUG 2
                 /* [ pair int address : nat : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ int : nat : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DIG 3
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : int : nat : pair int address ] */ ;
                 DUP
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : int : nat : pair int address ] */ ;
                 DUG 4
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : int : nat : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ pair (big_map (pair address address) nat) address nat : int : nat
                    : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ pair address nat : int : nat : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ nat : int : nat : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 ADD
                 /* [ int : nat : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 ABS
                 /* [ nat : nat : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DIG 3
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : nat : nat : pair int address ] */ ;
                 DUP
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : nat : nat : pair int address ] */ ;
                 DUG 4
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : nat : nat : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ pair (big_map (pair address address) nat) address nat : nat : nat
                    : pair int address
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DIG 4
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair (big_map (pair address address) nat) address nat : nat : nat
                    : pair int address ] */ ;
                 CAR
                 /* [ big_map address nat : pair (big_map (pair address address) nat) address nat
                    : nat : nat : pair int address ] */ ;
                 PUSH nat
                      0
                 /* [ nat : big_map address nat
                    : pair (big_map (pair address address) nat) address nat : nat : nat
                    : pair int address ] */ ;
                 DIG 4
                 /* [ nat : nat : big_map address nat
                    : pair (big_map (pair address address) nat) address nat : nat
                    : pair int address ] */ ;
                 DUP
                 /* [ nat : nat : nat : big_map address nat
                    : pair (big_map (pair address address) nat) address nat : nat
                    : pair int address ] */ ;
                 DUG 5
                 /* [ nat : nat : big_map address nat
                    : pair (big_map (pair address address) nat) address nat : nat : nat
                    : pair int address ] */ ;
                 COMPARE
                 /* [ int : big_map address nat
                    : pair (big_map (pair address address) nat) address nat : nat : nat
                    : pair int address ] */ ;
                 EQ
                 /* [ bool : big_map address nat
                    : pair (big_map (pair address address) nat) address nat : nat : nat
                    : pair int address ] */ ;
                 IF { DIG 3
                      /* [ nat : big_map address nat
                         : pair (big_map (pair address address) nat) address nat : nat
                         : pair int address ] */ ;
                      DROP
                      /* [ big_map address nat : pair (big_map (pair address address) nat) address nat
                         : nat : pair int address ] */ ;
                      NONE nat
                      /* [ option nat : big_map address nat
                         : pair (big_map (pair address address) nat) address nat : nat
                         : pair int address ] */ }
                    { DIG 3
                      /* [ nat : big_map address nat
                         : pair (big_map (pair address address) nat) address nat : nat
                         : pair int address ] */ ;
                      SOME
                      /* [ option nat : big_map address nat
                         : pair (big_map (pair address address) nat) address nat : nat
                         : pair int address ] */ } ;
                 DIG 4
                 /* [ pair int address : option nat : big_map address nat
                    : pair (big_map (pair address address) nat) address nat : nat ] */ ;
                 CDR
                 /* [ address : option nat : big_map address nat
                    : pair (big_map (pair address address) nat) address nat : nat ] */ ;
                 UPDATE
                 /* [ big_map address nat : pair (big_map (pair address address) nat) address nat
                    : nat ] */ ;
                 PAIR
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : nat ] */ ;
                 DUP
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : nat ] */ ;
                 DUG 2
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ pair (big_map (pair address address) nat) address nat : nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ pair address nat : nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ address : nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 PAIR
                 /* [ pair address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 SWAP
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair address nat ] */ ;
                 DUP
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair address nat ] */ ;
                 DUG 2
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ pair (big_map (pair address address) nat) address nat : pair address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ big_map (pair address address) nat : pair address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 PAIR
                 /* [ pair (big_map (pair address address) nat) address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 SWAP
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ big_map address nat
                    : pair (big_map (pair address address) nat) address nat ] */ ;
                 PAIR
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 NIL operation
                 /* [ list operation
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 PAIR
                 /* [ pair (list operation)
                         (big_map address nat)
                         (big_map (pair address address) nat)
                         address
                         nat ] */ }
               { SWAP
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair address address nat ] */ ;
                 DUP
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair address address nat ] */ ;
                 DUG 2
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ pair (big_map (pair address address) nat) address nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ big_map (pair address address) nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DIG 2
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : big_map (pair address address) nat : pair address address nat ] */ ;
                 DUP
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : big_map (pair address address) nat : pair address address nat ] */ ;
                 DUG 3
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : big_map (pair address address) nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ big_map address nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DIG 2
                 /* [ pair address address nat : big_map address nat
                    : big_map (pair address address) nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUP
                 /* [ pair address address nat : pair address address nat : big_map address nat
                    : big_map (pair address address) nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUG 3
                 /* [ pair address address nat : big_map address nat
                    : big_map (pair address address) nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ address : big_map address nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 SENDER
                 /* [ address : address : big_map address nat
                    : big_map (pair address address) nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 COMPARE
                 /* [ int : big_map address nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 EQ
                 /* [ bool : big_map address nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 IF { SWAP
                      /* [ big_map (pair address address) nat : big_map address nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ }
                    { SENDER
                      /* [ address : big_map address nat : big_map (pair address address) nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DIG 3
                      /* [ pair address address nat : address : big_map address nat
                         : big_map (pair address address) nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DUP
                      /* [ pair address address nat : pair address address nat : address
                         : big_map address nat : big_map (pair address address) nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DUG 4
                      /* [ pair address address nat : address : big_map address nat
                         : big_map (pair address address) nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      CAR
                      /* [ address : address : big_map address nat
                         : big_map (pair address address) nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      PAIR
                      /* [ pair address address : big_map address nat
                         : big_map (pair address address) nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DIG 3
                      /* [ pair address address nat : pair address address : big_map address nat
                         : big_map (pair address address) nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DUP
                      /* [ pair address address nat : pair address address nat : pair address address
                         : big_map address nat : big_map (pair address address) nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DUG 4
                      /* [ pair address address nat : pair address address : big_map address nat
                         : big_map (pair address address) nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      CDR
                      /* [ pair address nat : pair address address : big_map address nat
                         : big_map (pair address address) nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      CDR
                      /* [ nat : pair address address : big_map address nat
                         : big_map (pair address address) nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DIG 3
                      /* [ big_map (pair address address) nat : nat : pair address address
                         : big_map address nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DUP
                      /* [ big_map (pair address address) nat : big_map (pair address address) nat
                         : nat : pair address address : big_map address nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DUG 4
                      /* [ big_map (pair address address) nat : nat : pair address address
                         : big_map address nat : big_map (pair address address) nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DIG 2
                      /* [ pair address address : big_map (pair address address) nat : nat
                         : big_map address nat : big_map (pair address address) nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DUP
                      /* [ pair address address : pair address address
                         : big_map (pair address address) nat : nat : big_map address nat
                         : big_map (pair address address) nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DUG 3
                      /* [ pair address address : big_map (pair address address) nat : nat
                         : pair address address : big_map address nat
                         : big_map (pair address address) nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      GET
                      /* [ option nat : nat : pair address address : big_map address nat
                         : big_map (pair address address) nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      IF_NONE
                        { PUSH nat
                               0
                          /* [ nat : nat : pair address address : big_map address nat
                             : big_map (pair address address) nat : pair address address nat
                             : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ }
                        { /* [ nat : nat : pair address address : big_map address nat
                             : big_map (pair address address) nat : pair address address nat
                             : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                      SUB
                      /* [ int : pair address address : big_map address nat
                         : big_map (pair address address) nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      ISNAT
                      /* [ option nat : pair address address : big_map address nat
                         : big_map (pair address address) nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      IF_NONE
                        { PUSH string
                               "NotEnoughAllowance"
                          /* [ string : pair address address : big_map address nat
                             : big_map (pair address address) nat : pair address address nat
                             : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                          FAILWITH
                          /* [] */ }
                        { /* [ nat : pair address address : big_map address nat
                             : big_map (pair address address) nat : pair address address nat
                             : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                      DIG 3
                      /* [ big_map (pair address address) nat : nat : pair address address
                         : big_map address nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      PUSH nat
                           0
                      /* [ nat : big_map (pair address address) nat : nat : pair address address
                         : big_map address nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DIG 2
                      /* [ nat : nat : big_map (pair address address) nat : pair address address
                         : big_map address nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DUP
                      /* [ nat : nat : nat : big_map (pair address address) nat : pair address address
                         : big_map address nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DUG 3
                      /* [ nat : nat : big_map (pair address address) nat : nat : pair address address
                         : big_map address nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      COMPARE
                      /* [ int : big_map (pair address address) nat : nat : pair address address
                         : big_map address nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      EQ
                      /* [ bool : big_map (pair address address) nat : nat : pair address address
                         : big_map address nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      IF { SWAP
                           /* [ nat : big_map (pair address address) nat : pair address address
                              : big_map address nat : pair address address nat
                              : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                           DROP
                           /* [ big_map (pair address address) nat : pair address address
                              : big_map address nat : pair address address nat
                              : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                           NONE nat
                           /* [ option nat : big_map (pair address address) nat : pair address address
                              : big_map address nat : pair address address nat
                              : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ }
                         { SWAP
                           /* [ nat : big_map (pair address address) nat : pair address address
                              : big_map address nat : pair address address nat
                              : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                           SOME
                           /* [ option nat : big_map (pair address address) nat : pair address address
                              : big_map address nat : pair address address nat
                              : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                      DIG 2
                      /* [ pair address address : option nat : big_map (pair address address) nat
                         : big_map address nat : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      UPDATE
                      /* [ big_map (pair address address) nat : big_map address nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                 DIG 2
                 /* [ pair address address nat : big_map (pair address address) nat
                    : big_map address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUP
                 /* [ pair address address nat : pair address address nat
                    : big_map (pair address address) nat : big_map address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUG 3
                 /* [ pair address address nat : big_map (pair address address) nat
                    : big_map address nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ pair address nat : big_map (pair address address) nat : big_map address nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ nat : big_map (pair address address) nat : big_map address nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DIG 2
                 /* [ big_map address nat : nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUP
                 /* [ big_map address nat : big_map address nat : nat
                    : big_map (pair address address) nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUG 3
                 /* [ big_map address nat : nat : big_map (pair address address) nat
                    : big_map address nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DIG 4
                 /* [ pair address address nat : big_map address nat : nat
                    : big_map (pair address address) nat : big_map address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUP
                 /* [ pair address address nat : pair address address nat : big_map address nat
                    : nat : big_map (pair address address) nat : big_map address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUG 5
                 /* [ pair address address nat : big_map address nat : nat
                    : big_map (pair address address) nat : big_map address nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ address : big_map address nat : nat : big_map (pair address address) nat
                    : big_map address nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 GET
                 /* [ option nat : nat : big_map (pair address address) nat : big_map address nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 IF_NONE
                   { PUSH nat
                          0
                     /* [ nat : nat : big_map (pair address address) nat : big_map address nat
                        : pair address address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ }
                   { /* [ nat : nat : big_map (pair address address) nat : big_map address nat
                        : pair address address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                 SUB
                 /* [ int : big_map (pair address address) nat : big_map address nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 ISNAT
                 /* [ option nat : big_map (pair address address) nat : big_map address nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 IF_NONE
                   { PUSH string
                          "NotEnoughBalance"
                     /* [ string : big_map (pair address address) nat : big_map address nat
                        : pair address address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                     FAILWITH
                     /* [] */ }
                   { /* [ nat : big_map (pair address address) nat : big_map address nat
                        : pair address address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                 DIG 2
                 /* [ big_map address nat : nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 PUSH nat
                      0
                 /* [ nat : big_map address nat : nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DIG 2
                 /* [ nat : nat : big_map address nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUP
                 /* [ nat : nat : nat : big_map address nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUG 3
                 /* [ nat : nat : big_map address nat : nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 COMPARE
                 /* [ int : big_map address nat : nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 EQ
                 /* [ bool : big_map address nat : nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 IF { SWAP
                      /* [ nat : big_map address nat : big_map (pair address address) nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DROP
                      /* [ big_map address nat : big_map (pair address address) nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      NONE nat
                      /* [ option nat : big_map address nat : big_map (pair address address) nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ }
                    { SWAP
                      /* [ nat : big_map address nat : big_map (pair address address) nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      SOME
                      /* [ option nat : big_map address nat : big_map (pair address address) nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                 DIG 3
                 /* [ pair address address nat : option nat : big_map address nat
                    : big_map (pair address address) nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUP
                 /* [ pair address address nat : pair address address nat : option nat
                    : big_map address nat : big_map (pair address address) nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUG 4
                 /* [ pair address address nat : option nat : big_map address nat
                    : big_map (pair address address) nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ address : option nat : big_map address nat
                    : big_map (pair address address) nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 UPDATE
                 /* [ big_map address nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DIG 2
                 /* [ pair address address nat : big_map address nat
                    : big_map (pair address address) nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUP
                 /* [ pair address address nat : pair address address nat : big_map address nat
                    : big_map (pair address address) nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUG 3
                 /* [ pair address address nat : big_map address nat
                    : big_map (pair address address) nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ pair address nat : big_map address nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ nat : big_map address nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 SWAP
                 /* [ big_map address nat : nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUP
                 /* [ big_map address nat : big_map address nat : nat
                    : big_map (pair address address) nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUG 2
                 /* [ big_map address nat : nat : big_map address nat
                    : big_map (pair address address) nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DIG 4
                 /* [ pair address address nat : big_map address nat : nat : big_map address nat
                    : big_map (pair address address) nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUP
                 /* [ pair address address nat : pair address address nat : big_map address nat
                    : nat : big_map address nat : big_map (pair address address) nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUG 5
                 /* [ pair address address nat : big_map address nat : nat : big_map address nat
                    : big_map (pair address address) nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ pair address nat : big_map address nat : nat : big_map address nat
                    : big_map (pair address address) nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ address : big_map address nat : nat : big_map address nat
                    : big_map (pair address address) nat : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 GET
                 /* [ option nat : nat : big_map address nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 IF_NONE
                   { PUSH nat
                          0
                     /* [ nat : nat : big_map address nat : big_map (pair address address) nat
                        : pair address address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ }
                   { /* [ nat : nat : big_map address nat : big_map (pair address address) nat
                        : pair address address nat
                        : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                 ADD
                 /* [ nat : big_map address nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 SWAP
                 /* [ big_map address nat : nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 PUSH nat
                      0
                 /* [ nat : big_map address nat : nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DIG 2
                 /* [ nat : nat : big_map address nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUP
                 /* [ nat : nat : nat : big_map address nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DUG 3
                 /* [ nat : nat : big_map address nat : nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 COMPARE
                 /* [ int : big_map address nat : nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 EQ
                 /* [ bool : big_map address nat : nat : big_map (pair address address) nat
                    : pair address address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 IF { SWAP
                      /* [ nat : big_map address nat : big_map (pair address address) nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      DROP
                      /* [ big_map address nat : big_map (pair address address) nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      NONE nat
                      /* [ option nat : big_map address nat : big_map (pair address address) nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ }
                    { SWAP
                      /* [ nat : big_map address nat : big_map (pair address address) nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                      SOME
                      /* [ option nat : big_map address nat : big_map (pair address address) nat
                         : pair address address nat
                         : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ } ;
                 DIG 3
                 /* [ pair address address nat : option nat : big_map address nat
                    : big_map (pair address address) nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CDR
                 /* [ pair address nat : option nat : big_map address nat
                    : big_map (pair address address) nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ address : option nat : big_map address nat
                    : big_map (pair address address) nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 UPDATE
                 /* [ big_map address nat : big_map (pair address address) nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 DIG 2
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : big_map address nat : big_map (pair address address) nat ] */ ;
                 CDR
                 /* [ pair (big_map (pair address address) nat) address nat : big_map address nat
                    : big_map (pair address address) nat ] */ ;
                 SWAP
                 /* [ big_map address nat : pair (big_map (pair address address) nat) address nat
                    : big_map (pair address address) nat ] */ ;
                 PAIR
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : big_map (pair address address) nat ] */ ;
                 DUP
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : big_map (pair address address) nat ] */ ;
                 CDR
                 /* [ pair (big_map (pair address address) nat) address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : big_map (pair address address) nat ] */ ;
                 CDR
                 /* [ pair address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : big_map (pair address address) nat ] */ ;
                 DIG 2
                 /* [ big_map (pair address address) nat : pair address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 PAIR
                 /* [ pair (big_map (pair address address) nat) address nat
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 SWAP
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat
                    : pair (big_map (pair address address) nat) address nat ] */ ;
                 CAR
                 /* [ big_map address nat
                    : pair (big_map (pair address address) nat) address nat ] */ ;
                 PAIR
                 /* [ pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 NIL operation
                 /* [ list operation
                    : pair (big_map address nat) (big_map (pair address address) nat) address nat ] */ ;
                 PAIR
                 /* [ pair (list operation)
                         (big_map address nat)
                         (big_map (pair address address) nat)
                         address
                         nat ] */ } } } }
Well typed (Gas remaining: 1039928.626 units remaining)	michelson_test_scripts/mini_scenarios/multiple_en2.tz
{ parameter unit ;
  storage (option address) ;
  code { SENDER
         /* [ address : pair unit (option address) ] */ ;
         SELF
         /* [ contract unit : address : pair unit (option address) ] */ ;
         ADDRESS
         /* [ address : address : pair unit (option address) ] */ ;
         { /* [ pair (or (or nat nat) unit) int ] */
           COMPARE
           /* [ mutez : mutez : pair (or (or nat nat) unit) int ] */ ;
           EQ
           /* [ bool : pair unit (option address) ] */ ;
           IF { CDR
                /* [ option address ] */ ;
                { /* [ mutez : mutez : pair (or (or nat nat) unit) int ] */
                  IF_NONE
                    { { /* [ pair (or (or nat nat) unit) int ] */ UNIT /* [ unit ] */ ; FAILWITH /* [] */ } }
                    { /* [ pair (or (or nat nat) unit) int ] */ }
                  /* [ bool : pair (or (or nat nat) unit) int ] */ } ;
                DIP { NIL operation
                          /* [ pair (or (or nat nat) unit) int : pair (or (or nat nat) unit) int ] */
                      /* [ list operation ] */ }
                /* [] */ ;
                DUP
                /* [ or (or nat nat) unit : pair (or (or nat nat) unit) int ] */ ;
                CONTRACT %add unit
                /* [ or (or nat nat) unit : int ] */ ;
                { /* [ pair (or (or nat nat) unit) int ] */
                  IF_NONE
                    { /* [ address : list operation ] */ }
                    { { UNIT /* [ int ] */ ; FAILWITH /* [] */ } } } ;
                DUP
                /* [ int : nat ] */ ;
                CONTRACT %fact nat
                /* [ int ] */ ;
                { /* [ unit : int ] */
                  IF_NONE { /* [] */ } { { UNIT /* [ list operation : int ] */ ; FAILWITH /* [] */ } }
                  /* [] */ } ;
                DUP
                /* [ pair (list operation) int ] */ ;
                CONTRACT %add nat
                /* [ option (contract nat) : address : list operation ] */ ;
                { IF_NONE
                    { { UNIT /* [ unit : address : list operation ] */ ; FAILWITH /* [] */ } }
                    { /* [ contract nat : address : list operation ] */ } } ;
                PUSH mutez 0
                /* [ mutez : contract nat : address : list operation ] */ ;
                PUSH nat 12
                /* [ nat : mutez : contract nat : address : list operation ] */ ;
                TRANSFER_TOKENS
                /* [ operation : address : list operation ] */ ;
                SWAP
                /* [ address : operation : list operation ] */ ;
                DIP { CONS /* [ list operation ] */ }
                /* [ address : list operation ] */ ;
                DUP
                /* [ address : address : list operation ] */ ;
                CONTRACT unit
                /* [ option (contract unit) : address : list operation ] */ ;
                { IF_NONE
                    { { UNIT /* [ unit : address : list operation ] */ ; FAILWITH /* [] */ } }
                    { /* [ contract unit : address : list operation ] */ } } ;
                PUSH mutez 0
                /* [ mutez : contract unit : address : list operation ] */ ;
                PUSH unit Unit
                /* [ unit : mutez : contract unit : address : list operation ] */ ;
                TRANSFER_TOKENS
                /* [ operation : address : list operation ] */ ;
                SWAP
                /* [ address : operation : list operation ] */ ;
                DIP { CONS /* [ list operation ] */ }
                /* [ address : list operation ] */ ;
                DUP
                /* [ address : address : list operation ] */ ;
                CONTRACT %sub nat
                /* [ option (contract nat) : address : list operation ] */ ;
                { IF_NONE
                    { { UNIT /* [ unit : address : list operation ] */ ; FAILWITH /* [] */ } }
                    { /* [ contract nat : address : list operation ] */ } } ;
                PUSH mutez 0
                /* [ mutez : contract nat : address : list operation ] */ ;
                PUSH nat 3
                /* [ nat : mutez : contract nat : address : list operation ] */ ;
                TRANSFER_TOKENS
                /* [ operation : address : list operation ] */ ;
                SWAP
                /* [ address : operation : list operation ] */ ;
                DIP { CONS /* [ list operation ] */ }
                /* [ address : list operation ] */ ;
                DUP
                /* [ address : address : list operation ] */ ;
                CONTRACT %add nat
                /* [ option (contract nat) : address : list operation ] */ ;
                { IF_NONE
                    { { UNIT /* [ unit : address : list operation ] */ ; FAILWITH /* [] */ } }
                    { /* [ contract nat : address : list operation ] */ } } ;
                PUSH mutez 0
                /* [ mutez : contract nat : address : list operation ] */ ;
                PUSH nat 5
                /* [ nat : mutez : contract nat : address : list operation ] */ ;
                TRANSFER_TOKENS
                /* [ operation : address : list operation ] */ ;
                SWAP
                /* [ address : operation : list operation ] */ ;
                DIP { CONS /* [ list operation ] */ }
                /* [ address : list operation ] */ ;
                DROP
                /* [ list operation ] */ ;
                DIP { NONE address /* [ option address ] */ }
                /* [ list operation : option address ] */ ;
                PAIR
                /* [ pair (list operation) (option address) ] */ }
              { CAR
                /* [ unit ] */ ;
                DUP
                /* [ unit : unit ] */ ;
                DIP { DIP { PUSH int 0
                            /* [ int ] */ ;
                            PUSH mutez 0
                            /* [ mutez : int ] */ ;
                            NONE key_hash
                            /* [ option key_hash : mutez : int ] */ }
                      /* [ unit : option key_hash : mutez : int ] */ ;
                      DROP
                      /* [ option key_hash : mutez : int ] */ ;
                      CREATE_CONTRACT
                        { parameter (or (or (nat %add) (nat %sub)) (unit %default)) ;
                          storage int ;
                          code { AMOUNT ;
                                 PUSH mutez 0 ;
                                 { { COMPARE ; EQ } ; IF {} { { UNIT ; FAILWITH } } } ;
                                 { { DUP ; CAR ; DIP { CDR } } } ;
                                 IF_LEFT
                                   { IF_LEFT { ADD } { SWAP ; SUB } }
                                   { DROP ; DROP ; PUSH int 0 } ;
                                 NIL operation ;
                                 PAIR } }
                      /* [ operation : address ] */ }
                /* [ unit : operation : address ] */ ;
                DIP { SELF
                      /* [ contract unit : operation : address ] */ ;
                      PUSH mutez 0
                      /* [ mutez : contract unit : operation : address ] */ }
                /* [ unit : mutez : contract unit : operation : address ] */ ;
                TRANSFER_TOKENS
                /* [ operation : operation : address ] */ ;
                NIL operation
                /* [ list operation : operation : operation : address ] */ ;
                SWAP
                /* [ operation : list operation : operation : address ] */ ;
                CONS
                /* [ list operation : operation : address ] */ ;
                SWAP
                /* [ operation : list operation : address ] */ ;
                CONS
                /* [ list operation : address ] */ ;
                DIP { SOME /* [ option address ] */ }
                /* [ list operation : option address ] */ ;
                PAIR
                /* [ pair (list operation) (option address) ] */ } } } }
Well typed (Gas remaining: 1039931.343 units remaining)	michelson_test_scripts/mini_scenarios/multiple_entrypoints_counter.tz
{ parameter unit ;
  storage (option address) ;
  code { SENDER
         /* [ address : pair unit (option address) ] */ ;
         SELF
         /* [ contract unit : address : pair unit (option address) ] */ ;
         ADDRESS
         /* [ address : address : pair unit (option address) ] */ ;
         IFCMPEQ
           { CDR
             /* [ option address ] */ ;
             ASSERT_SOME
             /* [ int : pair (or (or nat nat) unit) int ] */ ;
             DIP { /* [ pair (or (or nat nat) unit) int ] */ NIL operation /* [ list operation ] */ }
             /* [] */ ;
             DUP
             /* [ address : address : list operation ] */ ;
             CONTRACT %add
               unit
               /* [ int ] */
             /* [ option (contract unit) : address : list operation ] */ ;
             ASSERT_NONE ;
             DUP
             /* [ address : address : list operation ] */ ;
             CONTRACT %fact
               nat
               /* [ list operation : int ] */
             /* [ option (contract nat) : address : list operation ] */ ;
             ASSERT_NONE ;
             DUP
             /* [ address : address : list operation ] */ ;
             CONTRACT %add nat
             /* [ option (contract nat) : address : list operation ] */ ;
             ASSERT_SOME ;
             PUSH mutez 0
             /* [ mutez : contract nat : address : list operation ] */ ;
             PUSH nat 12
             /* [ nat : mutez : contract nat : address : list operation ] */ ;
             TRANSFER_TOKENS
             /* [ operation : address : list operation ] */ ;
             SWAP
             /* [ address : operation : list operation ] */ ;
             DIP { CONS /* [ list operation ] */ }
             /* [ address : list operation ] */ ;
             DUP
             /* [ address : address : list operation ] */ ;
             CONTRACT unit
             /* [ option (contract unit) : address : list operation ] */ ;
             ASSERT_SOME ;
             PUSH mutez 0
             /* [ mutez : contract unit : address : list operation ] */ ;
             PUSH unit Unit
             /* [ unit : mutez : contract unit : address : list operation ] */ ;
             TRANSFER_TOKENS
             /* [ operation : address : list operation ] */ ;
             SWAP
             /* [ address : operation : list operation ] */ ;
             DIP { CONS /* [ list operation ] */ }
             /* [ address : list operation ] */ ;
             DUP
             /* [ address : address : list operation ] */ ;
             CONTRACT %sub nat
             /* [ option (contract nat) : address : list operation ] */ ;
             ASSERT_SOME ;
             PUSH mutez 0
             /* [ mutez : contract nat : address : list operation ] */ ;
             PUSH nat 3
             /* [ nat : mutez : contract nat : address : list operation ] */ ;
             TRANSFER_TOKENS
             /* [ operation : address : list operation ] */ ;
             SWAP
             /* [ address : operation : list operation ] */ ;
             DIP { CONS /* [ list operation ] */ }
             /* [ address : list operation ] */ ;
             DUP
             /* [ address : address : list operation ] */ ;
             CONTRACT %add nat
             /* [ option (contract nat) : address : list operation ] */ ;
             ASSERT_SOME ;
             PUSH mutez 0
             /* [ mutez : contract nat : address : list operation ] */ ;
             PUSH nat 5
             /* [ nat : mutez : contract nat : address : list operation ] */ ;
             TRANSFER_TOKENS
             /* [ operation : address : list operation ] */ ;
             SWAP
             /* [ address : operation : list operation ] */ ;
             DIP { CONS /* [ list operation ] */ }
             /* [ address : list operation ] */ ;
             DROP
             /* [ list operation ] */ ;
             DIP { NONE address /* [ option address ] */ }
             /* [ list operation : option address ] */ ;
             PAIR
             /* [ pair (list operation) (option address) ] */ }
           { CAR
             /* [ unit ] */ ;
             DUP
             /* [ unit : unit ] */ ;
             DIP { DIP { PUSH int 0
                         /* [ int ] */ ;
                         PUSH mutez 0
                         /* [ mutez : int ] */ ;
                         NONE key_hash
                         /* [ option key_hash : mutez : int ] */ }
                   /* [ unit : option key_hash : mutez : int ] */ ;
                   DROP
                   /* [ option key_hash : mutez : int ] */ ;
                   CREATE_CONTRACT
                     { parameter (or (or (nat %add) (nat %sub)) (unit %default)) ;
                       storage int ;
                       code { AMOUNT ;
                              PUSH mutez 0 ;
                              ASSERT_CMPEQ ;
                              UNPAIR ;
                              IF_LEFT
                                { IF_LEFT { ADD } { SWAP ; SUB } }
                                { DROP ; DROP ; PUSH int 0 } ;
                              NIL operation ;
                              PAIR } }
                   /* [ operation : address ] */ }
             /* [ unit : operation : address ] */ ;
             DIP { SELF
                   /* [ contract unit : operation : address ] */ ;
                   PUSH mutez 0
                   /* [ mutez : contract unit : operation : address ] */ }
             /* [ unit : mutez : contract unit : operation : address ] */ ;
             TRANSFER_TOKENS
             /* [ operation : operation : address ] */ ;
             NIL operation
             /* [ list operation : operation : operation : address ] */ ;
             SWAP
             /* [ operation : list operation : operation : address ] */ ;
             CONS
             /* [ list operation : operation : address ] */ ;
             SWAP
             /* [ operation : list operation : address ] */ ;
             CONS
             /* [ list operation : address ] */ ;
             DIP { SOME /* [ option address ] */ }
             /* [ list operation : option address ] */ ;
             PAIR
             /* [ pair (list operation) (option address) ] */ }
         /* [ mutez : pair (or (or nat nat) unit) int ] */ } }
Well typed (Gas remaining: 1039997.849 units remaining)	michelson_test_scripts/mini_scenarios/multisig_dest_entrypoint.tz
{ parameter (or (unit %a) (string %b)) ;
  storage unit ;
  code { CDR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039997.849 units remaining)	michelson_test_scripts/mini_scenarios/multisig_dest_entrypoint_arg.tz
{ parameter (or (int %a) (string %b)) ;
  storage unit ;
  code { CDR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039998.017 units remaining)	michelson_test_scripts/mini_scenarios/nat_id.tz
{ parameter nat ;
  storage nat ;
  code { CAR
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039998.017 units remaining)	michelson_test_scripts/mini_scenarios/noop_bytes.tz
{ parameter bytes ;
  storage unit ;
  code { CDR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.446 units remaining)	michelson_test_scripts/mini_scenarios/originate_contract.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [ unit ] */ ;
         UNIT
         /* [ list operation : unit ] */ ;
         AMOUNT
         /* [ mutez : unit ] */ ;
         NONE key_hash
         /* [ pair (list operation) unit ] */ ;
         CREATE_CONTRACT
           { parameter unit ; storage unit ; code { CDR ; NIL operation ; PAIR } }
         /* [ operation : address ] */ ;
         DIP { DROP
               /* [] */ ;
               PUSH unit Unit
               /* [ unit ] */ ;
               NIL operation
               /* [ list operation : unit ] */ }
         /* [ operation : list operation : unit ] */ ;
         CONS
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039942.668 units remaining)	michelson_test_scripts/mini_scenarios/parameterized_multisig.tz
{ storage (pair bool (pair (map nat (pair bool bool)) (pair key key))) ;
  parameter (or nat (pair signature nat)) ;
  code { DUP
         /* [ pair (or nat (pair signature nat)) bool (map nat (pair bool bool)) key key
            : pair (or nat (pair signature nat)) bool (map nat (pair bool bool)) key key ] */ ;
         CAR
         /* [ or nat (pair signature nat)
            : pair (or nat (pair signature nat)) bool (map nat (pair bool bool)) key key ] */ ;
         DIP { CDDR }
         /* [ or nat (pair signature nat) : pair (map nat (pair bool bool)) key key ] */ ;
         IF_LEFT
           { DIP { DUP
                   /* [ pair (map nat (pair bool bool)) key key
                      : pair (map nat (pair bool bool)) key key ] */ ;
                   CAR
                   /* [ map nat (pair bool bool) : pair (map nat (pair bool bool)) key key ] */ }
             /* [ nat : map nat (pair bool bool) : pair (map nat (pair bool bool)) key key ] */ ;
             GET
             /* [ option (pair bool bool) : pair (map nat (pair bool bool)) key key ] */ ;
             IF_NONE
               { PUSH bool False /* [ bool : pair (map nat (pair bool bool)) key key ] */ }
               { DUP
                 /* [ pair bool bool : pair bool bool : pair (map nat (pair bool bool)) key key ] */ ;
                 CAR
                 /* [ bool : pair bool bool : pair (map nat (pair bool bool)) key key ] */ ;
                 DIP { CDR /* [ bool : pair (map nat (pair bool bool)) key key ] */ }
                 /* [ bool : bool : pair (map nat (pair bool bool)) key key ] */ ;
                 AND
                 /* [ bool : pair (map nat (pair bool bool)) key key ] */ } ;
             PAIR
             /* [ pair bool (map nat (pair bool bool)) key key ] */ }
           { DUP
             /* [ pair signature nat : pair signature nat
                : pair (map nat (pair bool bool)) key key ] */ ;
             CAR
             /* [ signature : pair signature nat : pair (map nat (pair bool bool)) key key ] */ ;
             DIP { CDR
                   /* [ nat : pair (map nat (pair bool bool)) key key ] */ ;
                   DUP
                   /* [ nat : nat : pair (map nat (pair bool bool)) key key ] */ ;
                   PACK
                   /* [ bytes : nat : pair (map nat (pair bool bool)) key key ] */ ;
                   BLAKE2B
                   /* [ bytes : nat : pair (map nat (pair bool bool)) key key ] */ }
             /* [ signature : bytes : nat : pair (map nat (pair bool bool)) key key ] */ ;
             PAIR
             /* [ pair signature bytes : nat : pair (map nat (pair bool bool)) key key ] */ ;
             SWAP
             /* [ nat : pair signature bytes : pair (map nat (pair bool bool)) key key ] */ ;
             DIP { DIP { DUP
                         /* [ pair (map nat (pair bool bool)) key key
                            : pair (map nat (pair bool bool)) key key ] */ ;
                         CDR
                         /* [ pair key key : pair (map nat (pair bool bool)) key key ] */ ;
                         DIP { CAR /* [ map nat (pair bool bool) ] */ }
                         /* [ pair key key : map nat (pair bool bool) ] */ ;
                         DUP
                         /* [ pair key key : pair key key : map nat (pair bool bool) ] */ }
                   /* [ pair signature bytes : pair key key : pair key key
                      : map nat (pair bool bool) ] */ ;
                   SWAP
                   /* [ pair key key : pair signature bytes : pair key key
                      : map nat (pair bool bool) ] */ ;
                   CAR
                   /* [ key : pair signature bytes : pair key key : map nat (pair bool bool) ] */ ;
                   DIP { DUP
                         /* [ pair signature bytes : pair signature bytes : pair key key
                            : map nat (pair bool bool) ] */ ;
                         UNPAIR
                         /* [ signature : bytes : pair signature bytes : pair key key
                            : map nat (pair bool bool) ] */ }
                   /* [ key : signature : bytes : pair signature bytes : pair key key
                      : map nat (pair bool bool) ] */ ;
                   CHECK_SIGNATURE
                   /* [ bool : pair signature bytes : pair key key : map nat (pair bool bool) ] */ }
             /* [ nat : bool : pair signature bytes : pair key key
                : map nat (pair bool bool) ] */ ;
             SWAP
             /* [ bool : nat : pair signature bytes : pair key key
                : map nat (pair bool bool) ] */ ;
             IF { DIP { DROP
                        /* [ pair key key : map nat (pair bool bool) ] */ ;
                        SWAP
                        /* [ map nat (pair bool bool) : pair key key ] */ ;
                        DUP
                        /* [ map nat (pair bool bool) : map nat (pair bool bool) : pair key key ] */ }
                  /* [ nat : map nat (pair bool bool) : map nat (pair bool bool) : pair key key ] */ ;
                  DUP
                  /* [ nat : nat : map nat (pair bool bool) : map nat (pair bool bool)
                     : pair key key ] */ ;
                  DIP { GET
                        /* [ option (pair bool bool) : map nat (pair bool bool) : pair key key ] */ ;
                        IF_NONE
                          { PUSH (pair bool bool)
                                 (Pair False False)
                            /* [ pair bool bool : map nat (pair bool bool) : pair key key ] */ }
                          { /* [ pair bool bool : map nat (pair bool bool) : pair key key ] */ } ;
                        CDR
                        /* [ bool : map nat (pair bool bool) : pair key key ] */ ;
                        PUSH bool True
                        /* [ bool : bool : map nat (pair bool bool) : pair key key ] */ ;
                        PAIR
                        /* [ pair bool bool : map nat (pair bool bool) : pair key key ] */ ;
                        SOME
                        /* [ option (pair bool bool) : map nat (pair bool bool) : pair key key ] */ }
                  /* [ nat : option (pair bool bool) : map nat (pair bool bool) : pair key key ] */ }
                { DIP { DIP { DUP
                              /* [ pair key key : pair key key : map nat (pair bool bool) ] */ ;
                              CDR
                              /* [ key : pair key key : map nat (pair bool bool) ] */ }
                        /* [ pair signature bytes : key : pair key key : map nat (pair bool bool) ] */ ;
                        SWAP
                        /* [ key : pair signature bytes : pair key key : map nat (pair bool bool) ] */ ;
                        DIP { UNPAIR /* [ signature : bytes : pair key key : map nat (pair bool bool) ] */ }
                        /* [ key : signature : bytes : pair key key : map nat (pair bool bool) ] */ ;
                        CHECK_SIGNATURE
                        /* [ bool : pair key key : map nat (pair bool bool) ] */ }
                  /* [ nat : bool : pair key key : map nat (pair bool bool) ] */ ;
                  SWAP
                  /* [ bool : nat : pair key key : map nat (pair bool bool) ] */ ;
                  IF { DUP
                       /* [ nat : nat : pair key key : map nat (pair bool bool) ] */ ;
                       DIP { DIP { SWAP
                                   /* [ map nat (pair bool bool) : pair key key ] */ ;
                                   DUP
                                   /* [ map nat (pair bool bool) : map nat (pair bool bool) : pair key key ] */ }
                             /* [ nat : map nat (pair bool bool) : map nat (pair bool bool) : pair key key ] */ ;
                             GET
                             /* [ option (pair bool bool) : map nat (pair bool bool) : pair key key ] */ }
                       /* [ nat : option (pair bool bool) : map nat (pair bool bool) : pair key key ] */ ;
                       SWAP
                       /* [ option (pair bool bool) : nat : map nat (pair bool bool) : pair key key ] */ ;
                       IF_NONE
                         { PUSH (pair bool bool)
                                (Pair False False)
                           /* [ pair bool bool : nat : map nat (pair bool bool) : pair key key ] */ }
                         { /* [ pair bool bool : nat : map nat (pair bool bool) : pair key key ] */ } ;
                       CAR
                       /* [ bool : nat : map nat (pair bool bool) : pair key key ] */ ;
                       PUSH bool True
                       /* [ bool : bool : nat : map nat (pair bool bool) : pair key key ] */ ;
                       SWAP
                       /* [ bool : bool : nat : map nat (pair bool bool) : pair key key ] */ ;
                       PAIR
                       /* [ pair bool bool : nat : map nat (pair bool bool) : pair key key ] */ ;
                       SOME
                       /* [ option (pair bool bool) : nat : map nat (pair bool bool) : pair key key ] */ ;
                       SWAP
                       /* [ nat : option (pair bool bool) : map nat (pair bool bool) : pair key key ] */ }
                     { FAIL } } ;
             UPDATE
             /* [ map nat (pair bool bool) : pair key key ] */ ;
             PAIR
             /* [ pair (map nat (pair bool bool)) key key ] */ ;
             PUSH bool False
             /* [ bool : pair (map nat (pair bool bool)) key key ] */ ;
             PAIR
             /* [ pair bool (map nat (pair bool bool)) key key ] */ } ;
         NIL operation
         /* [ list operation : pair bool (map nat (pair bool bool)) key key ] */ ;
         PAIR
         /* [ pair (list operation) bool (map nat (pair bool bool)) key key ] */ } }
Well typed (Gas remaining: 1039980.814 units remaining)	michelson_test_scripts/mini_scenarios/parsable_contract.tz
{ parameter int ;
  storage (map int address) ;
  code { UNPAIR
         /* [ int : map int address ] */ ;
         PUSH int 0
         /* [ int : int : map int address ] */ ;
         SWAP
         /* [ int : int : map int address ] */ ;
         DUP
         /* [ int : int : int : map int address ] */ ;
         DUG 2
         /* [ int : int : int : map int address ] */ ;
         COMPARE
         /* [ int : int : map int address ] */ ;
         GT
         /* [ bool : int : map int address ] */ ;
         IF { SWAP
              /* [ map int address : int ] */ ;
              SENDER
              /* [ address : map int address : int ] */ ;
              DIG 2
              /* [ int : address : map int address ] */ ;
              SWAP
              /* [ address : int : map int address ] */ ;
              SOME
              /* [ option address : int : map int address ] */ ;
              SWAP
              /* [ int : option address : map int address ] */ ;
              UPDATE
              /* [ map int address ] */ }
            { SWAP
              /* [ map int address : int ] */ ;
              DROP
              /* [ int ] */ ;
              PUSH int 0
              /* [ int : int ] */ ;
              SWAP
              /* [ int : int ] */ ;
              COMPARE
              /* [ int ] */ ;
              LT
              /* [ bool ] */ ;
              IF { PUSH string "NEGATIVE_INT" /* [ string ] */ ; FAILWITH /* [] */ }
                 { PUSH unit Unit
                   /* [ unit ] */ ;
                   LEFT (map int address)
                   /* [ or unit (map int address) ] */ ;
                   LOOP_LEFT
                     { DROP
                       /* [] */ ;
                       PUSH unit Unit
                       /* [ unit ] */ ;
                       LEFT (map int address)
                       /* [ or unit (map int address) ] */ }
                   /* [ map int address ] */ } } ;
         NIL operation
         /* [ list operation : map int address ] */ ;
         PAIR
         /* [ pair (list operation) (map int address) ] */ } }
Well typed (Gas remaining: 1039997.247 units remaining)	michelson_test_scripts/mini_scenarios/receive_tickets_in_big_map.tz
{ parameter (big_map int (ticket string)) ;
  storage (big_map int (ticket string)) ;
  code { CAR
         /* [ big_map int (ticket string) ] */ ;
         NIL operation
         /* [ list operation : big_map int (ticket string) ] */ ;
         PAIR
         /* [ pair (list operation) (big_map int (ticket string)) ] */ } }
Well typed (Gas remaining: 1039990.816 units remaining)	michelson_test_scripts/mini_scenarios/replay.tz
{ parameter unit ;
  storage unit ;
  code { CDR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         SOURCE
         /* [ address : list operation : unit ] */ ;
         CONTRACT unit
         /* [ option (contract unit) : list operation : unit ] */ ;
         ASSERT_SOME ;
         PUSH mutez 1
         /* [ mutez : contract unit : list operation : unit ] */ ;
         UNIT
         /* [ unit : mutez : contract unit : list operation : unit ] */ ;
         TRANSFER_TOKENS
         /* [ operation : list operation : unit ] */ ;
         DUP
         /* [ operation : operation : list operation : unit ] */ ;
         DIP { CONS /* [ list operation : unit ] */ }
         /* [ operation : list operation : unit ] */ ;
         CONS
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039979.048 units remaining)	michelson_test_scripts/mini_scenarios/reveal_signed_preimage.tz
{ parameter (pair bytes signature) ;
  storage (pair bytes key) ;
  code { DUP
         /* [ pair (pair bytes signature) bytes key
            : pair (pair bytes signature) bytes key ] */ ;
         UNPAIR
         /* [ pair bytes signature : pair bytes key
            : pair (pair bytes signature) bytes key ] */ ;
         CAR
         /* [ bytes : pair bytes key : pair (pair bytes signature) bytes key ] */ ;
         SHA256
         /* [ bytes : pair bytes key : pair (pair bytes signature) bytes key ] */ ;
         DIP { CAR /* [ bytes : pair (pair bytes signature) bytes key ] */ }
         /* [ bytes : bytes : pair (pair bytes signature) bytes key ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair (pair bytes signature) bytes key
            : pair (pair bytes signature) bytes key ] */ ;
         UNPAIR
         /* [ pair bytes signature : pair bytes key
            : pair (pair bytes signature) bytes key ] */ ;
         SWAP
         /* [ pair bytes key : pair bytes signature
            : pair (pair bytes signature) bytes key ] */ ;
         DIP { UNPAIR
               /* [ bytes : signature : pair (pair bytes signature) bytes key ] */ ;
               SWAP
               /* [ signature : bytes : pair (pair bytes signature) bytes key ] */ }
         /* [ pair bytes key : signature : bytes
            : pair (pair bytes signature) bytes key ] */ ;
         CDR
         /* [ key : signature : bytes : pair (pair bytes signature) bytes key ] */ ;
         CHECK_SIGNATURE
         /* [ bool : pair (pair bytes signature) bytes key ] */ ;
         ASSERT ;
         CDR
         /* [ pair bytes key ] */ ;
         DUP
         /* [ pair bytes key : pair bytes key ] */ ;
         CDR
         /* [ key : pair bytes key ] */ ;
         HASH_KEY
         /* [ key_hash : pair bytes key ] */ ;
         IMPLICIT_ACCOUNT
         /* [ contract unit : pair bytes key ] */ ;
         BALANCE
         /* [ mutez : contract unit : pair bytes key ] */ ;
         UNIT
         /* [ unit : mutez : contract unit : pair bytes key ] */ ;
         TRANSFER_TOKENS
         /* [ operation : pair bytes key ] */ ;
         NIL operation
         /* [ list operation : operation : pair bytes key ] */ ;
         SWAP
         /* [ operation : list operation : pair bytes key ] */ ;
         CONS
         /* [ list operation : pair bytes key ] */ ;
         PAIR
         /* [ pair (list operation) bytes key ] */ } }
Well typed (Gas remaining: 1039994.499 units remaining)	michelson_test_scripts/mini_scenarios/sc_rollup_forward.tz
{ parameter (pair bytes (contract bytes)) ;
  storage unit ;
  code { UNPAIR
         /* [ pair bytes (contract bytes) : unit ] */ ;
         DIP { NIL operation /* [ list operation : unit ] */ }
         /* [ pair bytes (contract bytes) : list operation : unit ] */ ;
         UNPAIR
         /* [ bytes : contract bytes : list operation : unit ] */ ;
         DIP { PUSH mutez 0 /* [ mutez : contract bytes : list operation : unit ] */ }
         /* [ bytes : mutez : contract bytes : list operation : unit ] */ ;
         TRANSFER_TOKENS
         /* [ operation : list operation : unit ] */ ;
         CONS
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039990.991 units remaining)	michelson_test_scripts/mini_scenarios/sc_rollup_mint_and_forward.tz
{ parameter (pair (pair bytes nat) (contract (ticket bytes))) ;
  storage unit ;
  code { UNPAIR
         /* [ pair (pair bytes nat) (contract (ticket bytes)) : unit ] */ ;
         UNPAIR
         /* [ pair bytes nat : contract (ticket bytes) : unit ] */ ;
         UNPAIR
         /* [ bytes : nat : contract (ticket bytes) : unit ] */ ;
         TICKET
         /* [ option (ticket bytes) : contract (ticket bytes) : unit ] */ ;
         ASSERT_SOME ;
         PUSH mutez 0
         /* [ mutez : ticket bytes : contract (ticket bytes) : unit ] */ ;
         SWAP
         /* [ ticket bytes : mutez : contract (ticket bytes) : unit ] */ ;
         TRANSFER_TOKENS
         /* [ operation : unit ] */ ;
         NIL operation
         /* [ list operation : operation : unit ] */ ;
         SWAP
         /* [ operation : list operation : unit ] */ ;
         CONS
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039992.902 units remaining)	michelson_test_scripts/mini_scenarios/self_address_receiver.tz
{ parameter (lambda unit address) ;
  storage unit ;
  code { UNPAIR
         /* [ lambda unit address : unit ] */ ;
         UNIT
         /* [ unit : lambda unit address : unit ] */ ;
         EXEC
         /* [ address : unit ] */ ;
         SELF_ADDRESS
         /* [ address : address : unit ] */ ;
         ASSERT_CMPEQ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039993.501 units remaining)	michelson_test_scripts/mini_scenarios/self_address_sender.tz
{ parameter (contract (lambda unit address)) ;
  storage unit ;
  code { CAR
         /* [ contract (lambda unit address) ] */ ;
         BALANCE
         /* [ mutez : contract (lambda unit address) ] */ ;
         LAMBDA
           unit
           address
           { DROP /* [] */ ; SELF_ADDRESS /* [ address ] */ }
         /* [ lambda unit address : mutez : contract (lambda unit address) ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         DIP { UNIT /* [ unit ] */ ; NIL operation /* [ list operation : unit ] */ }
         /* [ operation : list operation : unit ] */ ;
         CONS
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039986.349 units remaining)	michelson_test_scripts/mini_scenarios/send_ticket_list_016.tz
{ parameter address ;
  storage unit ;
  code { CAR
         /* [ address ] */ ;
         CONTRACT (list (ticket string))
         /* [ option (contract (list (ticket string))) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 0
         /* [ mutez : contract (list (ticket string)) ] */ ;
         NIL (ticket string)
         /* [ list (ticket string) : mutez : contract (list (ticket string)) ] */ ;
         PUSH nat
              1
         /* [ nat : list (ticket string) : mutez : contract (list (ticket string)) ] */ ;
         PUSH string
              "Ticket"
         /* [ string : nat : list (ticket string) : mutez
            : contract (list (ticket string)) ] */ ;
         TICKET
         /* [ option (ticket string) : list (ticket string) : mutez
            : contract (list (ticket string)) ] */ ;
         ASSERT_SOME ;
         CONS
         /* [ list (ticket string) : mutez : contract (list (ticket string)) ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         NIL operation
         /* [ list operation : operation ] */ ;
         SWAP
         /* [ operation : list operation ] */ ;
         CONS
         /* [ list operation ] */ ;
         UNIT
         /* [ unit : list operation ] */ ;
         SWAP
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039981.327 units remaining)	michelson_test_scripts/mini_scenarios/send_ticket_list_multiple_016.tz
{ parameter address ;
  storage unit ;
  code { CAR
         /* [ address ] */ ;
         CONTRACT (list (ticket string))
         /* [ option (contract (list (ticket string))) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 0
         /* [ mutez : contract (list (ticket string)) ] */ ;
         NIL (ticket string)
         /* [ list (ticket string) : mutez : contract (list (ticket string)) ] */ ;
         PUSH nat
              1
         /* [ nat : list (ticket string) : mutez : contract (list (ticket string)) ] */ ;
         PUSH string
              "Ticket"
         /* [ string : nat : list (ticket string) : mutez
            : contract (list (ticket string)) ] */ ;
         TICKET
         /* [ option (ticket string) : list (ticket string) : mutez
            : contract (list (ticket string)) ] */ ;
         ASSERT_SOME ;
         CONS
         /* [ list (ticket string) : mutez : contract (list (ticket string)) ] */ ;
         PUSH nat
              1
         /* [ nat : list (ticket string) : mutez : contract (list (ticket string)) ] */ ;
         PUSH string
              "Ticket2"
         /* [ string : nat : list (ticket string) : mutez
            : contract (list (ticket string)) ] */ ;
         TICKET
         /* [ option (ticket string) : list (ticket string) : mutez
            : contract (list (ticket string)) ] */ ;
         ASSERT_SOME ;
         CONS
         /* [ list (ticket string) : mutez : contract (list (ticket string)) ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         NIL operation
         /* [ list operation : operation ] */ ;
         SWAP
         /* [ operation : list operation ] */ ;
         CONS
         /* [ list operation ] */ ;
         UNIT
         /* [ unit : list operation ] */ ;
         SWAP
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039981.564 units remaining)	michelson_test_scripts/mini_scenarios/send_tickets_from_storage_016.tz
{ parameter (or (unit %mint) (contract %send (list (ticket string)))) ;
  storage (list (ticket string)) ;
  code { UNPAIR
         /* [ or unit (contract (list (ticket string))) : list (ticket string) ] */ ;
         IF_LEFT
           { DROP
             /* [ list (ticket string) ] */ ;
             PUSH nat 1
             /* [ nat : list (ticket string) ] */ ;
             PUSH string "Ticket"
             /* [ string : nat : list (ticket string) ] */ ;
             TICKET
             /* [ option (ticket string) : list (ticket string) ] */ ;
             ASSERT_SOME ;
             CONS
             /* [ list (ticket string) ] */ ;
             PUSH nat 1
             /* [ nat : list (ticket string) ] */ ;
             PUSH string "Ticket2"
             /* [ string : nat : list (ticket string) ] */ ;
             TICKET
             /* [ option (ticket string) : list (ticket string) ] */ ;
             ASSERT_SOME ;
             CONS
             /* [ list (ticket string) ] */ ;
             NIL operation
             /* [ list operation : list (ticket string) ] */ ;
             PAIR
             /* [ pair (list operation) (list (ticket string)) ] */ }
           { PUSH mutez 0
             /* [ mutez : contract (list (ticket string)) : list (ticket string) ] */ ;
             DIG 2
             /* [ list (ticket string) : mutez : contract (list (ticket string)) ] */ ;
             TRANSFER_TOKENS
             /* [ operation ] */ ;
             NIL (ticket string)
             /* [ list (ticket string) : operation ] */ ;
             NIL operation
             /* [ list operation : list (ticket string) : operation ] */ ;
             DIG 2
             /* [ operation : list operation : list (ticket string) ] */ ;
             CONS
             /* [ list operation : list (ticket string) ] */ ;
             PAIR
             /* [ pair (list operation) (list (ticket string)) ] */ } } }
Well typed (Gas remaining: 1039968.364 units remaining)	michelson_test_scripts/mini_scenarios/send_tickets_in_big_map_015.tz
{ parameter address ;
  storage unit ;
  code { CAR
         /* [ address ] */ ;
         CONTRACT
           (big_map int (ticket string))
         /* [ option (contract (big_map int (ticket string))) ] */ ;
         IF_NONE
           { PUSH string "Contract of type `big_map(ticket(string))` not found"
             /* [ string ] */ ;
             FAILWITH
             /* [] */ }
           { EMPTY_BIG_MAP
               int
               (ticket string)
             /* [ big_map int (ticket string) : contract (big_map int (ticket string)) ] */ ;
             PUSH int
                  100
             /* [ int : big_map int (ticket string)
                : contract (big_map int (ticket string)) ] */ ;
             SWAP
             /* [ big_map int (ticket string) : int
                : contract (big_map int (ticket string)) ] */ ;
             PAIR
             /* [ pair (big_map int (ticket string)) int
                : contract (big_map int (ticket string)) ] */ ;
             LEFT (big_map int (ticket string))
             /* [ or (pair (big_map int (ticket string)) int) (big_map int (ticket string))
                : contract (big_map int (ticket string)) ] */ ;
             LOOP_LEFT
               { UNPAIR
                 /* [ big_map int (ticket string) : int
                    : contract (big_map int (ticket string)) ] */ ;
                 SWAP
                 /* [ int : big_map int (ticket string)
                    : contract (big_map int (ticket string)) ] */ ;
                 DUP
                 /* [ int : int : big_map int (ticket string)
                    : contract (big_map int (ticket string)) ] */ ;
                 DUG 2
                 /* [ int : big_map int (ticket string) : int
                    : contract (big_map int (ticket string)) ] */ ;
                 PUSH int
                      0
                 /* [ int : int : big_map int (ticket string) : int
                    : contract (big_map int (ticket string)) ] */ ;
                 COMPARE
                 /* [ int : big_map int (ticket string) : int
                    : contract (big_map int (ticket string)) ] */ ;
                 LT
                 /* [ bool : big_map int (ticket string) : int
                    : contract (big_map int (ticket string)) ] */ ;
                 IF { PUSH int
                           1
                      /* [ int : big_map int (ticket string) : int
                         : contract (big_map int (ticket string)) ] */ ;
                      DUP 3
                      /* [ int : int : big_map int (ticket string) : int
                         : contract (big_map int (ticket string)) ] */ ;
                      SUB
                      /* [ int : big_map int (ticket string) : int
                         : contract (big_map int (ticket string)) ] */ ;
                      SWAP
                      /* [ big_map int (ticket string) : int : int
                         : contract (big_map int (ticket string)) ] */ ;
                      PUSH nat
                           1
                      /* [ nat : big_map int (ticket string) : int : int
                         : contract (big_map int (ticket string)) ] */ ;
                      PUSH string
                           "BLUE"
                      /* [ string : nat : big_map int (ticket string) : int : int
                         : contract (big_map int (ticket string)) ] */ ;
                      TICKET
                      /* [ option (ticket string) : big_map int (ticket string) : int : int
                         : contract (big_map int (ticket string)) ] */ ;
                      ASSERT_SOME ;
                      DIG 3
                      /* [ int : ticket string : big_map int (ticket string) : int
                         : contract (big_map int (ticket string)) ] */ ;
                      SWAP
                      /* [ ticket string : int : big_map int (ticket string) : int
                         : contract (big_map int (ticket string)) ] */ ;
                      SOME
                      /* [ option (ticket string) : int : big_map int (ticket string) : int
                         : contract (big_map int (ticket string)) ] */ ;
                      SWAP
                      /* [ int : option (ticket string) : big_map int (ticket string) : int
                         : contract (big_map int (ticket string)) ] */ ;
                      UPDATE
                      /* [ big_map int (ticket string) : int
                         : contract (big_map int (ticket string)) ] */ ;
                      PAIR
                      /* [ pair (big_map int (ticket string)) int
                         : contract (big_map int (ticket string)) ] */ ;
                      LEFT (big_map int (ticket string))
                      /* [ or (pair (big_map int (ticket string)) int) (big_map int (ticket string))
                         : contract (big_map int (ticket string)) ] */ }
                    { SWAP
                      /* [ int : big_map int (ticket string)
                         : contract (big_map int (ticket string)) ] */ ;
                      DROP
                      /* [ big_map int (ticket string) : contract (big_map int (ticket string)) ] */ ;
                      RIGHT
                        (pair (big_map int (ticket string)) int)
                      /* [ or (pair (big_map int (ticket string)) int) (big_map int (ticket string))
                         : contract (big_map int (ticket string)) ] */ } }
             /* [ big_map int (ticket string) : contract (big_map int (ticket string)) ] */ ;
             SWAP
             /* [ contract (big_map int (ticket string)) : big_map int (ticket string) ] */ ;
             PUSH mutez
                  0
             /* [ mutez : contract (big_map int (ticket string))
                : big_map int (ticket string) ] */ ;
             DIG 2
             /* [ big_map int (ticket string) : mutez
                : contract (big_map int (ticket string)) ] */ ;
             TRANSFER_TOKENS
             /* [ operation ] */ ;
             PUSH unit Unit
             /* [ unit : operation ] */ ;
             NIL operation
             /* [ list operation : unit : operation ] */ ;
             DIG 2
             /* [ operation : list operation : unit ] */ ;
             CONS
             /* [ list operation : unit ] */ ;
             PAIR
             /* [ pair (list operation) unit ] */ } } }
Well typed (Gas remaining: 1039982.309 units remaining)	michelson_test_scripts/mini_scenarios/smart_rollup_mint_and_deposit_ticket_016.tz
{ parameter
    (pair (pair (contract %rollup (pair string (ticket string))) (string %rollup_account))
          (pair (nat %ticket_amount) (string %ticket_content))) ;
  storage unit ;
  code { CAR
         /* [ pair (pair (contract (pair string (ticket string))) string) nat string ] */ ;
         DUP
         /* [ pair (pair (contract (pair string (ticket string))) string) nat string
            : pair (pair (contract (pair string (ticket string))) string) nat string ] */ ;
         CAR
         /* [ pair (contract (pair string (ticket string))) string
            : pair (pair (contract (pair string (ticket string))) string) nat string ] */ ;
         CAR
         /* [ contract (pair string (ticket string))
            : pair (pair (contract (pair string (ticket string))) string) nat string ] */ ;
         PUSH mutez
              0
         /* [ mutez : contract (pair string (ticket string))
            : pair (pair (contract (pair string (ticket string))) string) nat string ] */ ;
         DUP 3
         /* [ pair (pair (contract (pair string (ticket string))) string) nat string
            : mutez : contract (pair string (ticket string))
            : pair (pair (contract (pair string (ticket string))) string) nat string ] */ ;
         CDR
         /* [ pair nat string : mutez : contract (pair string (ticket string))
            : pair (pair (contract (pair string (ticket string))) string) nat string ] */ ;
         CAR
         /* [ nat : mutez : contract (pair string (ticket string))
            : pair (pair (contract (pair string (ticket string))) string) nat string ] */ ;
         DUP 4
         /* [ pair (pair (contract (pair string (ticket string))) string) nat string
            : nat : mutez : contract (pair string (ticket string))
            : pair (pair (contract (pair string (ticket string))) string) nat string ] */ ;
         CDR
         /* [ pair nat string : nat : mutez : contract (pair string (ticket string))
            : pair (pair (contract (pair string (ticket string))) string) nat string ] */ ;
         CDR
         /* [ string : nat : mutez : contract (pair string (ticket string))
            : pair (pair (contract (pair string (ticket string))) string) nat string ] */ ;
         TICKET
         /* [ option (ticket string) : mutez : contract (pair string (ticket string))
            : pair (pair (contract (pair string (ticket string))) string) nat string ] */ ;
         ASSERT_SOME ;
         DIG 3
         /* [ pair (pair (contract (pair string (ticket string))) string) nat string
            : ticket string : mutez : contract (pair string (ticket string)) ] */ ;
         CAR
         /* [ pair (contract (pair string (ticket string))) string : ticket string
            : mutez : contract (pair string (ticket string)) ] */ ;
         CDR
         /* [ string : ticket string : mutez : contract (pair string (ticket string)) ] */ ;
         PAIR
         /* [ pair string (ticket string) : mutez
            : contract (pair string (ticket string)) ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         PUSH unit Unit
         /* [ unit : operation ] */ ;
         NIL operation
         /* [ list operation : unit : operation ] */ ;
         DIG 2
         /* [ operation : list operation : unit ] */ ;
         CONS
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039993.969 units remaining)	michelson_test_scripts/mini_scenarios/smart_rollup_receive_tickets_016.tz
{ parameter (or (unit %burn_all_tickets) (ticket %receive_tickets string)) ;
  storage (list (ticket string)) ;
  code { UNPAIR
         /* [ or unit (ticket string) : list (ticket string) ] */ ;
         IF_LEFT
           { DROP 2
             /* [] */ ;
             NIL (ticket string)
             /* [ list (ticket string) ] */ ;
             NIL operation
             /* [ list operation : list (ticket string) ] */ ;
             PAIR
             /* [ pair (list operation) (list (ticket string)) ] */ }
           { CONS
             /* [ list (ticket string) ] */ ;
             NIL operation
             /* [ list operation : list (ticket string) ] */ ;
             PAIR
             /* [ pair (list operation) (list (ticket string)) ] */ } } }
Well typed (Gas remaining: 1039997.447 units remaining)	michelson_test_scripts/mini_scenarios/str_id.tz
{ parameter string ;
  storage (option string) ;
  code { CAR
         /* [ string ] */ ;
         SOME
         /* [ option string ] */ ;
         NIL operation
         /* [ list operation : option string ] */ ;
         PAIR
         /* [ pair (list operation) (option string) ] */ } }
Well typed (Gas remaining: 1039974.138 units remaining)	michelson_test_scripts/mini_scenarios/ticket_builder_fungible.tz
{ parameter
    (or (ticket %burn unit)
        (pair %mint (contract %destination (ticket unit)) (nat %amount))) ;
  storage address ;
  code { AMOUNT
         /* [ mutez
            : pair (or (ticket unit) (pair (contract (ticket unit)) nat)) address ] */ ;
         PUSH mutez
              0
         /* [ mutez : mutez
            : pair (or (ticket unit) (pair (contract (ticket unit)) nat)) address ] */ ;
         ASSERT_CMPEQ ;
         UNPAIR
         /* [ or (ticket unit) (pair (contract (ticket unit)) nat) : address ] */ ;
         IF_LEFT
           { READ_TICKET
             /* [ pair address unit nat : ticket unit : address ] */ ;
             CAR
             /* [ address : ticket unit : address ] */ ;
             SELF_ADDRESS
             /* [ address : address : ticket unit : address ] */ ;
             ASSERT_CMPEQ ;
             DROP
             /* [ address ] */ ;
             NIL operation
             /* [ list operation : address ] */ }
           { DUP @manager 2
             /* [ address : pair (contract (ticket unit)) nat : address ] */ ;
             SENDER
             /* [ address : address : pair (contract (ticket unit)) nat : address ] */ ;
             ASSERT_CMPEQ ;
             UNPAIR
             /* [ contract (ticket unit) : nat : address ] */ ;
             SWAP
             /* [ nat : contract (ticket unit) : address ] */ ;
             UNIT
             /* [ unit : nat : contract (ticket unit) : address ] */ ;
             TICKET
             /* [ option (ticket unit) : contract (ticket unit) : address ] */ ;
             ASSERT_SOME ;
             PUSH mutez 0
             /* [ mutez : ticket unit : contract (ticket unit) : address ] */ ;
             SWAP
             /* [ ticket unit : mutez : contract (ticket unit) : address ] */ ;
             TRANSFER_TOKENS
             /* [ operation : address ] */ ;
             NIL operation
             /* [ list operation : operation : address ] */ ;
             SWAP
             /* [ operation : list operation : address ] */ ;
             CONS
             /* [ list operation : address ] */ } ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039971.719 units remaining)	michelson_test_scripts/mini_scenarios/ticket_builder_non_fungible.tz
{ parameter (or (ticket %burn nat) (contract %mint_destination (ticket nat))) ;
  storage (pair (address %manager) (nat %counter)) ;
  code { AMOUNT
         /* [ mutez : pair (or (ticket nat) (contract (ticket nat))) address nat ] */ ;
         PUSH mutez
              0
         /* [ mutez : mutez
            : pair (or (ticket nat) (contract (ticket nat))) address nat ] */ ;
         ASSERT_CMPEQ ;
         UNPAIR 3
         /* [ or (ticket nat) (contract (ticket nat)) : address : nat ] */ ;
         IF_LEFT
           { READ_TICKET
             /* [ pair address nat nat : ticket nat : address : nat ] */ ;
             CAR
             /* [ address : ticket nat : address : nat ] */ ;
             SELF_ADDRESS
             /* [ address : address : ticket nat : address : nat ] */ ;
             ASSERT_CMPEQ ;
             DROP
             /* [ address : nat ] */ ;
             NIL operation
             /* [ list operation : address : nat ] */ }
           { DUP @manager 2
             /* [ address : contract (ticket nat) : address : nat ] */ ;
             SENDER
             /* [ address : address : contract (ticket nat) : address : nat ] */ ;
             ASSERT_CMPEQ ;
             PUSH @amount nat 1
             /* [ nat : contract (ticket nat) : address : nat ] */ ;
             DUP @counter 4
             /* [ nat : nat : contract (ticket nat) : address : nat ] */ ;
             TICKET
             /* [ option (ticket nat) : contract (ticket nat) : address : nat ] */ ;
             ASSERT_SOME ;
             PUSH mutez 0
             /* [ mutez : ticket nat : contract (ticket nat) : address : nat ] */ ;
             SWAP
             /* [ ticket nat : mutez : contract (ticket nat) : address : nat ] */ ;
             TRANSFER_TOKENS
             /* [ operation : address : nat ] */ ;
             NIL operation
             /* [ list operation : operation : address : nat ] */ ;
             SWAP
             /* [ operation : list operation : address : nat ] */ ;
             CONS
             /* [ list operation : address : nat ] */ ;
             DIP 2
                 { PUSH nat 1 /* [ nat : nat ] */ ; ADD /* [ nat ] */ }
             /* [ list operation : address : nat ] */ } ;
         PAIR 3
         /* [ pair (list operation) address nat ] */ } }
Well typed (Gas remaining: 1039938.422 units remaining)	michelson_test_scripts/mini_scenarios/ticket_wallet_fungible.tz
{ parameter
    (or (ticket %receive unit)
        (pair %send (contract %destination (ticket unit)) (nat %amount) (address %ticketer))) ;
  storage (pair (address %manager) (big_map %tickets address (ticket unit))) ;
  code { AMOUNT
         /* [ mutez
            : pair (or (ticket unit) (pair (contract (ticket unit)) nat address))
                 address
                 (big_map address (ticket unit)) ] */ ;
         PUSH mutez
              0
         /* [ mutez : mutez
            : pair (or (ticket unit) (pair (contract (ticket unit)) nat address))
                 address
                 (big_map address (ticket unit)) ] */ ;
         ASSERT_CMPEQ ;
         UNPAIR
           3
         /* [ or (ticket unit) (pair (contract (ticket unit)) nat address) : address
            : big_map address (ticket unit) ] */ ;
         IF_LEFT
           { READ_TICKET
             /* [ pair address unit nat : ticket unit : address
                : big_map address (ticket unit) ] */ ;
             CAR @ticketer
             /* [ address : ticket unit : address : big_map address (ticket unit) ] */ ;
             DUP
             /* [ address : address : ticket unit : address : big_map address (ticket unit) ] */ ;
             DIG 4
             /* [ big_map address (ticket unit) : address : address : ticket unit : address ] */ ;
             NONE (ticket unit)
             /* [ option (ticket unit) : big_map address (ticket unit) : address : address
                : ticket unit : address ] */ ;
             DIG 2
             /* [ address : option (ticket unit) : big_map address (ticket unit) : address
                : ticket unit : address ] */ ;
             GET_AND_UPDATE
             /* [ option (ticket unit) : big_map address (ticket unit) : address
                : ticket unit : address ] */ ;
             IF_SOME
               { DIG 3
                 /* [ ticket unit : ticket unit : big_map address (ticket unit) : address
                    : address ] */ ;
                 PAIR
                 /* [ pair (ticket unit) (ticket unit) : big_map address (ticket unit) : address
                    : address ] */ ;
                 JOIN_TICKETS
                 /* [ option (ticket unit) : big_map address (ticket unit) : address : address ] */ ;
                 ASSERT_SOME }
               { DIG 2
                 /* [ ticket unit : big_map address (ticket unit) : address : address ] */ } ;
             SOME
             /* [ option (ticket unit) : big_map address (ticket unit) : address : address ] */ ;
             DIG 2
             /* [ address : option (ticket unit) : big_map address (ticket unit) : address ] */ ;
             GET_AND_UPDATE
             /* [ option (ticket unit) : big_map address (ticket unit) : address ] */ ;
             ASSERT_NONE ;
             SWAP
             /* [ address : big_map address (ticket unit) ] */ ;
             PAIR
             /* [ pair address (big_map address (ticket unit)) ] */ ;
             NIL operation
             /* [ list operation : pair address (big_map address (ticket unit)) ] */ }
           { DUP @manager
               2
             /* [ address : pair (contract (ticket unit)) nat address : address
                : big_map address (ticket unit) ] */ ;
             SENDER
             /* [ address : address : pair (contract (ticket unit)) nat address : address
                : big_map address (ticket unit) ] */ ;
             ASSERT_CMPEQ ;
             UNPAIR
               3
             /* [ contract (ticket unit) : nat : address : address
                : big_map address (ticket unit) ] */ ;
             DIG 4
             /* [ big_map address (ticket unit) : contract (ticket unit) : nat : address
                : address ] */ ;
             NONE (ticket unit)
             /* [ option (ticket unit) : big_map address (ticket unit)
                : contract (ticket unit) : nat : address : address ] */ ;
             DUP @ticketer
               5
             /* [ address : option (ticket unit) : big_map address (ticket unit)
                : contract (ticket unit) : nat : address : address ] */ ;
             GET_AND_UPDATE
             /* [ option (ticket unit) : big_map address (ticket unit)
                : contract (ticket unit) : nat : address : address ] */ ;
             ASSERT_SOME ;
             READ_TICKET
             /* [ pair address unit nat : ticket unit : big_map address (ticket unit)
                : contract (ticket unit) : nat : address : address ] */ ;
             GET @total_amount
               4
             /* [ nat : ticket unit : big_map address (ticket unit) : contract (ticket unit)
                : nat : address : address ] */ ;
             DUP @amount
               5
             /* [ nat : nat : ticket unit : big_map address (ticket unit)
                : contract (ticket unit) : nat : address : address ] */ ;
             SWAP
             /* [ nat : nat : ticket unit : big_map address (ticket unit)
                : contract (ticket unit) : nat : address : address ] */ ;
             SUB
             /* [ int : ticket unit : big_map address (ticket unit) : contract (ticket unit)
                : nat : address : address ] */ ;
             DUP
             /* [ int : int : ticket unit : big_map address (ticket unit)
                : contract (ticket unit) : nat : address : address ] */ ;
             EQ
             /* [ bool : int : ticket unit : big_map address (ticket unit)
                : contract (ticket unit) : nat : address : address ] */ ;
             IF { DROP
                  /* [ ticket unit : big_map address (ticket unit) : contract (ticket unit) : nat
                     : address : address ] */ ;
                  DIG 3
                  /* [ nat : ticket unit : big_map address (ticket unit) : contract (ticket unit)
                     : address : address ] */ ;
                  DROP
                  /* [ ticket unit : big_map address (ticket unit) : contract (ticket unit)
                     : address : address ] */ ;
                  DIG 3
                  /* [ address : ticket unit : big_map address (ticket unit)
                     : contract (ticket unit) : address ] */ ;
                  DROP
                  /* [ ticket unit : big_map address (ticket unit) : contract (ticket unit)
                     : address ] */ ;
                  DUG 3
                  /* [ big_map address (ticket unit) : contract (ticket unit) : address
                     : ticket unit ] */ }
                { ISNAT
                  /* [ option nat : ticket unit : big_map address (ticket unit)
                     : contract (ticket unit) : nat : address : address ] */ ;
                  ASSERT_SOME @remaining_amount ;
                  DIG 4
                  /* [ nat : nat : ticket unit : big_map address (ticket unit)
                     : contract (ticket unit) : address : address ] */ ;
                  PAIR
                  /* [ pair nat nat : ticket unit : big_map address (ticket unit)
                     : contract (ticket unit) : address : address ] */ ;
                  SWAP
                  /* [ ticket unit : pair nat nat : big_map address (ticket unit)
                     : contract (ticket unit) : address : address ] */ ;
                  SPLIT_TICKET
                  /* [ option (pair (ticket unit) (ticket unit)) : big_map address (ticket unit)
                     : contract (ticket unit) : address : address ] */ ;
                  ASSERT_SOME ;
                  UNPAIR @to_send @to_keep
                  /* [ ticket unit : ticket unit : big_map address (ticket unit)
                     : contract (ticket unit) : address : address ] */ ;
                  DUG 5
                  /* [ ticket unit : big_map address (ticket unit) : contract (ticket unit)
                     : address : address : ticket unit ] */ ;
                  SOME
                  /* [ option (ticket unit) : big_map address (ticket unit)
                     : contract (ticket unit) : address : address : ticket unit ] */ ;
                  DIG 3
                  /* [ address : option (ticket unit) : big_map address (ticket unit)
                     : contract (ticket unit) : address : ticket unit ] */ ;
                  GET_AND_UPDATE
                  /* [ option (ticket unit) : big_map address (ticket unit)
                     : contract (ticket unit) : address : ticket unit ] */ ;
                  ASSERT_NONE } ;
             DIG 2
             /* [ address : big_map address (ticket unit) : contract (ticket unit)
                : ticket unit ] */ ;
             PAIR
             /* [ pair address (big_map address (ticket unit)) : contract (ticket unit)
                : ticket unit ] */ ;
             SWAP
             /* [ contract (ticket unit) : pair address (big_map address (ticket unit))
                : ticket unit ] */ ;
             PUSH mutez
                  0
             /* [ mutez : contract (ticket unit)
                : pair address (big_map address (ticket unit)) : ticket unit ] */ ;
             DIG 3
             /* [ ticket unit : mutez : contract (ticket unit)
                : pair address (big_map address (ticket unit)) ] */ ;
             TRANSFER_TOKENS
             /* [ operation : pair address (big_map address (ticket unit)) ] */ ;
             NIL operation
             /* [ list operation : operation : pair address (big_map address (ticket unit)) ] */ ;
             SWAP
             /* [ operation : list operation : pair address (big_map address (ticket unit)) ] */ ;
             CONS
             /* [ list operation : pair address (big_map address (ticket unit)) ] */ } ;
         PAIR
         /* [ pair (list operation) address (big_map address (ticket unit)) ] */ } }
Well typed (Gas remaining: 1039960.699 units remaining)	michelson_test_scripts/mini_scenarios/ticket_wallet_non_fungible.tz
{ parameter
    (or (ticket %receive nat)
        (pair %send (contract %destination (ticket nat)) (address %ticketer) (nat %id))) ;
  storage (pair (address %manager) (big_map %tickets (pair address nat) (ticket nat))) ;
  code { AMOUNT
         /* [ mutez
            : pair (or (ticket nat) (pair (contract (ticket nat)) address nat))
                 address
                 (big_map (pair address nat) (ticket nat)) ] */ ;
         PUSH mutez
              0
         /* [ mutez : mutez
            : pair (or (ticket nat) (pair (contract (ticket nat)) address nat))
                 address
                 (big_map (pair address nat) (ticket nat)) ] */ ;
         ASSERT_CMPEQ ;
         UNPAIR
           3
         /* [ or (ticket nat) (pair (contract (ticket nat)) address nat) : address
            : big_map (pair address nat) (ticket nat) ] */ ;
         IF_LEFT
           { READ_TICKET
             /* [ pair address nat nat : ticket nat : address
                : big_map (pair address nat) (ticket nat) ] */ ;
             CAST (pair (address %ticketer) (nat %id) (nat %amount))
             /* [ pair address nat nat : ticket nat : address
                : big_map (pair address nat) (ticket nat) ] */ ;
             UNPAIR
               3
             /* [ address : nat : nat : ticket nat : address
                : big_map (pair address nat) (ticket nat) ] */ ;
             DIG 2
             /* [ nat : address : nat : ticket nat : address
                : big_map (pair address nat) (ticket nat) ] */ ;
             PUSH nat
                  1
             /* [ nat : nat : address : nat : ticket nat : address
                : big_map (pair address nat) (ticket nat) ] */ ;
             ASSERT_CMPEQ ;
             PAIR
             /* [ pair address nat : ticket nat : address
                : big_map (pair address nat) (ticket nat) ] */ ;
             DIP { SOME
                   /* [ option (ticket nat) : address : big_map (pair address nat) (ticket nat) ] */ ;
                   DIP { SWAP /* [ big_map (pair address nat) (ticket nat) : address ] */ }
                   /* [ option (ticket nat) : big_map (pair address nat) (ticket nat) : address ] */ }
             /* [ pair address nat : option (ticket nat)
                : big_map (pair address nat) (ticket nat) : address ] */ ;
             GET_AND_UPDATE
             /* [ option (ticket nat) : big_map (pair address nat) (ticket nat) : address ] */ ;
             ASSERT_NONE ;
             SWAP
             /* [ address : big_map (pair address nat) (ticket nat) ] */ ;
             PAIR
             /* [ pair address (big_map (pair address nat) (ticket nat)) ] */ ;
             NIL operation
             /* [ list operation : pair address (big_map (pair address nat) (ticket nat)) ] */ }
           { DUP @manager
               2
             /* [ address : pair (contract (ticket nat)) address nat : address
                : big_map (pair address nat) (ticket nat) ] */ ;
             SENDER
             /* [ address : address : pair (contract (ticket nat)) address nat : address
                : big_map (pair address nat) (ticket nat) ] */ ;
             ASSERT_CMPEQ ;
             UNPAIR
             /* [ contract (ticket nat) : pair address nat : address
                : big_map (pair address nat) (ticket nat) ] */ ;
             DIG 3
             /* [ big_map (pair address nat) (ticket nat) : contract (ticket nat)
                : pair address nat : address ] */ ;
             NONE (ticket nat)
             /* [ option (ticket nat) : big_map (pair address nat) (ticket nat)
                : contract (ticket nat) : pair address nat : address ] */ ;
             DIG 3
             /* [ pair address nat : option (ticket nat)
                : big_map (pair address nat) (ticket nat) : contract (ticket nat) : address ] */ ;
             GET_AND_UPDATE
             /* [ option (ticket nat) : big_map (pair address nat) (ticket nat)
                : contract (ticket nat) : address ] */ ;
             ASSERT_SOME ;
             SWAP
             /* [ big_map (pair address nat) (ticket nat) : ticket nat
                : contract (ticket nat) : address ] */ ;
             DIG 3
             /* [ address : big_map (pair address nat) (ticket nat) : ticket nat
                : contract (ticket nat) ] */ ;
             PAIR
             /* [ pair address (big_map (pair address nat) (ticket nat)) : ticket nat
                : contract (ticket nat) ] */ ;
             DUG 2
             /* [ ticket nat : contract (ticket nat)
                : pair address (big_map (pair address nat) (ticket nat)) ] */ ;
             PUSH mutez
                  0
             /* [ mutez : ticket nat : contract (ticket nat)
                : pair address (big_map (pair address nat) (ticket nat)) ] */ ;
             SWAP
             /* [ ticket nat : mutez : contract (ticket nat)
                : pair address (big_map (pair address nat) (ticket nat)) ] */ ;
             TRANSFER_TOKENS
             /* [ operation : pair address (big_map (pair address nat) (ticket nat)) ] */ ;
             NIL operation
             /* [ list operation : operation
                : pair address (big_map (pair address nat) (ticket nat)) ] */ ;
             SWAP
             /* [ operation : list operation
                : pair address (big_map (pair address nat) (ticket nat)) ] */ ;
             CONS
             /* [ list operation : pair address (big_map (pair address nat) (ticket nat)) ] */ } ;
         PAIR
         /* [ pair (list operation) address (big_map (pair address nat) (ticket nat)) ] */ } }
Well typed (Gas remaining: 1039993.131 units remaining)	michelson_test_scripts/mini_scenarios/tickets_015.tz
{ parameter unit ;
  storage (list (ticket string)) ;
  code { CDR
         /* [ list (ticket string) ] */ ;
         PUSH nat 1
         /* [ nat : list (ticket string) ] */ ;
         PUSH string "Red"
         /* [ string : nat : list (ticket string) ] */ ;
         TICKET
         /* [ option (ticket string) : list (ticket string) ] */ ;
         ASSERT_SOME ;
         CONS
         /* [ list (ticket string) ] */ ;
         NIL operation
         /* [ list operation : list (ticket string) ] */ ;
         PAIR
         /* [ pair (list operation) (list (ticket string)) ] */ } }
Well typed (Gas remaining: 1039986.391 units remaining)	michelson_test_scripts/mini_scenarios/tickets_bag_016.tz
{ parameter (or (ticket %save string) (address %send)) ;
  storage (list (ticket string)) ;
  code { UNPAIR
         /* [ or (ticket string) address : list (ticket string) ] */ ;
         IF_LEFT
           { CONS
             /* [ list (ticket string) ] */ ;
             NIL operation
             /* [ list operation : list (ticket string) ] */ ;
             PAIR
             /* [ pair (list operation) (list (ticket string)) ] */ }
           { SWAP
             /* [ list (ticket string) : address ] */ ;
             IF_CONS
               { DIG 2
                 /* [ address : ticket string : list (ticket string) ] */ ;
                 CONTRACT %ticket
                   (ticket string)
                 /* [ option (contract (ticket string)) : ticket string : list (ticket string) ] */ ;
                 ASSERT_SOME ;
                 PUSH mutez
                      0
                 /* [ mutez : contract (ticket string) : ticket string : list (ticket string) ] */ ;
                 DIG 2
                 /* [ ticket string : mutez : contract (ticket string) : list (ticket string) ] */ ;
                 TRANSFER_TOKENS
                 /* [ operation : list (ticket string) ] */ ;
                 NIL operation
                 /* [ list operation : operation : list (ticket string) ] */ ;
                 SWAP
                 /* [ operation : list operation : list (ticket string) ] */ ;
                 CONS
                 /* [ list operation : list (ticket string) ] */ ;
                 PAIR
                 /* [ pair (list operation) (list (ticket string)) ] */ }
               { PUSH string "no ticket to send" /* [ string : address ] */ ; FAILWITH /* [] */ } } } }
Well typed (Gas remaining: 1039986.391 units remaining)	michelson_test_scripts/mini_scenarios/tickets_bag_implicit_016.tz
{ parameter (or (ticket %save string) (address %send)) ;
  storage (list (ticket string)) ;
  code { UNPAIR
         /* [ or (ticket string) address : list (ticket string) ] */ ;
         IF_LEFT
           { CONS
             /* [ list (ticket string) ] */ ;
             NIL operation
             /* [ list operation : list (ticket string) ] */ ;
             PAIR
             /* [ pair (list operation) (list (ticket string)) ] */ }
           { SWAP
             /* [ list (ticket string) : address ] */ ;
             IF_CONS
               { DIG 2
                 /* [ address : ticket string : list (ticket string) ] */ ;
                 CONTRACT
                   (ticket string)
                 /* [ option (contract (ticket string)) : ticket string : list (ticket string) ] */ ;
                 ASSERT_SOME ;
                 PUSH mutez
                      0
                 /* [ mutez : contract (ticket string) : ticket string : list (ticket string) ] */ ;
                 DIG 2
                 /* [ ticket string : mutez : contract (ticket string) : list (ticket string) ] */ ;
                 TRANSFER_TOKENS
                 /* [ operation : list (ticket string) ] */ ;
                 NIL operation
                 /* [ list operation : operation : list (ticket string) ] */ ;
                 SWAP
                 /* [ operation : list operation : list (ticket string) ] */ ;
                 CONS
                 /* [ list operation : list (ticket string) ] */ ;
                 PAIR
                 /* [ pair (list operation) (list (ticket string)) ] */ }
               { PUSH string "no ticket to send" /* [ string : address ] */ ; FAILWITH /* [] */ } } } }
Well typed (Gas remaining: 1039997.932 units remaining)	michelson_test_scripts/mini_scenarios/tickets_blackhole_016.tz
{ parameter (ticket %ticket string) ;
  storage unit ;
  code { CDR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039961.303 units remaining)	michelson_test_scripts/mini_scenarios/tickets_create_and_send_015.tz
{ parameter (pair address address) ;
  storage (list (ticket string)) ;
  code { CAR
         /* [ pair address address ] */ ;
         UNPAIR
         /* [ address : address ] */ ;
         PUSH nat 1
         /* [ nat : address : address ] */ ;
         PUSH string "red"
         /* [ string : nat : address : address ] */ ;
         TICKET
         /* [ option (ticket string) : address : address ] */ ;
         ASSERT_SOME ;
         PUSH nat 1
         /* [ nat : ticket string : address : address ] */ ;
         PUSH string "green"
         /* [ string : nat : ticket string : address : address ] */ ;
         TICKET
         /* [ option (ticket string) : ticket string : address : address ] */ ;
         ASSERT_SOME ;
         PUSH nat 1
         /* [ nat : ticket string : ticket string : address : address ] */ ;
         PUSH string
              "green"
         /* [ string : nat : ticket string : ticket string : address : address ] */ ;
         TICKET
         /* [ option (ticket string) : ticket string : ticket string : address
            : address ] */ ;
         ASSERT_SOME ;
         PUSH nat
              1
         /* [ nat : ticket string : ticket string : ticket string : address : address ] */ ;
         PUSH string
              "blue"
         /* [ string : nat : ticket string : ticket string : ticket string : address
            : address ] */ ;
         TICKET
         /* [ option (ticket string) : ticket string : ticket string : ticket string
            : address : address ] */ ;
         ASSERT_SOME ;
         PUSH nat
              1
         /* [ nat : ticket string : ticket string : ticket string : ticket string
            : address : address ] */ ;
         PUSH string
              "blue"
         /* [ string : nat : ticket string : ticket string : ticket string
            : ticket string : address : address ] */ ;
         TICKET
         /* [ option (ticket string) : ticket string : ticket string : ticket string
            : ticket string : address : address ] */ ;
         ASSERT_SOME ;
         DIG 5
         /* [ address : ticket string : ticket string : ticket string : ticket string
            : ticket string : address ] */ ;
         CONTRACT
           (pair (pair (ticket string) (ticket string)) address)
         /* [ option (contract (pair (pair (ticket string) (ticket string)) address))
            : ticket string : ticket string : ticket string : ticket string
            : ticket string : address ] */ ;
         IF_NONE
           { PUSH string
                  "option is None"
             /* [ string : ticket string : ticket string : ticket string : ticket string
                : ticket string : address ] */ ;
             FAILWITH
             /* [] */ }
           { /* [ contract (pair (pair (ticket string) (ticket string)) address)
                : ticket string : ticket string : ticket string : ticket string
                : ticket string : address ] */ } ;
         PUSH mutez
              0
         /* [ mutez : contract (pair (pair (ticket string) (ticket string)) address)
            : ticket string : ticket string : ticket string : ticket string
            : ticket string : address ] */ ;
         DIG 7
         /* [ address : mutez
            : contract (pair (pair (ticket string) (ticket string)) address)
            : ticket string : ticket string : ticket string : ticket string
            : ticket string ] */ ;
         DIG 3
         /* [ ticket string : address : mutez
            : contract (pair (pair (ticket string) (ticket string)) address)
            : ticket string : ticket string : ticket string : ticket string ] */ ;
         DIG 4
         /* [ ticket string : ticket string : address : mutez
            : contract (pair (pair (ticket string) (ticket string)) address)
            : ticket string : ticket string : ticket string ] */ ;
         PAIR
         /* [ pair (ticket string) (ticket string) : address : mutez
            : contract (pair (pair (ticket string) (ticket string)) address)
            : ticket string : ticket string : ticket string ] */ ;
         PAIR
         /* [ pair (pair (ticket string) (ticket string)) address : mutez
            : contract (pair (pair (ticket string) (ticket string)) address)
            : ticket string : ticket string : ticket string ] */ ;
         TRANSFER_TOKENS
         /* [ operation : ticket string : ticket string : ticket string ] */ ;
         NIL (ticket string)
         /* [ list (ticket string) : operation : ticket string : ticket string
            : ticket string ] */ ;
         DIG 2
         /* [ ticket string : list (ticket string) : operation : ticket string
            : ticket string ] */ ;
         CONS
         /* [ list (ticket string) : operation : ticket string : ticket string ] */ ;
         DIG 2
         /* [ ticket string : list (ticket string) : operation : ticket string ] */ ;
         CONS
         /* [ list (ticket string) : operation : ticket string ] */ ;
         DIG 2
         /* [ ticket string : list (ticket string) : operation ] */ ;
         CONS
         /* [ list (ticket string) : operation ] */ ;
         NIL operation
         /* [ list operation : list (ticket string) : operation ] */ ;
         DIG 2
         /* [ operation : list operation : list (ticket string) ] */ ;
         CONS
         /* [ list operation : list (ticket string) ] */ ;
         PAIR
         /* [ pair (list operation) (list (ticket string)) ] */ } }
Well typed (Gas remaining: 1039997.849 units remaining)	michelson_test_scripts/mini_scenarios/tickets_list_blackhole_016.tz
{ parameter (list (ticket string)) ;
  storage unit ;
  code { CDR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039985.858 units remaining)	michelson_test_scripts/mini_scenarios/tickets_mint_and_store_complex_param.tz
{ parameter
    (or (pair %mint_and_send string nat (contract (ticket string)))
        (pair %store int (list (pair string (ticket string))))) ;
  storage (list (ticket string)) ;
  code { UNPAIR
         /* [ or (pair string nat (contract (ticket string)))
               (pair int (list (pair string (ticket string)))) : list (ticket string) ] */ ;
         IF_LEFT
           { UNPAIR 3
             /* [ string : nat : contract (ticket string) : list (ticket string) ] */ ;
             TICKET
             /* [ option (ticket string) : contract (ticket string) : list (ticket string) ] */ ;
             IF_NONE
               { PUSH string
                      "option is None"
                 /* [ string : contract (ticket string) : list (ticket string) ] */ ;
                 FAILWITH
                 /* [] */ }
               { /* [ ticket string : contract (ticket string) : list (ticket string) ] */ } ;
             SWAP
             /* [ contract (ticket string) : ticket string : list (ticket string) ] */ ;
             PUSH mutez
                  0
             /* [ mutez : contract (ticket string) : ticket string : list (ticket string) ] */ ;
             DIG 2
             /* [ ticket string : mutez : contract (ticket string) : list (ticket string) ] */ ;
             TRANSFER_TOKENS
             /* [ operation : list (ticket string) ] */ ;
             SWAP
             /* [ list (ticket string) : operation ] */ ;
             NIL operation
             /* [ list operation : list (ticket string) : operation ] */ ;
             DIG 2
             /* [ operation : list operation : list (ticket string) ] */ ;
             CONS
             /* [ list operation : list (ticket string) ] */ }
           { CDR
             /* [ list (pair string (ticket string)) : list (ticket string) ] */ ;
             ITER { CDR
                    /* [ ticket string : list (ticket string) ] */ ;
                    CONS
                    /* [ list (ticket string) ] */ }
             /* [ list (ticket string) ] */ ;
             NIL operation
             /* [ list operation : list (ticket string) ] */ } ;
         PAIR
         /* [ pair (list operation) (list (ticket string)) ] */ } }
Well typed (Gas remaining: 1039997.186 units remaining)	michelson_test_scripts/mini_scenarios/tickets_receive_and_store.tz
{ parameter (ticket string) ;
  storage (option (ticket string)) ;
  code { CAR
         /* [ ticket string ] */ ;
         SOME
         /* [ option (ticket string) ] */ ;
         NIL operation
         /* [ list operation : option (ticket string) ] */ ;
         PAIR
         /* [ pair (list operation) (option (ticket string)) ] */ } }
Well typed (Gas remaining: 1039987.529 units remaining)	michelson_test_scripts/mini_scenarios/tickets_send_016.tz
{ parameter (pair address nat) ;
  storage unit ;
  code { CAR
         /* [ pair address nat ] */ ;
         UNPAIR
         /* [ address : nat ] */ ;
         CONTRACT (ticket string)
         /* [ option (contract (ticket string)) : nat ] */ ;
         IF_NONE
           { PUSH string "Contract not found" /* [ string : nat ] */ ; FAILWITH /* [] */ }
           { PUSH mutez 0
             /* [ mutez : contract (ticket string) : nat ] */ ;
             DIG 2
             /* [ nat : mutez : contract (ticket string) ] */ ;
             PUSH string "Ticket"
             /* [ string : nat : mutez : contract (ticket string) ] */ ;
             TICKET
             /* [ option (ticket string) : mutez : contract (ticket string) ] */ ;
             ASSERT_SOME ;
             TRANSFER_TOKENS
             /* [ operation ] */ ;
             PUSH unit Unit
             /* [ unit : operation ] */ ;
             NIL operation
             /* [ list operation : unit : operation ] */ ;
             DIG 2
             /* [ operation : list operation : unit ] */ ;
             CONS
             /* [ list operation : unit ] */ ;
             PAIR
             /* [ pair (list operation) unit ] */ } } }
Well typed (Gas remaining: 1039988.096 units remaining)	michelson_test_scripts/mini_scenarios/tickets_send_with_tez_016.tz
{ parameter address ;
  storage unit ;
  code { CAR
         /* [ address ] */ ;
         CONTRACT (ticket string)
         /* [ option (contract (ticket string)) ] */ ;
         IF_NONE
           { PUSH string "Contract not found" /* [ string ] */ ; FAILWITH /* [] */ }
           { PUSH mutez 1
             /* [ mutez : contract (ticket string) ] */ ;
             PUSH nat 1
             /* [ nat : mutez : contract (ticket string) ] */ ;
             PUSH string "Ticket"
             /* [ string : nat : mutez : contract (ticket string) ] */ ;
             TICKET
             /* [ option (ticket string) : mutez : contract (ticket string) ] */ ;
             ASSERT_SOME ;
             TRANSFER_TOKENS
             /* [ operation ] */ ;
             PUSH unit Unit
             /* [ unit : operation ] */ ;
             NIL operation
             /* [ list operation : unit : operation ] */ ;
             DIG 2
             /* [ operation : list operation : unit ] */ ;
             CONS
             /* [ list operation : unit ] */ ;
             PAIR
             /* [ pair (list operation) unit ] */ } } }
Well typed (Gas remaining: 1039988.829 units remaining)	michelson_test_scripts/mini_scenarios/tickets_store_fst_and_rely_snd.tz
{ parameter (pair (pair (ticket string) (ticket string)) address) ;
  storage (option (ticket string)) ;
  code { CAR
         /* [ pair (pair (ticket string) (ticket string)) address ] */ ;
         UNPAIR
         /* [ pair (ticket string) (ticket string) : address ] */ ;
         UNPAIR
         /* [ ticket string : ticket string : address ] */ ;
         DIG 2
         /* [ address : ticket string : ticket string ] */ ;
         CONTRACT
           (ticket string)
         /* [ option (contract (ticket string)) : ticket string : ticket string ] */ ;
         IF_NONE
           { PUSH string "option is None"
             /* [ string : ticket string : ticket string ] */ ;
             FAILWITH
             /* [] */ }
           { /* [ contract (ticket string) : ticket string : ticket string ] */ } ;
         PUSH mutez
              0
         /* [ mutez : contract (ticket string) : ticket string : ticket string ] */ ;
         DIG 3
         /* [ ticket string : mutez : contract (ticket string) : ticket string ] */ ;
         TRANSFER_TOKENS
         /* [ operation : ticket string ] */ ;
         SWAP
         /* [ ticket string : operation ] */ ;
         SOME
         /* [ option (ticket string) : operation ] */ ;
         NIL operation
         /* [ list operation : option (ticket string) : operation ] */ ;
         DIG 2
         /* [ operation : list operation : option (ticket string) ] */ ;
         CONS
         /* [ list operation : option (ticket string) ] */ ;
         PAIR
         /* [ pair (list operation) (option (ticket string)) ] */ } }
Well typed (Gas remaining: 1039986.304 units remaining)	michelson_test_scripts/mini_scenarios/tzip4_view.tz
{ parameter
    (or (pair %view_const unit (contract nat))
        (pair %view_add (pair int int) (contract int))) ;
  storage unit ;
  code { CAR
         /* [ or (pair unit (contract nat)) (pair (pair int int) (contract int)) ] */ ;
         IF_LEFT
           { CDR
             /* [ contract nat ] */ ;
             AMOUNT
             /* [ mutez : contract nat ] */ ;
             PUSH nat 5
             /* [ nat : mutez : contract nat ] */ ;
             TRANSFER_TOKENS
             /* [ operation ] */ ;
             NIL operation
             /* [ list operation : operation ] */ ;
             SWAP
             /* [ operation : list operation ] */ ;
             CONS
             /* [ list operation ] */ ;
             UNIT
             /* [ unit : list operation ] */ ;
             SWAP
             /* [ list operation : unit ] */ ;
             PAIR
             /* [ pair (list operation) unit ] */ }
           { UNPAIR
             /* [ pair int int : contract int ] */ ;
             UNPAIR
             /* [ int : int : contract int ] */ ;
             ADD
             /* [ int : contract int ] */ ;
             AMOUNT
             /* [ mutez : int : contract int ] */ ;
             SWAP
             /* [ int : mutez : contract int ] */ ;
             TRANSFER_TOKENS
             /* [ operation ] */ ;
             NIL operation
             /* [ list operation : operation ] */ ;
             SWAP
             /* [ operation : list operation ] */ ;
             CONS
             /* [ list operation ] */ ;
             UNIT
             /* [ unit : list operation ] */ ;
             SWAP
             /* [ list operation : unit ] */ ;
             PAIR
             /* [ pair (list operation) unit ] */ } } }
Well typed (Gas remaining: 1039997.552 units remaining)	michelson_test_scripts/mini_scenarios/very_small.tz
{ parameter unit ;
  storage unit ;
  code { UNPAIR
         /* [ unit : unit ] */ ;
         DROP
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039982.522 units remaining)	michelson_test_scripts/mini_scenarios/view_check_caller.tz
{ parameter address ;
  storage (option address) ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         UNIT
         /* [ unit : address : address ] */ ;
         VIEW "calls_count" nat
         /* [ option nat : address ] */ ;
         IF_NONE { UNIT /* [ unit : address ] */ ; FAILWITH /* [] */ } { /* [ nat : address ] */ } ;
         DIP { UNIT
               /* [ unit : address ] */ ;
               VIEW "last_caller" (option address)
               /* [ option (option address) ] */ }
         /* [ nat : option (option address) ] */ ;
         PUSH nat 0
         /* [ nat : nat : option (option address) ] */ ;
         IFCMPEQ
           { IF_NONE
               { UNIT /* [ unit ] */ ; FAILWITH /* [] */ }
               { IF_NONE { /* [] */ } { UNIT /* [ unit : address ] */ ; FAILWITH /* [] */ } } ;
             NONE address
             /* [ option address ] */ }
           { IF_NONE
               { UNIT /* [ unit ] */ ; FAILWITH /* [] */ }
               { IF_NONE { UNIT /* [ unit ] */ ; FAILWITH /* [] */ } { /* [ address ] */ } } ;
             SOME
             /* [ option address ] */ } ;
         NIL operation
         /* [ list operation : option address ] */ ;
         PAIR
         /* [ pair (list operation) (option address) ] */ } }
Well typed (Gas remaining: 1039991.454 units remaining)	michelson_test_scripts/mini_scenarios/view_registers_callers.tz
{ parameter unit ;
  storage (list address) ;
  code { CDR
         /* [ list address ] */ ;
         SOURCE
         /* [ address : list address ] */ ;
         CONS
         /* [ list address ] */ ;
         NIL operation
         /* [ list operation : list address ] */ ;
         PAIR
         /* [ pair (list operation) (list address) ] */ } ;
  view "calls_count" unit nat { CDR /* [ list address ] */ ; SIZE /* [ nat ] */ } ;
  view "last_caller"
       unit
       (option address)
       { CDR
         /* [ list address ] */ ;
         IF_CONS
           { DIP { DROP /* [] */ } /* [ address ] */ ; SOME /* [ option address ] */ }
           { NONE address /* [ option address ] */ } } }
Well typed (Gas remaining: 1039960.608 units remaining)	michelson_test_scripts/mini_scenarios/viewable.tz
{ parameter nat ;
  storage nat ;
  code { CAR
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } ;
  view "add_v" nat nat { UNPAIR /* [ nat : nat ] */ ; ADD /* [ nat ] */ } ;
  view "mul_v" nat nat { UNPAIR /* [ nat : nat ] */ ; MUL /* [ nat ] */ } ;
  view "value" unit nat { CDR /* [ nat ] */ } ;
  view "loop"
       int
       unit
       { CAR
         /* [ int ] */ ;
         DUP
         /* [ int : int ] */ ;
         EQ
         /* [ bool : int ] */ ;
         IF { DROP /* [] */ ; UNIT /* [ unit ] */ }
            { SELF_ADDRESS
              /* [ address : int ] */ ;
              SWAP
              /* [ int : address ] */ ;
              PUSH int -1
              /* [ int : int : address ] */ ;
              ADD
              /* [ int : address ] */ ;
              VIEW "loop" unit
              /* [ option unit ] */ ;
              ASSERT_SOME } } ;
  view "my_external_view"
       int
       int
       { LAMBDA
           int
           int
           { DUP /* [ int : int ] */ ; MUL /* [ int ] */ }
         /* [ lambda int int : pair int nat ] */ ;
         SWAP
         /* [ pair int nat : lambda int int ] */ ;
         UNPAIR
         /* [ int : nat : lambda int int ] */ ;
         DUP 3
         /* [ lambda int int : int : nat : lambda int int ] */ ;
         SWAP
         /* [ int : lambda int int : nat : lambda int int ] */ ;
         EXEC
         /* [ int : nat : lambda int int ] */ ;
         SWAP
         /* [ nat : int : lambda int int ] */ ;
         DIG 2
         /* [ lambda int int : nat : int ] */ ;
         SWAP
         /* [ nat : lambda int int : int ] */ ;
         INT
         /* [ int : lambda int int : int ] */ ;
         EXEC
         /* [ int : int ] */ ;
         ADD
         /* [ int ] */ ;
         PUSH int 1000000
         /* [ int : int ] */ ;
         NEG
         /* [ int : int ] */ ;
         ADD
         /* [ int ] */ } ;
  view "v_external"
       address
       int
       { UNPAIR
         /* [ address : nat ] */ ;
         PUSH int 33
         /* [ int : address : nat ] */ ;
         VIEW "my_external_view" int
         /* [ option int : nat ] */ ;
         IF_NONE
           { DROP
             /* [] */ ;
             PUSH string "Call to 'my_external_view' returned None"
             /* [ string ] */ ;
             FAILWITH
             /* [] */ }
           { ADD /* [ int ] */ } } ;
  view "v_entrypoint"
       int
       int
       { LAMBDA
           int
           int
           { DUP /* [ int : int ] */ ; MUL /* [ int ] */ }
         /* [ lambda int int : pair int nat ] */ ;
         SWAP
         /* [ pair int nat : lambda int int ] */ ;
         UNPAIR
         /* [ int : nat : lambda int int ] */ ;
         DUP 3
         /* [ lambda int int : int : nat : lambda int int ] */ ;
         SWAP
         /* [ int : lambda int int : nat : lambda int int ] */ ;
         EXEC
         /* [ int : nat : lambda int int ] */ ;
         SWAP
         /* [ nat : int : lambda int int ] */ ;
         DIG 2
         /* [ lambda int int : nat : int ] */ ;
         SWAP
         /* [ nat : lambda int int : int ] */ ;
         INT
         /* [ int : lambda int int : int ] */ ;
         EXEC
         /* [ int : int ] */ ;
         ADD
         /* [ int ] */ } }
Well typed (Gas remaining: 1039947.221 units remaining)	michelson_test_scripts/mini_scenarios/vote_for_delegate.tz
{ parameter (option key_hash) ;
  storage
    (pair (pair %mgr1 (address %addr) (option %key key_hash))
          (pair %mgr2 (address %addr) (option %key key_hash))) ;
  code { DUP
         /* [ pair (option key_hash) (pair address (option key_hash)) address (option key_hash)
            : pair (option key_hash) (pair address (option key_hash)) address (option key_hash) ] */ ;
         CDAAR %addr @% ;
         SENDER
         /* [ address : address
            : pair (option key_hash) (pair address (option key_hash)) address (option key_hash) ] */ ;
         PAIR %@ %@
         /* [ pair address address
            : pair (option key_hash) (pair address (option key_hash)) address (option key_hash) ] */ ;
         UNPAIR
         /* [ address : address
            : pair (option key_hash) (pair address (option key_hash)) address (option key_hash) ] */ ;
         IFCMPEQ
           { UNPAIR
             /* [ option key_hash
                : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
             SWAP
             /* [ pair (pair address (option key_hash)) address (option key_hash)
                : option key_hash ] */ ;
             SET_CADR %key @changed_mgr1_key }
           { DUP
             /* [ pair (option key_hash) (pair address (option key_hash)) address (option key_hash)
                : pair (option key_hash) (pair address (option key_hash)) address (option key_hash) ] */ ;
             CDDAR ;
             SENDER
             /* [ address : address
                : pair (option key_hash) (pair address (option key_hash)) address (option key_hash) ] */ ;
             IFCMPEQ
               { UNPAIR
                 /* [ option key_hash
                    : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
                 SWAP
                 /* [ pair (pair address (option key_hash)) address (option key_hash)
                    : option key_hash ] */ ;
                 SET_CDDR %key }
               { FAIL } } ;
         DUP
         /* [ pair (pair address (option key_hash)) address (option key_hash)
            : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
         CADR ;
         DIP { DUP
               /* [ pair (pair address (option key_hash)) address (option key_hash)
                  : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
               CDDR }
         /* [ option key_hash : option key_hash
            : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
         IF_NONE
           { IF_NONE
               { NONE key_hash
                 /* [ option key_hash
                    : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
                 SET_DELEGATE
                 /* [ operation
                    : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
                 NIL operation
                 /* [ list operation : operation
                    : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
                 SWAP
                 /* [ operation : list operation
                    : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
                 CONS
                 /* [ list operation
                    : pair (pair address (option key_hash)) address (option key_hash) ] */ }
               { DROP
                 /* [ pair (pair address (option key_hash)) address (option key_hash) ] */ ;
                 NIL operation
                 /* [ list operation
                    : pair (pair address (option key_hash)) address (option key_hash) ] */ } }
           { SWAP
             /* [ option key_hash : key_hash
                : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
             IF_SOME
               { DIP { DUP
                       /* [ key_hash : key_hash
                          : pair (pair address (option key_hash)) address (option key_hash) ] */ }
                 /* [ key_hash : key_hash : key_hash
                    : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
                 IFCMPEQ
                   { SOME
                     /* [ option key_hash
                        : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
                     SET_DELEGATE
                     /* [ operation
                        : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
                     NIL operation
                     /* [ list operation : operation
                        : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
                     SWAP
                     /* [ operation : list operation
                        : pair (pair address (option key_hash)) address (option key_hash) ] */ ;
                     CONS
                     /* [ list operation
                        : pair (pair address (option key_hash)) address (option key_hash) ] */ }
                   { DROP
                     /* [ pair (pair address (option key_hash)) address (option key_hash) ] */ ;
                     NIL operation
                     /* [ list operation
                        : pair (pair address (option key_hash)) address (option key_hash) ] */ } }
               { DROP
                 /* [ pair (pair address (option key_hash)) address (option key_hash) ] */ ;
                 NIL operation
                 /* [ list operation
                    : pair (pair address (option key_hash)) address (option key_hash) ] */ } } ;
         PAIR
         /* [ pair (list operation) (pair address (option key_hash)) address (option key_hash) ] */ } }
Well typed (Gas remaining: 1039964.178 units remaining)	michelson_test_scripts/mini_scenarios/weather_insurance.tz
{ parameter (pair (signature %signed_weather_data) (nat :rain %actual_level)) ;
  storage
    (pair (pair (address %under_key) (address %over_key))
          (pair (nat :rain %rain_level) (key %weather_service_key))) ;
  code { DUP
         /* [ pair (pair signature nat) (pair address address) nat key
            : pair (pair signature nat) (pair address address) nat key ] */ ;
         DUP
         /* [ pair (pair signature nat) (pair address address) nat key
            : pair (pair signature nat) (pair address address) nat key
            : pair (pair signature nat) (pair address address) nat key ] */ ;
         CAR
         /* [ pair signature nat
            : pair (pair signature nat) (pair address address) nat key
            : pair (pair signature nat) (pair address address) nat key ] */ ;
         MAP_CDR
           { PACK
             /* [ bytes : pair signature nat
                : pair (pair signature nat) (pair address address) nat key
                : pair (pair signature nat) (pair address address) nat key ] */ ;
             BLAKE2B
             /* [ bytes : pair signature nat
                : pair (pair signature nat) (pair address address) nat key
                : pair (pair signature nat) (pair address address) nat key ] */ } ;
         SWAP
         /* [ pair (pair signature nat) (pair address address) nat key
            : pair signature bytes
            : pair (pair signature nat) (pair address address) nat key ] */ ;
         CDDDR %weather_service_key ;
         DIP { UNPAIR
               /* [ signature : bytes
                  : pair (pair signature nat) (pair address address) nat key ] */ }
         /* [ key : signature : bytes
            : pair (pair signature nat) (pair address address) nat key ] */ ;
         CHECK_SIGNATURE @sigok
         /* [ bool : pair (pair signature nat) (pair address address) nat key ] */ ;
         ASSERT ;
         DUP
         /* [ pair (pair signature nat) (pair address address) nat key
            : pair (pair signature nat) (pair address address) nat key ] */ ;
         DUP
         /* [ pair (pair signature nat) (pair address address) nat key
            : pair (pair signature nat) (pair address address) nat key
            : pair (pair signature nat) (pair address address) nat key ] */ ;
         DUP
         /* [ pair (pair signature nat) (pair address address) nat key
            : pair (pair signature nat) (pair address address) nat key
            : pair (pair signature nat) (pair address address) nat key
            : pair (pair signature nat) (pair address address) nat key ] */ ;
         DIP 3
             { CDR %storage /* [ pair (pair address address) nat key ] */ }
         /* [ pair (pair signature nat) (pair address address) nat key
            : pair (pair signature nat) (pair address address) nat key
            : pair (pair signature nat) (pair address address) nat key
            : pair (pair address address) nat key ] */ ;
         DIP 2
             { CDAR }
         /* [ pair (pair signature nat) (pair address address) nat key
            : pair (pair signature nat) (pair address address) nat key
            : pair address address : pair (pair address address) nat key ] */ ;
         DIP { CADR %actual_level }
         /* [ pair (pair signature nat) (pair address address) nat key : nat
            : pair address address : pair (pair address address) nat key ] */ ;
         CDDAR %rain_level ;
         CMPLT ;
         IF { CAR %under_key /* [ address : pair (pair address address) nat key ] */ }
            { CDR %over_key /* [ address : pair (pair address address) nat key ] */ } ;
         CONTRACT unit
         /* [ option (contract unit) : pair (pair address address) nat key ] */ ;
         ASSERT_SOME ;
         BALANCE
         /* [ mutez : contract unit : pair (pair address address) nat key ] */ ;
         UNIT
         /* [ unit : mutez : contract unit : pair (pair address address) nat key ] */ ;
         TRANSFER_TOKENS @trans.op
         /* [ operation : pair (pair address address) nat key ] */ ;
         NIL operation
         /* [ list operation : operation : pair (pair address address) nat key ] */ ;
         SWAP
         /* [ operation : list operation : pair (pair address address) nat key ] */ ;
         CONS
         /* [ list operation : pair (pair address address) nat key ] */ ;
         PAIR
         /* [ pair (list operation) (pair address address) nat key ] */ } }
Well typed (Gas remaining: 1039967.364 units remaining)	michelson_test_scripts/mini_scenarios/xcat.tz
{ parameter bytes ;
  storage unit ;
  code { CAR @preimage
         /* [ bytes ] */ ;
         DIP { PUSH @from key_hash "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx"
               /* [ key_hash ] */ ;
               IMPLICIT_ACCOUNT
               /* [ contract unit ] */ ;
               PUSH @to
                 key_hash
                 "tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN"
               /* [ key_hash : contract unit ] */ ;
               IMPLICIT_ACCOUNT
               /* [ contract unit : contract unit ] */ ;
               PUSH @target_hash bytes 0x123456
               /* [ bytes : contract unit : contract unit ] */ ;
               PUSH @deadline
                 timestamp
                 "2018-08-08 00:00:00Z"
               /* [ timestamp : bytes : contract unit : contract unit ] */ }
         /* [ bytes : timestamp : bytes : contract unit : contract unit ] */ ;
         SWAP
         /* [ timestamp : bytes : bytes : contract unit : contract unit ] */ ;
         NOW
         /* [ timestamp : timestamp : bytes : bytes : contract unit : contract unit ] */ ;
         IFCMPLT
           { DROP
             /* [ bytes : contract unit : contract unit ] */ ;
             DROP
             /* [ contract unit : contract unit ] */ ;
             DROP
             /* [ contract unit ] */ ;
             BALANCE
             /* [ mutez : contract unit ] */ ;
             UNIT
             /* [ unit : mutez : contract unit ] */ ;
             TRANSFER_TOKENS
             /* [ operation ] */ }
           { DUP
             /* [ bytes : bytes : bytes : contract unit : contract unit ] */ ;
             SIZE
             /* [ nat : bytes : bytes : contract unit : contract unit ] */ ;
             PUSH @max_length
               nat
               32
             /* [ nat : nat : bytes : bytes : contract unit : contract unit ] */ ;
             IFCMPLT
               { PUSH string
                      "preimage too long"
                 /* [ string : bytes : bytes : contract unit : contract unit ] */ ;
                 FAILWITH
                 /* [] */ }
               { SHA256 @candidate_hash
                 /* [ bytes : bytes : contract unit : contract unit ] */ ;
                 IFCMPNEQ
                   { PUSH string "invalid preimage"
                     /* [ string : contract unit : contract unit ] */ ;
                     FAILWITH
                     /* [] */ }
                   { BALANCE
                     /* [ mutez : contract unit : contract unit ] */ ;
                     UNIT
                     /* [ unit : mutez : contract unit : contract unit ] */ ;
                     TRANSFER_TOKENS
                     /* [ operation : contract unit ] */ ;
                     DIP { DROP /* [] */ }
                     /* [ operation ] */ } } } ;
         NIL operation
         /* [ list operation : operation ] */ ;
         SWAP
         /* [ operation : list operation ] */ ;
         CONS
         /* [ list operation ] */ ;
         UNIT
         /* [ unit : list operation ] */ ;
         SWAP
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039924.536 units remaining)	michelson_test_scripts/mini_scenarios/xcat_dapp.tz
{ parameter
    (or (pair %fund
           (address %dest)
           (pair %settings (bytes %target_hash) (timestamp %deadline)))
        (or %claim_refund (bytes %preimage_claim) (bytes %refund_hash))) ;
  storage
    (pair (big_map
             bytes
             (pair (pair %recipients (address %from) (address %dest))
                   (pair %settings (mutez %amount) (timestamp %deadline))))
          unit) ;
  code { NIL @operations
           operation
         /* [ list operation
            : pair (or (pair address bytes timestamp) (or bytes bytes))
                 (big_map bytes (pair (pair address address) mutez timestamp))
                 unit ] */ ;
         SWAP
         /* [ pair (or (pair address bytes timestamp) (or bytes bytes))
                 (big_map bytes (pair (pair address address) mutez timestamp))
                 unit : list operation ] */ ;
         UNPAPAIR @% @% @% ;
         DIP { DUP
               /* [ big_map bytes (pair (pair address address) mutez timestamp)
                  : big_map bytes (pair (pair address address) mutez timestamp) : unit
                  : list operation ] */ }
         /* [ or (pair address bytes timestamp) (or bytes bytes)
            : big_map bytes (pair (pair address address) mutez timestamp)
            : big_map bytes (pair (pair address address) mutez timestamp) : unit
            : list operation ] */ ;
         IF_LEFT
           { UNPAIR @% @%
             /* [ address : pair bytes timestamp
                : big_map bytes (pair (pair address address) mutez timestamp)
                : big_map bytes (pair (pair address address) mutez timestamp) : unit
                : list operation ] */ ;
             DUP
             /* [ address : address : pair bytes timestamp
                : big_map bytes (pair (pair address address) mutez timestamp)
                : big_map bytes (pair (pair address address) mutez timestamp) : unit
                : list operation ] */ ;
             CONTRACT @dest
               unit
             /* [ option (contract unit) : address : pair bytes timestamp
                : big_map bytes (pair (pair address address) mutez timestamp)
                : big_map bytes (pair (pair address address) mutez timestamp) : unit
                : list operation ] */ ;
             ASSERT_SOME ;
             DROP
             /* [ address : pair bytes timestamp
                : big_map bytes (pair (pair address address) mutez timestamp)
                : big_map bytes (pair (pair address address) mutez timestamp) : unit
                : list operation ] */ ;
             SWAP
             /* [ pair bytes timestamp : address
                : big_map bytes (pair (pair address address) mutez timestamp)
                : big_map bytes (pair (pair address address) mutez timestamp) : unit
                : list operation ] */ ;
             UNPAIR @% @%
             /* [ bytes : timestamp : address
                : big_map bytes (pair (pair address address) mutez timestamp)
                : big_map bytes (pair (pair address address) mutez timestamp) : unit
                : list operation ] */ ;
             DIP { AMOUNT @amount
                   /* [ mutez : timestamp : address
                      : big_map bytes (pair (pair address address) mutez timestamp)
                      : big_map bytes (pair (pair address address) mutez timestamp) : unit
                      : list operation ] */ ;
                   SENDER
                   /* [ address : mutez : timestamp : address
                      : big_map bytes (pair (pair address address) mutez timestamp)
                      : big_map bytes (pair (pair address address) mutez timestamp) : unit
                      : list operation ] */ ;
                   DUP
                   /* [ address : address : mutez : timestamp : address
                      : big_map bytes (pair (pair address address) mutez timestamp)
                      : big_map bytes (pair (pair address address) mutez timestamp) : unit
                      : list operation ] */ ;
                   CONTRACT @from
                     unit
                   /* [ option (contract unit) : address : mutez : timestamp : address
                      : big_map bytes (pair (pair address address) mutez timestamp)
                      : big_map bytes (pair (pair address address) mutez timestamp) : unit
                      : list operation ] */ ;
                   ASSERT_SOME ;
                   DROP
                   /* [ address : mutez : timestamp : address
                      : big_map bytes (pair (pair address address) mutez timestamp)
                      : big_map bytes (pair (pair address address) mutez timestamp) : unit
                      : list operation ] */ ;
                   DIP { PAIR
                         /* [ pair mutez timestamp : address
                            : big_map bytes (pair (pair address address) mutez timestamp)
                            : big_map bytes (pair (pair address address) mutez timestamp) : unit
                            : list operation ] */ ;
                         SWAP
                         /* [ address : pair mutez timestamp
                            : big_map bytes (pair (pair address address) mutez timestamp)
                            : big_map bytes (pair (pair address address) mutez timestamp) : unit
                            : list operation ] */ }
                   /* [ address : address : pair mutez timestamp
                      : big_map bytes (pair (pair address address) mutez timestamp)
                      : big_map bytes (pair (pair address address) mutez timestamp) : unit
                      : list operation ] */ ;
                   PAIR
                   /* [ pair address address : pair mutez timestamp
                      : big_map bytes (pair (pair address address) mutez timestamp)
                      : big_map bytes (pair (pair address address) mutez timestamp) : unit
                      : list operation ] */ ;
                   PAIR
                   /* [ pair (pair address address) mutez timestamp
                      : big_map bytes (pair (pair address address) mutez timestamp)
                      : big_map bytes (pair (pair address address) mutez timestamp) : unit
                      : list operation ] */ ;
                   SOME @xcat
                   /* [ option (pair (pair address address) mutez timestamp)
                      : big_map bytes (pair (pair address address) mutez timestamp)
                      : big_map bytes (pair (pair address address) mutez timestamp) : unit
                      : list operation ] */ ;
                   SWAP
                   /* [ big_map bytes (pair (pair address address) mutez timestamp)
                      : option (pair (pair address address) mutez timestamp)
                      : big_map bytes (pair (pair address address) mutez timestamp) : unit
                      : list operation ] */ }
             /* [ bytes : big_map bytes (pair (pair address address) mutez timestamp)
                : option (pair (pair address address) mutez timestamp)
                : big_map bytes (pair (pair address address) mutez timestamp) : unit
                : list operation ] */ ;
             DUP
             /* [ bytes : bytes : big_map bytes (pair (pair address address) mutez timestamp)
                : option (pair (pair address address) mutez timestamp)
                : big_map bytes (pair (pair address address) mutez timestamp) : unit
                : list operation ] */ ;
             DIP { MEM
                   /* [ bool : option (pair (pair address address) mutez timestamp)
                      : big_map bytes (pair (pair address address) mutez timestamp) : unit
                      : list operation ] */ ;
                   NOT
                   /* [ bool : option (pair (pair address address) mutez timestamp)
                      : big_map bytes (pair (pair address address) mutez timestamp) : unit
                      : list operation ] */ ;
                   ASSERT }
             /* [ bytes : option (pair (pair address address) mutez timestamp)
                : big_map bytes (pair (pair address address) mutez timestamp) : unit
                : list operation ] */ ;
             UPDATE
             /* [ big_map bytes (pair (pair address address) mutez timestamp) : unit
                : list operation ] */ ;
             PAIR @new_storage
             /* [ pair (big_map bytes (pair (pair address address) mutez timestamp)) unit
                : list operation ] */ ;
             SWAP
             /* [ list operation
                : pair (big_map bytes (pair (pair address address) mutez timestamp)) unit ] */ ;
             PAIR
             /* [ pair (list operation)
                     (big_map bytes (pair (pair address address) mutez timestamp))
                     unit ] */ }
           { IF_LEFT
               { DUP
                 /* [ bytes : bytes : big_map bytes (pair (pair address address) mutez timestamp)
                    : big_map bytes (pair (pair address address) mutez timestamp) : unit
                    : list operation ] */ ;
                 SIZE
                 /* [ nat : bytes : big_map bytes (pair (pair address address) mutez timestamp)
                    : big_map bytes (pair (pair address address) mutez timestamp) : unit
                    : list operation ] */ ;
                 PUSH nat
                      32
                 /* [ nat : nat : bytes
                    : big_map bytes (pair (pair address address) mutez timestamp)
                    : big_map bytes (pair (pair address address) mutez timestamp) : unit
                    : list operation ] */ ;
                 ASSERT_CMPGE ;
                 SHA256 @hash
                 /* [ bytes : big_map bytes (pair (pair address address) mutez timestamp)
                    : big_map bytes (pair (pair address address) mutez timestamp) : unit
                    : list operation ] */ ;
                 DUP
                 /* [ bytes : bytes : big_map bytes (pair (pair address address) mutez timestamp)
                    : big_map bytes (pair (pair address address) mutez timestamp) : unit
                    : list operation ] */ ;
                 DIP { SWAP
                       /* [ big_map bytes (pair (pair address address) mutez timestamp) : bytes
                          : big_map bytes (pair (pair address address) mutez timestamp) : unit
                          : list operation ] */ }
                 /* [ bytes : big_map bytes (pair (pair address address) mutez timestamp) : bytes
                    : big_map bytes (pair (pair address address) mutez timestamp) : unit
                    : list operation ] */ ;
                 DIP 2
                     { GET
                       /* [ option (pair (pair address address) mutez timestamp) : unit
                          : list operation ] */ ;
                       ASSERT_SOME ;
                       DUP
                       /* [ pair (pair address address) mutez timestamp
                          : pair (pair address address) mutez timestamp : unit : list operation ] */ ;
                       CADR @% ;
                       CONTRACT @dest
                         unit
                       /* [ option (contract unit) : pair (pair address address) mutez timestamp : unit
                          : list operation ] */ ;
                       ASSERT_SOME ;
                       SWAP
                       /* [ pair (pair address address) mutez timestamp : contract unit : unit
                          : list operation ] */ ;
                       CDR @%
                       /* [ pair mutez timestamp : contract unit : unit : list operation ] */ ;
                       UNPAIR @% @%
                       /* [ mutez : timestamp : contract unit : unit : list operation ] */ ;
                       SWAP
                       /* [ timestamp : mutez : contract unit : unit : list operation ] */ ;
                       NOW
                       /* [ timestamp : timestamp : mutez : contract unit : unit : list operation ] */ ;
                       ASSERT_CMPLT ;
                       UNIT
                       /* [ unit : mutez : contract unit : unit : list operation ] */ ;
                       TRANSFER_TOKENS
                       /* [ operation : unit : list operation ] */ }
                 /* [ bytes : big_map bytes (pair (pair address address) mutez timestamp)
                    : operation : unit : list operation ] */ }
               { DUP
                 /* [ bytes : bytes : big_map bytes (pair (pair address address) mutez timestamp)
                    : big_map bytes (pair (pair address address) mutez timestamp) : unit
                    : list operation ] */ ;
                 DIP { GET
                       /* [ option (pair (pair address address) mutez timestamp)
                          : big_map bytes (pair (pair address address) mutez timestamp) : unit
                          : list operation ] */ ;
                       ASSERT_SOME ;
                       DUP
                       /* [ pair (pair address address) mutez timestamp
                          : pair (pair address address) mutez timestamp
                          : big_map bytes (pair (pair address address) mutez timestamp) : unit
                          : list operation ] */ ;
                       CAAR @% ;
                       CONTRACT @from
                         unit
                       /* [ option (contract unit) : pair (pair address address) mutez timestamp
                          : big_map bytes (pair (pair address address) mutez timestamp) : unit
                          : list operation ] */ ;
                       ASSERT_SOME ;
                       SWAP
                       /* [ pair (pair address address) mutez timestamp : contract unit
                          : big_map bytes (pair (pair address address) mutez timestamp) : unit
                          : list operation ] */ ;
                       CDR
                       /* [ pair mutez timestamp : contract unit
                          : big_map bytes (pair (pair address address) mutez timestamp) : unit
                          : list operation ] */ ;
                       UNPAIR @% @%
                       /* [ mutez : timestamp : contract unit
                          : big_map bytes (pair (pair address address) mutez timestamp) : unit
                          : list operation ] */ ;
                       SWAP
                       /* [ timestamp : mutez : contract unit
                          : big_map bytes (pair (pair address address) mutez timestamp) : unit
                          : list operation ] */ ;
                       NOW
                       /* [ timestamp : timestamp : mutez : contract unit
                          : big_map bytes (pair (pair address address) mutez timestamp) : unit
                          : list operation ] */ ;
                       ASSERT_CMPGE ;
                       UNIT
                       /* [ unit : mutez : contract unit
                          : big_map bytes (pair (pair address address) mutez timestamp) : unit
                          : list operation ] */ ;
                       TRANSFER_TOKENS
                       /* [ operation : big_map bytes (pair (pair address address) mutez timestamp)
                          : unit : list operation ] */ ;
                       SWAP
                       /* [ big_map bytes (pair (pair address address) mutez timestamp) : operation
                          : unit : list operation ] */ }
                 /* [ bytes : big_map bytes (pair (pair address address) mutez timestamp)
                    : operation : unit : list operation ] */ } ;
             NONE @none
               (pair (pair address address) (pair mutez timestamp))
             /* [ option (pair (pair address address) mutez timestamp) : bytes
                : big_map bytes (pair (pair address address) mutez timestamp) : operation
                : unit : list operation ] */ ;
             SWAP
             /* [ bytes : option (pair (pair address address) mutez timestamp)
                : big_map bytes (pair (pair address address) mutez timestamp) : operation
                : unit : list operation ] */ ;
             UPDATE @cleared_map
             /* [ big_map bytes (pair (pair address address) mutez timestamp) : operation
                : unit : list operation ] */ ;
             SWAP
             /* [ operation : big_map bytes (pair (pair address address) mutez timestamp)
                : unit : list operation ] */ ;
             DIP { PAIR
                   /* [ pair (big_map bytes (pair (pair address address) mutez timestamp)) unit
                      : list operation ] */ ;
                   SWAP
                   /* [ list operation
                      : pair (big_map bytes (pair (pair address address) mutez timestamp)) unit ] */ }
             /* [ operation : list operation
                : pair (big_map bytes (pair (pair address address) mutez timestamp)) unit ] */ ;
             CONS
             /* [ list operation
                : pair (big_map bytes (pair (pair address address) mutez timestamp)) unit ] */ ;
             PAIR
             /* [ pair (list operation)
                     (big_map bytes (pair (pair address address) mutez timestamp))
                     unit ] */ } } }
Well typed (Gas remaining: 1039996.019 units remaining)	michelson_test_scripts/non_regression/262_bug.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         LAMBDA unit unit { /* [ unit ] */ }
         /* [ lambda unit unit ] */ ;
         UNIT
         /* [ unit : lambda unit unit ] */ ;
         EXEC
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039993.536 units remaining)	michelson_test_scripts/non_regression/843_bug.tz
{ parameter never ;
  storage (pair address (lambda unit unit)) ;
  code { CAR
         /* [ never ] */ ;
         PUSH address "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx"
         /* [ address : never ] */ ;
         DROP
         /* [ never ] */ ;
         NEVER
         /* [] */ } }
Well typed (Gas remaining: 1039996.898 units remaining)	michelson_test_scripts/non_regression/bad_annot_contract.tz
{ parameter bytes ;
  storage (option (lambda unit unit)) ;
  code { CAR
         /* [ bytes ] */ ;
         UNPACK (lambda unit unit)
         /* [ option (lambda unit unit) ] */ ;
         NIL operation
         /* [ list operation : option (lambda unit unit) ] */ ;
         PAIR
         /* [ pair (list operation) (option (lambda unit unit)) ] */ } }
Well typed (Gas remaining: 1039993.858 units remaining)	michelson_test_scripts/non_regression/pairk_annot.tz
{ parameter unit ;
  storage unit ;
  code { SENDER
         /* [ address : pair unit unit ] */ ;
         SOURCE
         /* [ address : address : pair unit unit ] */ ;
         PAIR 2
         /* [ pair address address : pair unit unit ] */ ;
         SOURCE
         /* [ address : pair address address : pair unit unit ] */ ;
         SENDER
         /* [ address : address : pair address address : pair unit unit ] */ ;
         PAIR 2
         /* [ pair address address : pair address address : pair unit unit ] */ ;
         COMPARE
         /* [ int : pair unit unit ] */ ;
         DROP
         /* [ pair unit unit ] */ ;
         CDR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039992.816 units remaining)	michelson_test_scripts/opcodes/abs.tz
{ parameter nat ;
  storage unit ;
  code { CAR
         /* [ nat ] */ ;
         DUP
         /* [ nat : nat ] */ ;
         NEG
         /* [ int : nat ] */ ;
         ABS
         /* [ nat : nat ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039947.520 units remaining)	michelson_test_scripts/opcodes/add.tz
{ parameter unit ;
  storage unit ;
  code { CAR
         /* [ unit ] */ ;
         PUSH int 2
         /* [ int : unit ] */ ;
         PUSH int 2
         /* [ int : int : unit ] */ ;
         ADD
         /* [ int : unit ] */ ;
         PUSH int 4
         /* [ int : int : unit ] */ ;
         ASSERT_CMPEQ ;
         PUSH int 2
         /* [ int : unit ] */ ;
         PUSH int 2
         /* [ int : int : unit ] */ ;
         ADD
         /* [ int : unit ] */ ;
         PUSH int 4
         /* [ int : int : unit ] */ ;
         ASSERT_CMPEQ ;
         PUSH int 2
         /* [ int : unit ] */ ;
         PUSH nat 2
         /* [ nat : int : unit ] */ ;
         ADD
         /* [ int : unit ] */ ;
         PUSH int 4
         /* [ int : int : unit ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 2
         /* [ nat : unit ] */ ;
         PUSH int 2
         /* [ int : nat : unit ] */ ;
         ADD
         /* [ int : unit ] */ ;
         PUSH int 4
         /* [ int : int : unit ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 2
         /* [ nat : unit ] */ ;
         PUSH nat 2
         /* [ nat : nat : unit ] */ ;
         ADD
         /* [ nat : unit ] */ ;
         PUSH nat 4
         /* [ nat : nat : unit ] */ ;
         ASSERT_CMPEQ ;
         PUSH int 60
         /* [ int : unit ] */ ;
         PUSH timestamp "2019-09-09T12:08:37Z"
         /* [ timestamp : int : unit ] */ ;
         ADD
         /* [ timestamp : unit ] */ ;
         PUSH timestamp "2019-09-09T12:09:37Z"
         /* [ timestamp : timestamp : unit ] */ ;
         ASSERT_CMPEQ ;
         PUSH timestamp "2019-09-09T12:08:37Z"
         /* [ timestamp : unit ] */ ;
         PUSH int 60
         /* [ int : timestamp : unit ] */ ;
         ADD
         /* [ timestamp : unit ] */ ;
         PUSH timestamp "2019-09-09T12:09:37Z"
         /* [ timestamp : timestamp : unit ] */ ;
         ASSERT_CMPEQ ;
         PUSH mutez 1000
         /* [ mutez : unit ] */ ;
         PUSH mutez 1000
         /* [ mutez : mutez : unit ] */ ;
         ADD
         /* [ mutez : unit ] */ ;
         PUSH mutez 2000
         /* [ mutez : mutez : unit ] */ ;
         ASSERT_CMPEQ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039996.271 units remaining)	michelson_test_scripts/opcodes/add_bls12_381_fr.tz
{ parameter (pair bls12_381_fr bls12_381_fr) ;
  storage (option bls12_381_fr) ;
  code { CAR
         /* [ pair bls12_381_fr bls12_381_fr ] */ ;
         UNPAIR
         /* [ bls12_381_fr : bls12_381_fr ] */ ;
         ADD
         /* [ bls12_381_fr ] */ ;
         SOME
         /* [ option bls12_381_fr ] */ ;
         NIL operation
         /* [ list operation : option bls12_381_fr ] */ ;
         PAIR
         /* [ pair (list operation) (option bls12_381_fr) ] */ } }
Well typed (Gas remaining: 1039996.271 units remaining)	michelson_test_scripts/opcodes/add_bls12_381_g1.tz
{ parameter (pair bls12_381_g1 bls12_381_g1) ;
  storage (option bls12_381_g1) ;
  code { CAR
         /* [ pair bls12_381_g1 bls12_381_g1 ] */ ;
         UNPAIR
         /* [ bls12_381_g1 : bls12_381_g1 ] */ ;
         ADD
         /* [ bls12_381_g1 ] */ ;
         SOME
         /* [ option bls12_381_g1 ] */ ;
         NIL operation
         /* [ list operation : option bls12_381_g1 ] */ ;
         PAIR
         /* [ pair (list operation) (option bls12_381_g1) ] */ } }
Well typed (Gas remaining: 1039996.271 units remaining)	michelson_test_scripts/opcodes/add_bls12_381_g2.tz
{ parameter (pair bls12_381_g2 bls12_381_g2) ;
  storage (option bls12_381_g2) ;
  code { CAR
         /* [ pair bls12_381_g2 bls12_381_g2 ] */ ;
         UNPAIR
         /* [ bls12_381_g2 : bls12_381_g2 ] */ ;
         ADD
         /* [ bls12_381_g2 ] */ ;
         SOME
         /* [ option bls12_381_g2 ] */ ;
         NIL operation
         /* [ list operation : option bls12_381_g2 ] */ ;
         PAIR
         /* [ pair (list operation) (option bls12_381_g2) ] */ } }
Well typed (Gas remaining: 1039994.537 units remaining)	michelson_test_scripts/opcodes/add_delta_timestamp.tz
{ parameter (pair int timestamp) ;
  storage (option timestamp) ;
  code { CAR
         /* [ pair int timestamp ] */ ;
         DUP
         /* [ pair int timestamp : pair int timestamp ] */ ;
         CAR
         /* [ int : pair int timestamp ] */ ;
         DIP { CDR /* [ timestamp ] */ }
         /* [ int : timestamp ] */ ;
         ADD
         /* [ timestamp ] */ ;
         SOME
         /* [ option timestamp ] */ ;
         NIL operation
         /* [ list operation : option timestamp ] */ ;
         PAIR
         /* [ pair (list operation) (option timestamp) ] */ } }
Well typed (Gas remaining: 1039994.537 units remaining)	michelson_test_scripts/opcodes/add_timestamp_delta.tz
{ parameter (pair timestamp int) ;
  storage (option timestamp) ;
  code { CAR
         /* [ pair timestamp int ] */ ;
         DUP
         /* [ pair timestamp int : pair timestamp int ] */ ;
         CAR
         /* [ timestamp : pair timestamp int ] */ ;
         DIP { CDR /* [ int ] */ }
         /* [ timestamp : int ] */ ;
         ADD
         /* [ timestamp ] */ ;
         SOME
         /* [ option timestamp ] */ ;
         NIL operation
         /* [ list operation : option timestamp ] */ ;
         PAIR
         /* [ pair (list operation) (option timestamp) ] */ } }
Well typed (Gas remaining: 1039996.828 units remaining)	michelson_test_scripts/opcodes/address.tz
{ parameter (contract unit) ;
  storage (option address) ;
  code { CAR
         /* [ contract unit ] */ ;
         ADDRESS
         /* [ address ] */ ;
         SOME
         /* [ option address ] */ ;
         NIL operation
         /* [ list operation : option address ] */ ;
         PAIR
         /* [ pair (list operation) (option address) ] */ } }
Well typed (Gas remaining: 1039986.649 units remaining)	michelson_test_scripts/opcodes/amount_after_fib_view.tz
{ parameter address ;
  storage mutez ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 3
         /* [ nat : address : address ] */ ;
         VIEW "fib" nat
         /* [ option nat : address ] */ ;
         ASSERT_SOME ;
         DROP
         /* [ address ] */ ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 15000000
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         AMOUNT
         /* [ mutez : operation ] */ ;
         SWAP
         /* [ operation : mutez ] */ ;
         NIL operation
         /* [ list operation : operation : mutez ] */ ;
         SWAP
         /* [ operation : list operation : mutez ] */ ;
         CONS
         /* [ list operation : mutez ] */ ;
         PAIR
         /* [ pair (list operation) mutez ] */ } }
Well typed (Gas remaining: 1039986.856 units remaining)	michelson_test_scripts/opcodes/amount_after_nonexistent_view.tz
{ parameter address ;
  storage mutez ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 0
         /* [ nat : address : address ] */ ;
         VIEW "nonexistent" (pair nat nat)
         /* [ option (pair nat nat) : address ] */ ;
         ASSERT_NONE ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 15000000
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         AMOUNT
         /* [ mutez : operation ] */ ;
         SWAP
         /* [ operation : mutez ] */ ;
         NIL operation
         /* [ list operation : operation : mutez ] */ ;
         SWAP
         /* [ operation : list operation : mutez ] */ ;
         CONS
         /* [ list operation : mutez ] */ ;
         PAIR
         /* [ pair (list operation) mutez ] */ } }
Well typed (Gas remaining: 1039986.472 units remaining)	michelson_test_scripts/opcodes/amount_after_view.tz
{ parameter address ;
  storage mutez ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 0
         /* [ nat : address : address ] */ ;
         VIEW "id" (pair nat nat)
         /* [ option (pair nat nat) : address ] */ ;
         ASSERT_SOME ;
         DROP
         /* [ address ] */ ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 15000000
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         AMOUNT
         /* [ mutez : operation ] */ ;
         SWAP
         /* [ operation : mutez ] */ ;
         NIL operation
         /* [ list operation : operation : mutez ] */ ;
         SWAP
         /* [ operation : list operation : mutez ] */ ;
         CONS
         /* [ list operation : mutez ] */ ;
         PAIR
         /* [ pair (list operation) mutez ] */ } }
Well typed (Gas remaining: 1039995.334 units remaining)	michelson_test_scripts/opcodes/and.tz
{ parameter (pair :param (bool %first) (bool %second)) ;
  storage (option bool) ;
  code { CAR
         /* [ pair bool bool ] */ ;
         UNPAIR
         /* [ bool : bool ] */ ;
         AND @and
         /* [ bool ] */ ;
         SOME @res
         /* [ option bool ] */ ;
         NIL @noop operation
         /* [ list operation : option bool ] */ ;
         PAIR
         /* [ pair (list operation) (option bool) ] */ ;
         UNPAIR @x @y
         /* [ list operation : option bool ] */ ;
         PAIR %a %b
         /* [ pair (list operation) (option bool) ] */ } }
Well typed (Gas remaining: 1039972.833 units remaining)	michelson_test_scripts/opcodes/and_binary.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH nat 5
         /* [ nat ] */ ;
         PUSH nat 6
         /* [ nat : nat ] */ ;
         AND
         /* [ nat ] */ ;
         PUSH nat 4
         /* [ nat : nat ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 6
         /* [ nat ] */ ;
         PUSH int 5
         /* [ int : nat ] */ ;
         AND
         /* [ nat ] */ ;
         PUSH nat 4
         /* [ nat : nat ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 12
         /* [ nat ] */ ;
         PUSH int -1
         /* [ int : nat ] */ ;
         AND
         /* [ nat ] */ ;
         PUSH nat 12
         /* [ nat : nat ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 12
         /* [ nat ] */ ;
         PUSH int -5
         /* [ int : nat ] */ ;
         AND
         /* [ nat ] */ ;
         PUSH nat 8
         /* [ nat : nat ] */ ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL @noop operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039978.970 units remaining)	michelson_test_scripts/opcodes/and_bytes_016.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH bytes 0x05
         /* [ bytes ] */ ;
         PUSH bytes 0x06
         /* [ bytes : bytes ] */ ;
         AND
         /* [ bytes ] */ ;
         PUSH bytes 0x04
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x0005
         /* [ bytes ] */ ;
         PUSH bytes 0x0106
         /* [ bytes : bytes ] */ ;
         AND
         /* [ bytes ] */ ;
         PUSH bytes 0x0004
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x05
         /* [ bytes ] */ ;
         PUSH bytes 0x0106
         /* [ bytes : bytes ] */ ;
         AND
         /* [ bytes ] */ ;
         PUSH bytes 0x04
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL @noop operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039996.850 units remaining)	michelson_test_scripts/opcodes/and_logical_1.tz
{ parameter (pair bool bool) ;
  storage bool ;
  code { CAR
         /* [ pair bool bool ] */ ;
         UNPAIR
         /* [ bool : bool ] */ ;
         AND @and
         /* [ bool ] */ ;
         NIL @noop operation
         /* [ list operation : bool ] */ ;
         PAIR
         /* [ pair (list operation) bool ] */ } }
Well typed (Gas remaining: 1039997.552 units remaining)	michelson_test_scripts/opcodes/balance.tz
{ parameter unit ;
  storage mutez ;
  code { DROP
         /* [] */ ;
         BALANCE
         /* [ mutez ] */ ;
         NIL operation
         /* [ list operation : mutez ] */ ;
         PAIR
         /* [ pair (list operation) mutez ] */ } }
Well typed (Gas remaining: 1039986.649 units remaining)	michelson_test_scripts/opcodes/balance_after_fib_view.tz
{ parameter address ;
  storage mutez ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 3
         /* [ nat : address : address ] */ ;
         VIEW "fib" nat
         /* [ option nat : address ] */ ;
         ASSERT_SOME ;
         DROP
         /* [ address ] */ ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 15000000
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         BALANCE
         /* [ mutez : operation ] */ ;
         SWAP
         /* [ operation : mutez ] */ ;
         NIL operation
         /* [ list operation : operation : mutez ] */ ;
         SWAP
         /* [ operation : list operation : mutez ] */ ;
         CONS
         /* [ list operation : mutez ] */ ;
         PAIR
         /* [ pair (list operation) mutez ] */ } }
Well typed (Gas remaining: 1039986.856 units remaining)	michelson_test_scripts/opcodes/balance_after_nonexistent_view.tz
{ parameter address ;
  storage mutez ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 0
         /* [ nat : address : address ] */ ;
         VIEW "nonexistent" (pair nat nat)
         /* [ option (pair nat nat) : address ] */ ;
         ASSERT_NONE ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 15000000
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         BALANCE
         /* [ mutez : operation ] */ ;
         SWAP
         /* [ operation : mutez ] */ ;
         NIL operation
         /* [ list operation : operation : mutez ] */ ;
         SWAP
         /* [ operation : list operation : mutez ] */ ;
         CONS
         /* [ list operation : mutez ] */ ;
         PAIR
         /* [ pair (list operation) mutez ] */ } }
Well typed (Gas remaining: 1039986.472 units remaining)	michelson_test_scripts/opcodes/balance_after_view.tz
{ parameter address ;
  storage mutez ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 0
         /* [ nat : address : address ] */ ;
         VIEW "id" (pair nat nat)
         /* [ option (pair nat nat) : address ] */ ;
         ASSERT_SOME ;
         DROP
         /* [ address ] */ ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 15000000
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         BALANCE
         /* [ mutez : operation ] */ ;
         SWAP
         /* [ operation : mutez ] */ ;
         NIL operation
         /* [ list operation : operation : mutez ] */ ;
         SWAP
         /* [ operation : list operation : mutez ] */ ;
         CONS
         /* [ list operation : mutez ] */ ;
         PAIR
         /* [ pair (list operation) mutez ] */ } }
Well typed (Gas remaining: 1039993.786 units remaining)	michelson_test_scripts/opcodes/big_map_mem_nat.tz
{ parameter nat ;
  storage (pair (big_map nat nat) (option bool)) ;
  code { UNPAIR
         /* [ nat : pair (big_map nat nat) (option bool) ] */ ;
         DIP { CAR /* [ big_map nat nat ] */ ; DUP /* [ big_map nat nat : big_map nat nat ] */ }
         /* [ nat : big_map nat nat : big_map nat nat ] */ ;
         MEM
         /* [ bool : big_map nat nat ] */ ;
         SOME
         /* [ option bool : big_map nat nat ] */ ;
         SWAP
         /* [ big_map nat nat : option bool ] */ ;
         PAIR
         /* [ pair (big_map nat nat) (option bool) ] */ ;
         NIL operation
         /* [ list operation : pair (big_map nat nat) (option bool) ] */ ;
         PAIR
         /* [ pair (list operation) (big_map nat nat) (option bool) ] */ } }
Well typed (Gas remaining: 1039993.786 units remaining)	michelson_test_scripts/opcodes/big_map_mem_string.tz
{ parameter string ;
  storage (pair (big_map string nat) (option bool)) ;
  code { UNPAIR
         /* [ string : pair (big_map string nat) (option bool) ] */ ;
         DIP { CAR
               /* [ big_map string nat ] */ ;
               DUP
               /* [ big_map string nat : big_map string nat ] */ }
         /* [ string : big_map string nat : big_map string nat ] */ ;
         MEM
         /* [ bool : big_map string nat ] */ ;
         SOME
         /* [ option bool : big_map string nat ] */ ;
         SWAP
         /* [ big_map string nat : option bool ] */ ;
         PAIR
         /* [ pair (big_map string nat) (option bool) ] */ ;
         NIL operation
         /* [ list operation : pair (big_map string nat) (option bool) ] */ ;
         PAIR
         /* [ pair (list operation) (big_map string nat) (option bool) ] */ } }
Well typed (Gas remaining: 1039987.823 units remaining)	michelson_test_scripts/opcodes/big_map_to_self.tz
{ parameter (or (pair %have_fun (big_map string nat) unit) (unit %default)) ;
  storage (big_map string nat) ;
  code { UNPAIR
         /* [ or (pair (big_map string nat) unit) unit : big_map string nat ] */ ;
         DIP { NIL operation /* [ list operation : big_map string nat ] */ }
         /* [ or (pair (big_map string nat) unit) unit : list operation
            : big_map string nat ] */ ;
         IF_LEFT
           { DROP /* [ list operation : big_map string nat ] */ }
           { DROP
             /* [ list operation : big_map string nat ] */ ;
             SELF %have_fun
             /* [ contract (pair (big_map string nat) unit) : list operation
                : big_map string nat ] */ ;
             PUSH mutez
                  0
             /* [ mutez : contract (pair (big_map string nat) unit) : list operation
                : big_map string nat ] */ ;
             DUP 4
             /* [ big_map string nat : mutez : contract (pair (big_map string nat) unit)
                : list operation : big_map string nat ] */ ;
             PUSH (option nat)
                  (Some 8)
             /* [ option nat : big_map string nat : mutez
                : contract (pair (big_map string nat) unit) : list operation
                : big_map string nat ] */ ;
             PUSH string
                  "hahaha"
             /* [ string : option nat : big_map string nat : mutez
                : contract (pair (big_map string nat) unit) : list operation
                : big_map string nat ] */ ;
             UPDATE
             /* [ big_map string nat : mutez : contract (pair (big_map string nat) unit)
                : list operation : big_map string nat ] */ ;
             UNIT
             /* [ unit : big_map string nat : mutez
                : contract (pair (big_map string nat) unit) : list operation
                : big_map string nat ] */ ;
             SWAP
             /* [ big_map string nat : unit : mutez
                : contract (pair (big_map string nat) unit) : list operation
                : big_map string nat ] */ ;
             PAIR
             /* [ pair (big_map string nat) unit : mutez
                : contract (pair (big_map string nat) unit) : list operation
                : big_map string nat ] */ ;
             TRANSFER_TOKENS
             /* [ operation : list operation : big_map string nat ] */ ;
             CONS
             /* [ list operation : big_map string nat ] */ } ;
         PAIR
         /* [ pair (list operation) (big_map string nat) ] */ } }
Well typed (Gas remaining: 1039996.579 units remaining)	michelson_test_scripts/opcodes/bls12_381_fr_push_bytes_not_padded.tz
{ parameter unit ;
  storage (option bls12_381_fr) ;
  code { DROP
         /* [] */ ;
         PUSH bls12_381_fr 0x00
         /* [ bls12_381_fr ] */ ;
         SOME
         /* [ option bls12_381_fr ] */ ;
         NIL operation
         /* [ list operation : option bls12_381_fr ] */ ;
         PAIR
         /* [ pair (list operation) (option bls12_381_fr) ] */ } }
Well typed (Gas remaining: 1039996.579 units remaining)	michelson_test_scripts/opcodes/bls12_381_fr_push_nat.tz
{ parameter unit ;
  storage (option bls12_381_fr) ;
  code { DROP
         /* [] */ ;
         PUSH bls12_381_fr 16
         /* [ bls12_381_fr ] */ ;
         SOME
         /* [ option bls12_381_fr ] */ ;
         NIL operation
         /* [ list operation : option bls12_381_fr ] */ ;
         PAIR
         /* [ pair (list operation) (option bls12_381_fr) ] */ } }
Well typed (Gas remaining: 1039997.552 units remaining)	michelson_test_scripts/opcodes/bls12_381_fr_to_int.tz
{ parameter bls12_381_fr ;
  storage int ;
  code { CAR
         /* [ bls12_381_fr ] */ ;
         INT
         /* [ int ] */ ;
         NIL operation
         /* [ list operation : int ] */ ;
         PAIR
         /* [ pair (list operation) int ] */ } }
Well typed (Gas remaining: 1039993.693 units remaining)	michelson_test_scripts/opcodes/bls12_381_fr_to_mutez.tz
{ parameter bls12_381_fr ;
  storage mutez ;
  code { CAR
         /* [ bls12_381_fr ] */ ;
         INT
         /* [ int ] */ ;
         ISNAT
         /* [ option nat ] */ ;
         ASSERT_SOME ;
         PUSH mutez 1
         /* [ mutez : nat ] */ ;
         MUL
         /* [ mutez ] */ ;
         NIL operation
         /* [ list operation : mutez ] */ ;
         PAIR
         /* [ pair (list operation) mutez ] */ } }
Well typed (Gas remaining: 1039997.552 units remaining)	michelson_test_scripts/opcodes/bls12_381_fr_z_int.tz
{ parameter int ;
  storage bls12_381_fr ;
  code { UNPAIR
         /* [ int : bls12_381_fr ] */ ;
         MUL
         /* [ bls12_381_fr ] */ ;
         NIL operation
         /* [ list operation : bls12_381_fr ] */ ;
         PAIR
         /* [ pair (list operation) bls12_381_fr ] */ } }
Well typed (Gas remaining: 1039997.552 units remaining)	michelson_test_scripts/opcodes/bls12_381_fr_z_nat.tz
{ parameter nat ;
  storage bls12_381_fr ;
  code { UNPAIR
         /* [ nat : bls12_381_fr ] */ ;
         MUL
         /* [ bls12_381_fr ] */ ;
         NIL operation
         /* [ list operation : bls12_381_fr ] */ ;
         PAIR
         /* [ pair (list operation) bls12_381_fr ] */ } }
Well typed (Gas remaining: 1039997.089 units remaining)	michelson_test_scripts/opcodes/bls12_381_z_fr_int.tz
{ parameter int ;
  storage bls12_381_fr ;
  code { UNPAIR
         /* [ int : bls12_381_fr ] */ ;
         SWAP
         /* [ bls12_381_fr : int ] */ ;
         MUL
         /* [ bls12_381_fr ] */ ;
         NIL operation
         /* [ list operation : bls12_381_fr ] */ ;
         PAIR
         /* [ pair (list operation) bls12_381_fr ] */ } }
Well typed (Gas remaining: 1039997.089 units remaining)	michelson_test_scripts/opcodes/bls12_381_z_fr_nat.tz
{ parameter nat ;
  storage bls12_381_fr ;
  code { UNPAIR
         /* [ nat : bls12_381_fr ] */ ;
         SWAP
         /* [ bls12_381_fr : nat ] */ ;
         MUL
         /* [ bls12_381_fr ] */ ;
         NIL operation
         /* [ list operation : bls12_381_fr ] */ ;
         PAIR
         /* [ pair (list operation) bls12_381_fr ] */ } }
Well typed (Gas remaining: 1039998.017 units remaining)	michelson_test_scripts/opcodes/bytes.tz
{ parameter bytes ;
  storage unit ;
  code { CDR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039907.915 units remaining)	michelson_test_scripts/opcodes/bytes_of_int_016.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH int 0
         /* [ int ] */ ;
         BYTES
         /* [ bytes ] */ ;
         PUSH bytes 0x
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH int 1
         /* [ int ] */ ;
         BYTES
         /* [ bytes ] */ ;
         PUSH bytes 0x01
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH int 1193046
         /* [ int ] */ ;
         BYTES
         /* [ bytes ] */ ;
         PUSH bytes 0x123456
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x123456
         /* [ bytes ] */ ;
         INT
         /* [ int ] */ ;
         PUSH int 1193046
         /* [ int : int ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x0000123456
         /* [ bytes ] */ ;
         INT
         /* [ int ] */ ;
         PUSH int 1193046
         /* [ int : int ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x
         /* [ bytes ] */ ;
         INT
         /* [ int ] */ ;
         PUSH int 0
         /* [ int : int ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x0000
         /* [ bytes ] */ ;
         INT
         /* [ int ] */ ;
         PUSH int 0
         /* [ int : int ] */ ;
         ASSERT_CMPEQ ;
         PUSH int -128
         /* [ int ] */ ;
         BYTES
         /* [ bytes ] */ ;
         PUSH bytes 0x80
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH int -129
         /* [ int ] */ ;
         BYTES
         /* [ bytes ] */ ;
         PUSH bytes 0xff7f
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH int -33024
         /* [ int ] */ ;
         BYTES
         /* [ bytes ] */ ;
         PUSH bytes 0xff7f00
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH int -4294967296
         /* [ int ] */ ;
         BYTES
         /* [ bytes ] */ ;
         PUSH bytes 0xff00000000
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x80
         /* [ bytes ] */ ;
         INT
         /* [ int ] */ ;
         PUSH int -128
         /* [ int : int ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0xff7f
         /* [ bytes ] */ ;
         INT
         /* [ int ] */ ;
         PUSH int -129
         /* [ int : int ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0xff7f00
         /* [ bytes ] */ ;
         INT
         /* [ int ] */ ;
         PUSH int -33024
         /* [ int : int ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0xffffff7f00
         /* [ bytes ] */ ;
         INT
         /* [ int ] */ ;
         PUSH int -33024
         /* [ int : int ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0xff00000000
         /* [ bytes ] */ ;
         INT
         /* [ int ] */ ;
         PUSH int -4294967296
         /* [ int : int ] */ ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039958.799 units remaining)	michelson_test_scripts/opcodes/bytes_of_nat_016.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH nat 0
         /* [ nat ] */ ;
         BYTES
         /* [ bytes ] */ ;
         PUSH bytes 0x
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 1
         /* [ nat ] */ ;
         BYTES
         /* [ bytes ] */ ;
         PUSH bytes 0x01
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 1193046
         /* [ nat ] */ ;
         BYTES
         /* [ bytes ] */ ;
         PUSH bytes 0x123456
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x123456
         /* [ bytes ] */ ;
         NAT
         /* [ nat ] */ ;
         PUSH nat 1193046
         /* [ nat : nat ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x0000123456
         /* [ bytes ] */ ;
         NAT
         /* [ nat ] */ ;
         PUSH nat 1193046
         /* [ nat : nat ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x
         /* [ bytes ] */ ;
         NAT
         /* [ nat ] */ ;
         PUSH nat 0
         /* [ nat : nat ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x0000
         /* [ bytes ] */ ;
         NAT
         /* [ nat ] */ ;
         PUSH nat 0
         /* [ nat : nat ] */ ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039997.385 units remaining)	michelson_test_scripts/opcodes/car.tz
{ parameter (pair (nat :l) (nat :r)) ;
  storage nat ;
  code { CAR
         /* [ pair nat nat ] */ ;
         CAR
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039997.385 units remaining)	michelson_test_scripts/opcodes/cdr.tz
{ parameter (pair (nat :l) (nat :r)) ;
  storage nat ;
  code { CAR
         /* [ pair nat nat ] */ ;
         CDR
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039997.089 units remaining)	michelson_test_scripts/opcodes/chain_id.tz
{ parameter unit ;
  storage unit ;
  code { CHAIN_ID
         /* [ chain_id : pair unit unit ] */ ;
         DROP
         /* [ pair unit unit ] */ ;
         CAR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039996.983 units remaining)	michelson_test_scripts/opcodes/chain_id_store.tz
{ parameter unit ;
  storage (option chain_id) ;
  code { DROP
         /* [] */ ;
         CHAIN_ID
         /* [ chain_id ] */ ;
         SOME
         /* [ option chain_id ] */ ;
         NIL operation
         /* [ list operation : option chain_id ] */ ;
         PAIR
         /* [ pair (list operation) (option chain_id) ] */ } }
Well typed (Gas remaining: 1039989.149 units remaining)	michelson_test_scripts/opcodes/check_signature.tz
{ parameter key ;
  storage (pair signature string) ;
  code { DUP
         /* [ pair key signature string : pair key signature string ] */ ;
         DUP
         /* [ pair key signature string : pair key signature string
            : pair key signature string ] */ ;
         DIP { CDR
               /* [ pair signature string : pair key signature string ] */ ;
               DUP
               /* [ pair signature string : pair signature string : pair key signature string ] */ ;
               CAR
               /* [ signature : pair signature string : pair key signature string ] */ ;
               DIP { CDR
                     /* [ string : pair key signature string ] */ ;
                     PACK
                     /* [ bytes : pair key signature string ] */ }
               /* [ signature : bytes : pair key signature string ] */ }
         /* [ pair key signature string : signature : bytes : pair key signature string ] */ ;
         CAR
         /* [ key : signature : bytes : pair key signature string ] */ ;
         CHECK_SIGNATURE
         /* [ bool : pair key signature string ] */ ;
         IF { /* [ pair key signature string ] */ } { FAIL } ;
         CDR
         /* [ pair signature string ] */ ;
         NIL operation
         /* [ list operation : pair signature string ] */ ;
         PAIR
         /* [ pair (list operation) signature string ] */ } }
Well typed (Gas remaining: 1039995.265 units remaining)	michelson_test_scripts/opcodes/comb.tz
{ parameter unit ;
  storage (pair nat nat nat) ;
  code { DROP
         /* [] */ ;
         PUSH nat 3
         /* [ nat ] */ ;
         PUSH nat 2
         /* [ nat : nat ] */ ;
         PUSH nat 1
         /* [ nat : nat : nat ] */ ;
         NIL operation
         /* [ list operation : nat : nat : nat ] */ ;
         PAIR 4
         /* [ pair (list operation) nat nat nat ] */ } }
Well typed (Gas remaining: 1039966.290 units remaining)	michelson_test_scripts/opcodes/comb-get.tz
{ parameter (pair nat nat nat unit) ;
  storage unit ;
  code { CAR
         /* [ pair nat nat nat unit ] */ ;
         DUP
         /* [ pair nat nat nat unit : pair nat nat nat unit ] */ ;
         CAR
         /* [ nat : pair nat nat nat unit ] */ ;
         PUSH nat 1
         /* [ nat : nat : pair nat nat nat unit ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair nat nat nat unit : pair nat nat nat unit ] */ ;
         GET 1
         /* [ nat : pair nat nat nat unit ] */ ;
         PUSH nat 1
         /* [ nat : nat : pair nat nat nat unit ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair nat nat nat unit : pair nat nat nat unit ] */ ;
         GET 3
         /* [ nat : pair nat nat nat unit ] */ ;
         PUSH nat 4
         /* [ nat : nat : pair nat nat nat unit ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair nat nat nat unit : pair nat nat nat unit ] */ ;
         GET 5
         /* [ nat : pair nat nat nat unit ] */ ;
         PUSH nat 2
         /* [ nat : nat : pair nat nat nat unit ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair nat nat nat unit : pair nat nat nat unit ] */ ;
         GET 6
         /* [ unit : pair nat nat nat unit ] */ ;
         UNIT
         /* [ unit : unit : pair nat nat nat unit ] */ ;
         ASSERT_CMPEQ ;
         DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039993.354 units remaining)	michelson_test_scripts/opcodes/comb-literals.tz
{ parameter unit ;
  storage unit ;
  code { PUSH (list (pair nat nat nat nat))
              { Pair 0 3 6 9 ; Pair 1 (Pair 4 (Pair 7 10)) ; { 2 ; 5 ; 8 ; 11 } }
         /* [ list (pair nat nat nat nat) : pair unit unit ] */ ;
         DROP 2
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.939 units remaining)	michelson_test_scripts/opcodes/comb-set.tz
{ parameter unit ;
  storage (pair nat nat nat unit) ;
  code { CDR
         /* [ pair nat nat nat unit ] */ ;
         PUSH nat 2
         /* [ nat : pair nat nat nat unit ] */ ;
         UPDATE 1
         /* [ pair nat nat nat unit ] */ ;
         PUSH nat 12
         /* [ nat : pair nat nat nat unit ] */ ;
         UPDATE 3
         /* [ pair nat nat nat unit ] */ ;
         PUSH nat 8
         /* [ nat : pair nat nat nat unit ] */ ;
         UPDATE 5
         /* [ pair nat nat nat unit ] */ ;
         UNIT
         /* [ unit : pair nat nat nat unit ] */ ;
         UPDATE 6
         /* [ pair nat nat nat unit ] */ ;
         NIL operation
         /* [ list operation : pair nat nat nat unit ] */ ;
         PAIR
         /* [ pair (list operation) nat nat nat unit ] */ } }
Well typed (Gas remaining: 1039991.931 units remaining)	michelson_test_scripts/opcodes/comb-set-2.tz
{ parameter (pair nat nat nat unit) ;
  storage (option (pair int nat string bytes)) ;
  code { CAR
         /* [ pair nat nat nat unit ] */ ;
         PUSH int 2
         /* [ int : pair nat nat nat unit ] */ ;
         UPDATE 1
         /* [ pair int nat nat unit ] */ ;
         PUSH string "toto"
         /* [ string : pair int nat nat unit ] */ ;
         UPDATE 5
         /* [ pair int nat string unit ] */ ;
         PUSH bytes 0x01
         /* [ bytes : pair int nat string unit ] */ ;
         UPDATE 6
         /* [ pair int nat string bytes ] */ ;
         SOME
         /* [ option (pair int nat string bytes) ] */ ;
         NIL operation
         /* [ list operation : option (pair int nat string bytes) ] */ ;
         PAIR
         /* [ pair (list operation) (option (pair int nat string bytes)) ] */ } }
Well typed (Gas remaining: 1039839.822 units remaining)	michelson_test_scripts/opcodes/compare.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH bool True
         /* [ bool ] */ ;
         DUP
         /* [ bool : bool ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH bool False
         /* [ bool ] */ ;
         DUP
         /* [ bool : bool ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH bool False
         /* [ bool ] */ ;
         PUSH bool True
         /* [ bool : bool ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_GT ;
         PUSH bool True
         /* [ bool ] */ ;
         PUSH bool False
         /* [ bool : bool ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_LT ;
         PUSH bytes 0xaabbcc
         /* [ bytes ] */ ;
         DUP
         /* [ bytes : bytes ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH bytes 0x
         /* [ bytes ] */ ;
         PUSH bytes 0x
         /* [ bytes : bytes ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH bytes 0x
         /* [ bytes ] */ ;
         PUSH bytes 0x01
         /* [ bytes : bytes ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_GT ;
         PUSH bytes 0x01
         /* [ bytes ] */ ;
         PUSH bytes 0x02
         /* [ bytes : bytes ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_GT ;
         PUSH bytes 0x02
         /* [ bytes ] */ ;
         PUSH bytes 0x01
         /* [ bytes : bytes ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_LT ;
         PUSH int 1
         /* [ int ] */ ;
         DUP
         /* [ int : int ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH int 10
         /* [ int ] */ ;
         PUSH int 5
         /* [ int : int ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_LT ;
         PUSH int -4
         /* [ int ] */ ;
         PUSH int 1923
         /* [ int : int ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_GT ;
         PUSH nat 1
         /* [ nat ] */ ;
         DUP
         /* [ nat : nat ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH nat 10
         /* [ nat ] */ ;
         PUSH nat 5
         /* [ nat : nat ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_LT ;
         PUSH nat 4
         /* [ nat ] */ ;
         PUSH nat 1923
         /* [ nat : nat ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_GT ;
         PUSH key_hash "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx"
         /* [ key_hash ] */ ;
         DUP
         /* [ key_hash : key_hash ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH key_hash "tz1ddb9NMYHZi5UzPdzTZMYQQZoMub195zgv"
         /* [ key_hash ] */ ;
         PUSH key_hash "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx"
         /* [ key_hash : key_hash ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_LT ;
         PUSH key_hash "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx"
         /* [ key_hash ] */ ;
         PUSH key_hash "tz1ddb9NMYHZi5UzPdzTZMYQQZoMub195zgv"
         /* [ key_hash : key_hash ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_GT ;
         PUSH mutez 1
         /* [ mutez ] */ ;
         DUP
         /* [ mutez : mutez ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH mutez 10
         /* [ mutez ] */ ;
         PUSH mutez 5
         /* [ mutez : mutez ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_LT ;
         PUSH mutez 4
         /* [ mutez ] */ ;
         PUSH mutez 1923
         /* [ mutez : mutez ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_GT ;
         PUSH string "AABBCC"
         /* [ string ] */ ;
         DUP
         /* [ string : string ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH string ""
         /* [ string ] */ ;
         PUSH string ""
         /* [ string : string ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH string ""
         /* [ string ] */ ;
         PUSH string "a"
         /* [ string : string ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_GT ;
         PUSH string "a"
         /* [ string ] */ ;
         PUSH string "b"
         /* [ string : string ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_GT ;
         PUSH string "b"
         /* [ string ] */ ;
         PUSH string "a"
         /* [ string : string ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_LT ;
         PUSH timestamp "2019-09-16T08:38:05Z"
         /* [ timestamp ] */ ;
         DUP
         /* [ timestamp : timestamp ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH timestamp "2017-09-16T08:38:04Z"
         /* [ timestamp ] */ ;
         PUSH timestamp "2019-09-16T08:38:05Z"
         /* [ timestamp : timestamp ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_GT ;
         PUSH timestamp "2019-09-16T08:38:05Z"
         /* [ timestamp ] */ ;
         PUSH timestamp "2019-09-16T08:38:04Z"
         /* [ timestamp : timestamp ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_LT ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039246.273 units remaining)	michelson_test_scripts/opcodes/compare_big_type.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH nat 0
         /* [ nat ] */ ;
         DUP
         /* [ nat : nat ] */ ;
         PAIR
         /* [ pair nat nat ] */ ;
         DUP
         /* [ pair nat nat : pair nat nat ] */ ;
         PAIR
         /* [ pair (pair nat nat) nat nat ] */ ;
         DUP
         /* [ pair (pair nat nat) nat nat : pair (pair nat nat) nat nat ] */ ;
         PAIR
         /* [ pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat ] */ ;
         DUP
         /* [ pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat
            : pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat ] */ ;
         PAIR
         /* [ pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         PAIR
         /* [ pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         PAIR
         /* [ pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         PAIR
         /* [ pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         PAIR
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         COMPARE
         /* [ int
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         COMPARE
         /* [ int
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         COMPARE
         /* [ int
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         COMPARE
         /* [ int
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         COMPARE
         /* [ int
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         COMPARE
         /* [ int
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039130.903 units remaining)	michelson_test_scripts/opcodes/compare_big_type2.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH nat 0
         /* [ nat ] */ ;
         DUP
         /* [ nat : nat ] */ ;
         PAIR
         /* [ pair nat nat ] */ ;
         DUP
         /* [ pair nat nat : pair nat nat ] */ ;
         PAIR
         /* [ pair (pair nat nat) nat nat ] */ ;
         DUP
         /* [ pair (pair nat nat) nat nat : pair (pair nat nat) nat nat ] */ ;
         PAIR
         /* [ pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat ] */ ;
         DUP
         /* [ pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat
            : pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat ] */ ;
         PAIR
         /* [ pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         PAIR
         /* [ pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         PAIR
         /* [ pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         PAIR
         /* [ pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         PAIR
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         COMPARE
         /* [ int
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         COMPARE
         /* [ int
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         COMPARE
         /* [ int
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         COMPARE
         /* [ int
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         COMPARE
         /* [ int
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         COMPARE
         /* [ int
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DUP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         COMPARE
         /* [ int
            : pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [ pair (pair (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                         (pair (pair nat nat) nat nat)
                                         (pair nat nat)
                                         nat
                                         nat)
                                   (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                                   (pair (pair nat nat) nat nat)
                                   (pair nat nat)
                                   nat
                                   nat)
                             (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                             (pair (pair nat nat) nat nat)
                             (pair nat nat)
                             nat
                             nat)
                       (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                       (pair (pair nat nat) nat nat)
                       (pair nat nat)
                       nat
                       nat)
                 (pair (pair (pair nat nat) nat nat) (pair nat nat) nat nat)
                 (pair (pair nat nat) nat nat)
                 (pair nat nat)
                 nat
                 nat ] */ ;
         DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039977.792 units remaining)	michelson_test_scripts/opcodes/comparisons.tz
{ parameter (list int) ;
  storage (list (list bool)) ;
  code { CAR
         /* [ list int ] */ ;
         NIL (list bool)
         /* [ list (list bool) : list int ] */ ;
         DIP { DUP
               /* [ list int : list int ] */ ;
               MAP { EQ /* [ bool : list int ] */ }
               /* [ list bool : list int ] */ }
         /* [ list (list bool) : list bool : list int ] */ ;
         SWAP
         /* [ list bool : list (list bool) : list int ] */ ;
         CONS
         /* [ list (list bool) : list int ] */ ;
         DIP { DUP
               /* [ list int : list int ] */ ;
               MAP { NEQ /* [ bool : list int ] */ }
               /* [ list bool : list int ] */ }
         /* [ list (list bool) : list bool : list int ] */ ;
         SWAP
         /* [ list bool : list (list bool) : list int ] */ ;
         CONS
         /* [ list (list bool) : list int ] */ ;
         DIP { DUP
               /* [ list int : list int ] */ ;
               MAP { LE /* [ bool : list int ] */ }
               /* [ list bool : list int ] */ }
         /* [ list (list bool) : list bool : list int ] */ ;
         SWAP
         /* [ list bool : list (list bool) : list int ] */ ;
         CONS
         /* [ list (list bool) : list int ] */ ;
         DIP { DUP
               /* [ list int : list int ] */ ;
               MAP { LT /* [ bool : list int ] */ }
               /* [ list bool : list int ] */ }
         /* [ list (list bool) : list bool : list int ] */ ;
         SWAP
         /* [ list bool : list (list bool) : list int ] */ ;
         CONS
         /* [ list (list bool) : list int ] */ ;
         DIP { DUP
               /* [ list int : list int ] */ ;
               MAP { GE /* [ bool : list int ] */ }
               /* [ list bool : list int ] */ }
         /* [ list (list bool) : list bool : list int ] */ ;
         SWAP
         /* [ list bool : list (list bool) : list int ] */ ;
         CONS
         /* [ list (list bool) : list int ] */ ;
         DIP { MAP { GT /* [ bool ] */ } /* [ list bool ] */ }
         /* [ list (list bool) : list bool ] */ ;
         SWAP
         /* [ list bool : list (list bool) ] */ ;
         CONS
         /* [ list (list bool) ] */ ;
         NIL operation
         /* [ list operation : list (list bool) ] */ ;
         PAIR
         /* [ pair (list operation) (list (list bool)) ] */ } }
Well typed (Gas remaining: 1039996.039 units remaining)	michelson_test_scripts/opcodes/concat_hello.tz
{ parameter (list string) ;
  storage (list string) ;
  code { CAR
         /* [ list string ] */ ;
         MAP { PUSH @hello string "Hello " /* [ string : string ] */ ; CONCAT /* [ string ] */ }
         /* [ list string ] */ ;
         NIL operation
         /* [ list operation : list string ] */ ;
         PAIR
         /* [ pair (list operation) (list string) ] */ } }
Well typed (Gas remaining: 1039996.114 units remaining)	michelson_test_scripts/opcodes/concat_hello_bytes.tz
{ parameter (list bytes) ;
  storage (list bytes) ;
  code { CAR
         /* [ list bytes ] */ ;
         MAP { PUSH bytes 0xff /* [ bytes : bytes ] */ ; CONCAT /* [ bytes ] */ }
         /* [ list bytes ] */ ;
         NIL operation
         /* [ list operation : list bytes ] */ ;
         PAIR
         /* [ pair (list operation) (list bytes) ] */ } }
Well typed (Gas remaining: 1039992.642 units remaining)	michelson_test_scripts/opcodes/concat_list.tz
{ parameter (list string) ;
  storage string ;
  code { CAR
         /* [ list string ] */ ;
         PUSH string ""
         /* [ string : list string ] */ ;
         SWAP
         /* [ list string : string ] */ ;
         ITER { SWAP
                /* [ string : string ] */ ;
                DIP { NIL string
                      /* [ list string : string ] */ ;
                      SWAP
                      /* [ string : list string ] */ ;
                      CONS
                      /* [ list string ] */ }
                /* [ string : list string ] */ ;
                CONS
                /* [ list string ] */ ;
                CONCAT
                /* [ string ] */ }
         /* [ string ] */ ;
         NIL operation
         /* [ list operation : string ] */ ;
         PAIR
         /* [ pair (list operation) string ] */ } }
Well typed (Gas remaining: 1039997.390 units remaining)	michelson_test_scripts/opcodes/cons.tz
{ parameter int ;
  storage (list int) ;
  code { UNPAIR
         /* [ int : list int ] */ ;
         CONS
         /* [ list int ] */ ;
         NIL operation
         /* [ list operation : list int ] */ ;
         PAIR
         /* [ pair (list operation) (list int) ] */ } }
Well typed (Gas remaining: 1039975.058 units remaining)	michelson_test_scripts/opcodes/contains_all.tz
{ parameter (pair (list string) (list string)) ;
  storage (option bool) ;
  code { CAR
         /* [ pair (list string) (list string) ] */ ;
         DUP
         /* [ pair (list string) (list string) : pair (list string) (list string) ] */ ;
         CAR
         /* [ list string : pair (list string) (list string) ] */ ;
         DIP { CDR /* [ list string ] */ }
         /* [ list string : list string ] */ ;
         EMPTY_SET string
         /* [ set string : list string : list string ] */ ;
         SWAP
         /* [ list string : set string : list string ] */ ;
         ITER { PAIR
                /* [ pair string (set string) : list string ] */ ;
                DUP
                /* [ pair string (set string) : pair string (set string) : list string ] */ ;
                CAR
                /* [ string : pair string (set string) : list string ] */ ;
                DIP { CDR /* [ set string : list string ] */ }
                /* [ string : set string : list string ] */ ;
                PUSH bool True
                /* [ bool : string : set string : list string ] */ ;
                SWAP
                /* [ string : bool : set string : list string ] */ ;
                UPDATE
                /* [ set string : list string ] */ }
         /* [ set string : list string ] */ ;
         PUSH bool True
         /* [ bool : set string : list string ] */ ;
         SWAP
         /* [ set string : bool : list string ] */ ;
         PAIR
         /* [ pair (set string) bool : list string ] */ ;
         SWAP
         /* [ list string : pair (set string) bool ] */ ;
         ITER { PAIR
                /* [ pair string (set string) bool ] */ ;
                DUP
                /* [ pair string (set string) bool : pair string (set string) bool ] */ ;
                DUP
                /* [ pair string (set string) bool : pair string (set string) bool
                   : pair string (set string) bool ] */ ;
                CAR
                /* [ string : pair string (set string) bool : pair string (set string) bool ] */ ;
                DIP { CDAR ;
                      DIP { CDDR }
                      /* [ set string : bool ] */ ;
                      DUP
                      /* [ set string : set string : bool ] */ }
                /* [ string : set string : set string : bool ] */ ;
                MEM
                /* [ bool : set string : bool ] */ ;
                DIP { SWAP /* [ bool : set string ] */ }
                /* [ bool : bool : set string ] */ ;
                AND
                /* [ bool : set string ] */ ;
                SWAP
                /* [ set string : bool ] */ ;
                PAIR
                /* [ pair (set string) bool ] */ }
         /* [ pair (set string) bool ] */ ;
         CDR
         /* [ bool ] */ ;
         SOME
         /* [ option bool ] */ ;
         NIL operation
         /* [ list operation : option bool ] */ ;
         PAIR
         /* [ pair (list operation) (option bool) ] */ } }
Well typed (Gas remaining: 1039994.290 units remaining)	michelson_test_scripts/opcodes/contract.tz
{ parameter address ;
  storage unit ;
  code { CAR
         /* [ address ] */ ;
         CONTRACT unit
         /* [ option (contract unit) ] */ ;
         ASSERT_SOME ;
         DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039992.030 units remaining)	michelson_test_scripts/opcodes/create_contract.tz
{ parameter unit ;
  storage (option address) ;
  code { /* [ pair unit unit ] */
         DROP
         /* [ list operation : unit ] */ ;
         UNIT
         /* [ unit ] */ ;
         AMOUNT
         /* [ pair (list operation) unit ] */ ;
         NONE key_hash
         /* [ option key_hash : mutez : unit ] */ ;
         CREATE_CONTRACT
           { parameter unit ; storage unit ; code { CDR ; NIL operation ; PAIR } }
         /* [ operation : address ] */ ;
         DIP { SOME
               /* [ option address ] */ ;
               NIL operation
               /* [ list operation : option address ] */ }
         /* [ operation : list operation : option address ] */ ;
         CONS
         /* [ list operation : option address ] */ ;
         PAIR
         /* [ pair (list operation) (option address) ] */ } }
Well typed (Gas remaining: 1039992.030 units remaining)	michelson_test_scripts/opcodes/create_contract_rootname.tz
{ parameter unit ;
  storage (option address) ;
  code { /* [ pair unit unit ] */
         DROP
         /* [ list operation : unit ] */ ;
         UNIT
         /* [ unit ] */ ;
         AMOUNT
         /* [ pair (list operation) unit ] */ ;
         NONE key_hash
         /* [ option key_hash : mutez : unit ] */ ;
         CREATE_CONTRACT
           { parameter (unit %root) ;
             storage unit ;
             code { CDR ; NIL operation ; PAIR } }
         /* [ operation : address ] */ ;
         DIP { SOME
               /* [ option address ] */ ;
               NIL operation
               /* [ list operation : option address ] */ }
         /* [ operation : list operation : option address ] */ ;
         CONS
         /* [ list operation : option address ] */ ;
         PAIR
         /* [ pair (list operation) (option address) ] */ } }
Well typed (Gas remaining: 1039992.030 units remaining)	michelson_test_scripts/opcodes/create_contract_rootname_alt.tz
{ parameter unit ;
  storage (option address) ;
  code { /* [ pair unit unit ] */
         DROP
         /* [ list operation : unit ] */ ;
         UNIT
         /* [ unit ] */ ;
         AMOUNT
         /* [ pair (list operation) unit ] */ ;
         NONE key_hash
         /* [ option key_hash : mutez : unit ] */ ;
         CREATE_CONTRACT
           { parameter (unit %root) ;
             storage unit ;
             code { CDR ; NIL operation ; PAIR } }
         /* [ operation : address ] */ ;
         DIP { SOME
               /* [ option address ] */ ;
               NIL operation
               /* [ list operation : option address ] */ }
         /* [ operation : list operation : option address ] */ ;
         CONS
         /* [ list operation : option address ] */ ;
         PAIR
         /* [ pair (list operation) (option address) ] */ } }
Well typed (Gas remaining: 1039991.039 units remaining)	michelson_test_scripts/opcodes/create_contract_with_view.tz
{ parameter unit ;
  storage (option address) ;
  code { /* [ pair unit unit ] */
         DROP
         /* [ list operation : unit ] */ ;
         UNIT
         /* [ unit ] */ ;
         AMOUNT
         /* [ pair (list operation) unit ] */ ;
         NONE key_hash
         /* [ option key_hash : mutez : unit ] */ ;
         CREATE_CONTRACT
           { parameter unit /* [ nat ] */ ;
             storage unit ;
             code { CDR ; NIL operation ; PAIR } ;
             view "const" nat nat { CAR } }
         /* [ operation : address ] */ ;
         DIP { SOME
               /* [ option address ] */ ;
               NIL operation
               /* [ list operation : option address ] */ }
         /* [ operation : list operation : option address ] */ ;
         CONS
         /* [ list operation : option address ] */ ;
         PAIR
         /* [ pair (list operation) (option address) ] */ } }
Well typed (Gas remaining: 1039995.116 units remaining)	michelson_test_scripts/opcodes/diff_timestamps.tz
{ parameter (pair timestamp timestamp) ;
  storage int ;
  code { CAR
         /* [ pair timestamp timestamp ] */ ;
         DUP
         /* [ pair timestamp timestamp : pair timestamp timestamp ] */ ;
         CAR
         /* [ timestamp : pair timestamp timestamp ] */ ;
         DIP { CDR /* [ timestamp ] */ }
         /* [ timestamp : timestamp ] */ ;
         SUB
         /* [ int ] */ ;
         NIL operation
         /* [ list operation : int ] */ ;
         PAIR
         /* [ pair (list operation) int ] */ } }
Well typed (Gas remaining: 1039910.324 units remaining)	michelson_test_scripts/opcodes/dig_eq.tz
{ parameter
    (pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat) ;
  storage unit ;
  code { CAR
         /* [ pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DUP
         /* [ pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         UNPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAIR ;
         DIG 0
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 1
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 2
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 3
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 4
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 5
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 6
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 7
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 8
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 9
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 10
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 11
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 12
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 13
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 14
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 15
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 16
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 0
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 1
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 2
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 3
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 4
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 5
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 6
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 7
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 8
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 9
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 10
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 11
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 12
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 13
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 14
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 15
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         DIG 16
         /* [ nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
            : nat : nat : nat : nat
            : pair nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat nat ] */ ;
         PAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAIR ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039992.167 units remaining)	michelson_test_scripts/opcodes/dign.tz
{ parameter (pair (pair (pair (pair nat nat) nat) nat) nat) ;
  storage nat ;
  code { CAR
         /* [ pair (pair (pair (pair nat nat) nat) nat) nat ] */ ;
         UNPAIR
         /* [ pair (pair (pair nat nat) nat) nat : nat ] */ ;
         UNPAIR
         /* [ pair (pair nat nat) nat : nat : nat ] */ ;
         UNPAIR
         /* [ pair nat nat : nat : nat : nat ] */ ;
         UNPAIR
         /* [ nat : nat : nat : nat : nat ] */ ;
         DIG 4
         /* [ nat : nat : nat : nat : nat ] */ ;
         DIP { DROP /* [ nat : nat : nat ] */ ; DROP /* [ nat : nat ] */ ; DROP /* [ nat ] */ ; DROP /* [] */ }
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039995.095 units remaining)	michelson_test_scripts/opcodes/dip.tz
{ parameter (pair nat nat) ;
  storage (pair nat nat) ;
  code { CAR
         /* [ pair nat nat ] */ ;
         UNPAIR
         /* [ nat : nat ] */ ;
         DUP
         /* [ nat : nat : nat ] */ ;
         DIP { ADD /* [ nat ] */ }
         /* [ nat : nat ] */ ;
         PAIR
         /* [ pair nat nat ] */ ;
         NIL operation
         /* [ list operation : pair nat nat ] */ ;
         PAIR
         /* [ pair (list operation) nat nat ] */ } }
Well typed (Gas remaining: 1039991.417 units remaining)	michelson_test_scripts/opcodes/dipn.tz
{ parameter (pair (pair (pair (pair nat nat) nat) nat) nat) ;
  storage nat ;
  code { CAR
         /* [ pair (pair (pair (pair nat nat) nat) nat) nat ] */ ;
         UNPAIR
         /* [ pair (pair (pair nat nat) nat) nat : nat ] */ ;
         UNPAIR
         /* [ pair (pair nat nat) nat : nat : nat ] */ ;
         UNPAIR
         /* [ pair nat nat : nat : nat : nat ] */ ;
         UNPAIR
         /* [ nat : nat : nat : nat : nat ] */ ;
         DIP 5 { PUSH nat 6 /* [ nat ] */ }
         /* [ nat : nat : nat : nat : nat : nat ] */ ;
         DROP
         /* [ nat : nat : nat : nat : nat ] */ ;
         DROP
         /* [ nat : nat : nat : nat ] */ ;
         DROP
         /* [ nat : nat : nat ] */ ;
         DROP
         /* [ nat : nat ] */ ;
         DROP
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039994.685 units remaining)	michelson_test_scripts/opcodes/dropn.tz
{ parameter (pair (pair (pair (pair nat nat) nat) nat) nat) ;
  storage nat ;
  code { CAR
         /* [ pair (pair (pair (pair nat nat) nat) nat) nat ] */ ;
         UNPAIR
         /* [ pair (pair (pair nat nat) nat) nat : nat ] */ ;
         UNPAIR
         /* [ pair (pair nat nat) nat : nat : nat ] */ ;
         UNPAIR
         /* [ pair nat nat : nat : nat : nat ] */ ;
         UNPAIR
         /* [ nat : nat : nat : nat : nat ] */ ;
         DROP 4
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039992.811 units remaining)	michelson_test_scripts/opcodes/dugn.tz
{ parameter (pair (pair (pair (pair nat nat) nat) nat) nat) ;
  storage nat ;
  code { CAR
         /* [ pair (pair (pair (pair nat nat) nat) nat) nat ] */ ;
         UNPAIR
         /* [ pair (pair (pair nat nat) nat) nat : nat ] */ ;
         UNPAIR
         /* [ pair (pair nat nat) nat : nat : nat ] */ ;
         UNPAIR
         /* [ pair nat nat : nat : nat : nat ] */ ;
         UNPAIR
         /* [ nat : nat : nat : nat : nat ] */ ;
         DUG 4
         /* [ nat : nat : nat : nat : nat ] */ ;
         DROP
         /* [ nat : nat : nat : nat ] */ ;
         DROP
         /* [ nat : nat : nat ] */ ;
         DROP
         /* [ nat : nat ] */ ;
         DROP
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039968.060 units remaining)	michelson_test_scripts/opcodes/dup-n.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH nat 5
         /* [ nat ] */ ;
         PUSH nat 4
         /* [ nat : nat ] */ ;
         PUSH nat 3
         /* [ nat : nat : nat ] */ ;
         PUSH nat 2
         /* [ nat : nat : nat : nat ] */ ;
         PUSH nat 1
         /* [ nat : nat : nat : nat : nat ] */ ;
         DUP 1
         /* [ nat : nat : nat : nat : nat : nat ] */ ;
         PUSH nat 1
         /* [ nat : nat : nat : nat : nat : nat : nat ] */ ;
         ASSERT_CMPEQ ;
         DUP 2
         /* [ nat : nat : nat : nat : nat : nat ] */ ;
         PUSH nat 2
         /* [ nat : nat : nat : nat : nat : nat : nat ] */ ;
         ASSERT_CMPEQ ;
         DUP 3
         /* [ nat : nat : nat : nat : nat : nat ] */ ;
         PUSH nat 3
         /* [ nat : nat : nat : nat : nat : nat : nat ] */ ;
         ASSERT_CMPEQ ;
         DUP 4
         /* [ nat : nat : nat : nat : nat : nat ] */ ;
         PUSH nat 4
         /* [ nat : nat : nat : nat : nat : nat : nat ] */ ;
         ASSERT_CMPEQ ;
         DUP 5
         /* [ nat : nat : nat : nat : nat : nat ] */ ;
         PUSH nat 5
         /* [ nat : nat : nat : nat : nat : nat : nat ] */ ;
         ASSERT_CMPEQ ;
         DROP 5
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039982.466 units remaining)	michelson_test_scripts/opcodes/ediv.tz
{ parameter (pair int int) ;
  storage
    (pair (option (pair int nat))
          (option (pair int nat))
          (option (pair int nat))
          (option (pair nat nat))) ;
  code { CAR
         /* [ pair int int ] */ ;
         DUP
         /* [ pair int int : pair int int ] */ ;
         UNPAIR
         /* [ int : int : pair int int ] */ ;
         ABS
         /* [ nat : int : pair int int ] */ ;
         DIP { ABS /* [ nat : pair int int ] */ }
         /* [ nat : nat : pair int int ] */ ;
         EDIV
         /* [ option (pair nat nat) : pair int int ] */ ;
         SWAP
         /* [ pair int int : option (pair nat nat) ] */ ;
         DUP
         /* [ pair int int : pair int int : option (pair nat nat) ] */ ;
         UNPAIR
         /* [ int : int : pair int int : option (pair nat nat) ] */ ;
         ABS
         /* [ nat : int : pair int int : option (pair nat nat) ] */ ;
         EDIV
         /* [ option (pair int nat) : pair int int : option (pair nat nat) ] */ ;
         SWAP
         /* [ pair int int : option (pair int nat) : option (pair nat nat) ] */ ;
         DUP
         /* [ pair int int : pair int int : option (pair int nat)
            : option (pair nat nat) ] */ ;
         UNPAIR
         /* [ int : int : pair int int : option (pair int nat) : option (pair nat nat) ] */ ;
         DIP { ABS
               /* [ nat : pair int int : option (pair int nat) : option (pair nat nat) ] */ }
         /* [ int : nat : pair int int : option (pair int nat) : option (pair nat nat) ] */ ;
         EDIV
         /* [ option (pair int nat) : pair int int : option (pair int nat)
            : option (pair nat nat) ] */ ;
         SWAP
         /* [ pair int int : option (pair int nat) : option (pair int nat)
            : option (pair nat nat) ] */ ;
         UNPAIR
         /* [ int : int : option (pair int nat) : option (pair int nat)
            : option (pair nat nat) ] */ ;
         EDIV
         /* [ option (pair int nat) : option (pair int nat) : option (pair int nat)
            : option (pair nat nat) ] */ ;
         PAPAPAIR ;
         NIL operation
         /* [ list operation
            : pair (option (pair int nat))
                 (option (pair int nat))
                 (option (pair int nat))
                 (option (pair nat nat)) ] */ ;
         PAIR
         /* [ pair (list operation)
                 (option (pair int nat))
                 (option (pair int nat))
                 (option (pair int nat))
                 (option (pair nat nat)) ] */ } }
Well typed (Gas remaining: 1039991.312 units remaining)	michelson_test_scripts/opcodes/ediv_mutez.tz
{ parameter (pair mutez (or mutez nat)) ;
  storage (or (option (pair nat mutez)) (option (pair mutez mutez))) ;
  code { CAR
         /* [ pair mutez (or mutez nat) ] */ ;
         UNPAIR
         /* [ mutez : or mutez nat ] */ ;
         SWAP
         /* [ or mutez nat : mutez ] */ ;
         IF_LEFT
           { SWAP
             /* [ mutez : mutez ] */ ;
             EDIV
             /* [ option (pair nat mutez) ] */ ;
             LEFT (option (pair mutez mutez))
             /* [ or (option (pair nat mutez)) (option (pair mutez mutez)) ] */ }
           { SWAP
             /* [ mutez : nat ] */ ;
             EDIV
             /* [ option (pair mutez mutez) ] */ ;
             RIGHT
               (option (pair nat mutez))
             /* [ or (option (pair nat mutez)) (option (pair mutez mutez)) ] */ } ;
         NIL operation
         /* [ list operation : or (option (pair nat mutez)) (option (pair mutez mutez)) ] */ ;
         PAIR
         /* [ pair (list operation) (or (option (pair nat mutez)) (option (pair mutez mutez))) ] */ } }
Well typed (Gas remaining: 1039991.081 units remaining)	michelson_test_scripts/opcodes/emit.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         PUSH nat 10
         /* [ nat : unit ] */ ;
         LEFT string
         /* [ or nat string : unit ] */ ;
         EMIT %event
         /* [ operation : unit ] */ ;
         PUSH string "lorem ipsum"
         /* [ string : operation : unit ] */ ;
         RIGHT nat
         /* [ or nat string : operation : unit ] */ ;
         EMIT %event (or (nat %number) (string %words))
         /* [ operation : operation : unit ] */ ;
         NIL operation
         /* [ list operation : operation : operation : unit ] */ ;
         SWAP
         /* [ operation : list operation : operation : unit ] */ ;
         CONS
         /* [ list operation : operation : unit ] */ ;
         SWAP
         /* [ operation : list operation : unit ] */ ;
         CONS
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039994.545 units remaining)	michelson_test_scripts/opcodes/empty_map.tz
{ storage (map string string) ;
  parameter unit ;
  code { DROP
         /* [] */ ;
         EMPTY_MAP string string
         /* [ map string string ] */ ;
         PUSH string "world"
         /* [ string : map string string ] */ ;
         SOME
         /* [ option string : map string string ] */ ;
         PUSH string "hello"
         /* [ string : option string : map string string ] */ ;
         UPDATE
         /* [ map string string ] */ ;
         NIL operation
         /* [ list operation : map string string ] */ ;
         PAIR
         /* [ pair (list operation) (map string string) ] */ } }
Well typed (Gas remaining: 1039992.485 units remaining)	michelson_test_scripts/opcodes/exec_concat.tz
{ parameter string ;
  storage string ;
  code { CAR
         /* [ string ] */ ;
         LAMBDA
           string
           string
           { PUSH string "_abc"
             /* [ string : string ] */ ;
             NIL string
             /* [ list string : string : string ] */ ;
             SWAP
             /* [ string : list string : string ] */ ;
             CONS
             /* [ list string : string ] */ ;
             SWAP
             /* [ string : list string ] */ ;
             CONS
             /* [ list string ] */ ;
             CONCAT
             /* [ string ] */ }
         /* [ lambda string string : string ] */ ;
         SWAP
         /* [ string : lambda string string ] */ ;
         EXEC
         /* [ string ] */ ;
         NIL operation
         /* [ list operation : string ] */ ;
         PAIR
         /* [ pair (list operation) string ] */ } }
Well typed (Gas remaining: 1039989.486 units remaining)	michelson_test_scripts/opcodes/fact.tz
{ parameter nat ;
  storage nat ;
  code { CAR
         /* [ nat ] */ ;
         LAMBDA_REC
           nat
           nat
           { PUSH int -1
             /* [ int : nat : lambda nat nat ] */ ;
             ADD
             /* [ int : lambda nat nat ] */ ;
             ISNAT
             /* [ option nat : lambda nat nat ] */ ;
             IF_NONE
               { DROP /* [] */ ; PUSH nat 1 /* [ nat ] */ }
               { DUP
                 /* [ nat : nat : lambda nat nat ] */ ;
                 DIP { EXEC /* [ nat ] */ }
                 /* [ nat : nat ] */ ;
                 PUSH nat 1
                 /* [ nat : nat : nat ] */ ;
                 ADD
                 /* [ nat : nat ] */ ;
                 MUL
                 /* [ nat ] */ } }
         /* [ lambda nat nat : nat ] */ ;
         SWAP
         /* [ nat : lambda nat nat ] */ ;
         EXEC
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039995.199 units remaining)	michelson_test_scripts/opcodes/first.tz
{ parameter (list nat) ;
  storage nat ;
  code { CAR
         /* [ list nat ] */ ;
         IF_CONS { DIP { DROP /* [] */ } /* [ nat ] */ } { FAIL } ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039995.086 units remaining)	michelson_test_scripts/opcodes/get_and_update_big_map.tz
{ parameter string ;
  storage (pair (option nat) (big_map string nat)) ;
  code { UNPAPAIR ;
         GET_AND_UPDATE
         /* [ option nat : big_map string nat ] */ ;
         PAIR
         /* [ pair (option nat) (big_map string nat) ] */ ;
         NIL operation
         /* [ list operation : pair (option nat) (big_map string nat) ] */ ;
         PAIR
         /* [ pair (list operation) (option nat) (big_map string nat) ] */ } }
Well typed (Gas remaining: 1039995.146 units remaining)	michelson_test_scripts/opcodes/get_and_update_map.tz
{ parameter string ;
  storage (pair (option nat) (map string nat)) ;
  code { UNPAPAIR ;
         GET_AND_UPDATE
         /* [ option nat : map string nat ] */ ;
         PAIR
         /* [ pair (option nat) (map string nat) ] */ ;
         NIL operation
         /* [ list operation : pair (option nat) (map string nat) ] */ ;
         PAIR
         /* [ pair (list operation) (option nat) (map string nat) ] */ } }
Well typed (Gas remaining: 1039992.369 units remaining)	michelson_test_scripts/opcodes/get_big_map_value.tz
{ parameter string ;
  storage (pair (big_map string string) (option string)) ;
  code { DUP
         /* [ pair string (big_map string string) (option string)
            : pair string (big_map string string) (option string) ] */ ;
         CAR
         /* [ string : pair string (big_map string string) (option string) ] */ ;
         DIP { CDAR ; DUP /* [ big_map string string : big_map string string ] */ }
         /* [ string : big_map string string : big_map string string ] */ ;
         GET
         /* [ option string : big_map string string ] */ ;
         SWAP
         /* [ big_map string string : option string ] */ ;
         PAIR
         /* [ pair (big_map string string) (option string) ] */ ;
         NIL operation
         /* [ list operation : pair (big_map string string) (option string) ] */ ;
         PAIR
         /* [ pair (list operation) (big_map string string) (option string) ] */ } }
Well typed (Gas remaining: 1039992.898 units remaining)	michelson_test_scripts/opcodes/get_map_value.tz
{ parameter string ;
  storage (pair (option string) (map string string)) ;
  code { DUP
         /* [ pair string (option string) (map string string)
            : pair string (option string) (map string string) ] */ ;
         CAR
         /* [ string : pair string (option string) (map string string) ] */ ;
         DIP { CDDR ; DUP /* [ map string string : map string string ] */ }
         /* [ string : map string string : map string string ] */ ;
         GET
         /* [ option string : map string string ] */ ;
         PAIR
         /* [ pair (option string) (map string string) ] */ ;
         NIL operation
         /* [ list operation : pair (option string) (map string string) ] */ ;
         PAIR
         /* [ pair (list operation) (option string) (map string string) ] */ } }
Well typed (Gas remaining: 1039996.673 units remaining)	michelson_test_scripts/opcodes/hash_consistency_checker.tz
{ parameter (pair mutez (pair timestamp int)) ;
  storage bytes ;
  code { CAR
         /* [ pair mutez timestamp int ] */ ;
         PACK
         /* [ bytes ] */ ;
         BLAKE2B
         /* [ bytes ] */ ;
         NIL operation
         /* [ list operation : bytes ] */ ;
         PAIR
         /* [ pair (list operation) bytes ] */ } }
Well typed (Gas remaining: 1039996.983 units remaining)	michelson_test_scripts/opcodes/hash_key.tz
{ parameter key ;
  storage (option key_hash) ;
  code { CAR
         /* [ key ] */ ;
         HASH_KEY
         /* [ key_hash ] */ ;
         SOME
         /* [ option key_hash ] */ ;
         NIL operation
         /* [ list operation : option key_hash ] */ ;
         PAIR
         /* [ pair (list operation) (option key_hash) ] */ } }
Well typed (Gas remaining: 1039997.089 units remaining)	michelson_test_scripts/opcodes/hash_string.tz
{ parameter string ;
  storage bytes ;
  code { CAR
         /* [ string ] */ ;
         PACK
         /* [ bytes ] */ ;
         BLAKE2B
         /* [ bytes ] */ ;
         NIL operation
         /* [ list operation : bytes ] */ ;
         PAIR
         /* [ pair (list operation) bytes ] */ } }
Well typed (Gas remaining: 1039995.431 units remaining)	michelson_test_scripts/opcodes/if.tz
{ parameter bool ;
  storage (option bool) ;
  code { CAR
         /* [ bool ] */ ;
         IF { PUSH bool True /* [ bool ] */ } { PUSH bool False /* [ bool ] */ } ;
         SOME
         /* [ option bool ] */ ;
         NIL operation
         /* [ list operation : option bool ] */ ;
         PAIR
         /* [ pair (list operation) (option bool) ] */ } }
Well typed (Gas remaining: 1039996.124 units remaining)	michelson_test_scripts/opcodes/if_some.tz
{ parameter (option string) ;
  storage string ;
  code { CAR
         /* [ option string ] */ ;
         IF_SOME { /* [ string ] */ } { PUSH string "" /* [ string ] */ } ;
         NIL operation
         /* [ list operation : string ] */ ;
         PAIR
         /* [ pair (list operation) string ] */ } }
Well typed (Gas remaining: 1039996.983 units remaining)	michelson_test_scripts/opcodes/int.tz
{ parameter nat ;
  storage (option int) ;
  code { CAR
         /* [ nat ] */ ;
         INT
         /* [ int ] */ ;
         SOME
         /* [ option int ] */ ;
         NIL operation
         /* [ list operation : option int ] */ ;
         PAIR
         /* [ pair (list operation) (option int) ] */ } }
Well typed (Gas remaining: 1039996.910 units remaining)	michelson_test_scripts/opcodes/iter_fail.tz
{ parameter (set nat) ;
  storage unit ;
  code { UNPAIR
         /* [ set nat : unit ] */ ;
         ITER { FAILWITH /* [] */ }
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039996.983 units remaining)	michelson_test_scripts/opcodes/keccak.tz
{ storage (option bytes) ;
  parameter bytes ;
  code { CAR
         /* [ bytes ] */ ;
         KECCAK
         /* [ bytes ] */ ;
         SOME
         /* [ option bytes ] */ ;
         NIL operation
         /* [ list operation : option bytes ] */ ;
         PAIR
         /* [ pair (list operation) (option bytes) ] */ } }
Well typed (Gas remaining: 1039995.825 units remaining)	michelson_test_scripts/opcodes/left_right.tz
{ parameter (or bool string) ;
  storage (or string bool) ;
  code { CAR
         /* [ or bool string ] */ ;
         IF_LEFT
           { RIGHT string /* [ or string bool ] */ }
           { LEFT bool /* [ or string bool ] */ } ;
         NIL operation
         /* [ list operation : or string bool ] */ ;
         PAIR
         /* [ pair (list operation) (or string bool) ] */ } }
Well typed (Gas remaining: 1039997.552 units remaining)	michelson_test_scripts/opcodes/level.tz
{ parameter unit ;
  storage nat ;
  code { DROP
         /* [] */ ;
         LEVEL
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039996.413 units remaining)	michelson_test_scripts/opcodes/list_concat.tz
{ parameter (list string) ;
  storage string ;
  code { UNPAIR
         /* [ list string : string ] */ ;
         SWAP
         /* [ string : list string ] */ ;
         CONS
         /* [ list string ] */ ;
         CONCAT
         /* [ string ] */ ;
         NIL operation
         /* [ list operation : string ] */ ;
         PAIR
         /* [ pair (list operation) string ] */ } }
Well typed (Gas remaining: 1039996.413 units remaining)	michelson_test_scripts/opcodes/list_concat_bytes.tz
{ parameter (list bytes) ;
  storage bytes ;
  code { UNPAIR
         /* [ list bytes : bytes ] */ ;
         SWAP
         /* [ bytes : list bytes ] */ ;
         CONS
         /* [ list bytes ] */ ;
         CONCAT
         /* [ bytes ] */ ;
         NIL operation
         /* [ list operation : bytes ] */ ;
         PAIR
         /* [ pair (list operation) bytes ] */ } }
Well typed (Gas remaining: 1039997.827 units remaining)	michelson_test_scripts/opcodes/list_id.tz
{ parameter (list string) ;
  storage (list string) ;
  code { CAR
         /* [ list string ] */ ;
         NIL operation
         /* [ list operation : list string ] */ ;
         PAIR
         /* [ pair (list operation) (list string) ] */ } }
Well typed (Gas remaining: 1039997.048 units remaining)	michelson_test_scripts/opcodes/list_id_map.tz
{ parameter (list string) ;
  storage (list string) ;
  code { CAR
         /* [ list string ] */ ;
         MAP { /* [ string ] */ }
         /* [ list string ] */ ;
         NIL operation
         /* [ list operation : list string ] */ ;
         PAIR
         /* [ pair (list operation) (list string) ] */ } }
Well typed (Gas remaining: 1039995.699 units remaining)	michelson_test_scripts/opcodes/list_iter.tz
{ parameter (list int) ;
  storage int ;
  code { CAR
         /* [ list int ] */ ;
         PUSH int 1
         /* [ int : list int ] */ ;
         SWAP
         /* [ list int : int ] */ ;
         ITER { MUL /* [ int ] */ }
         /* [ int ] */ ;
         NIL operation
         /* [ list operation : int ] */ ;
         PAIR
         /* [ pair (list operation) int ] */ } }
Well typed (Gas remaining: 1039991.754 units remaining)	michelson_test_scripts/opcodes/list_map_block.tz
{ parameter (list int) ;
  storage (list int) ;
  code { CAR
         /* [ list int ] */ ;
         PUSH int 0
         /* [ int : list int ] */ ;
         SWAP
         /* [ list int : int ] */ ;
         MAP { DIP { DUP /* [ int : int ] */ }
               /* [ int : int : int ] */ ;
               ADD
               /* [ int : int ] */ ;
               DIP { PUSH int 1 /* [ int : int ] */ ; ADD /* [ int ] */ }
               /* [ int : int ] */ }
         /* [ list int : int ] */ ;
         NIL operation
         /* [ list operation : list int : int ] */ ;
         PAIR
         /* [ pair (list operation) (list int) : int ] */ ;
         DIP { DROP /* [] */ }
         /* [ pair (list operation) (list int) ] */ } }
Well typed (Gas remaining: 1039997.469 units remaining)	michelson_test_scripts/opcodes/list_size.tz
{ parameter (list int) ;
  storage nat ;
  code { CAR
         /* [ list int ] */ ;
         SIZE
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039997.065 units remaining)	michelson_test_scripts/opcodes/loop_failwith.tz
{ parameter bool ;
  storage unit ;
  code { UNPAIR
         /* [ bool : unit ] */ ;
         LOOP { FAILWITH /* [] */ }
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039988.053 units remaining)	michelson_test_scripts/opcodes/loop_left.tz
{ parameter (list string) ;
  storage (list string) ;
  code { CAR
         /* [ list string ] */ ;
         NIL string
         /* [ list string : list string ] */ ;
         SWAP
         /* [ list string : list string ] */ ;
         PAIR
         /* [ pair (list string) (list string) ] */ ;
         LEFT (list string)
         /* [ or (pair (list string) (list string)) (list string) ] */ ;
         LOOP_LEFT
           { DUP
             /* [ pair (list string) (list string) : pair (list string) (list string) ] */ ;
             CAR
             /* [ list string : pair (list string) (list string) ] */ ;
             DIP { CDR /* [ list string ] */ }
             /* [ list string : list string ] */ ;
             IF_CONS
               { SWAP
                 /* [ list string : string : list string ] */ ;
                 DIP { CONS /* [ list string ] */ }
                 /* [ list string : list string ] */ ;
                 PAIR
                 /* [ pair (list string) (list string) ] */ ;
                 LEFT (list string)
                 /* [ or (pair (list string) (list string)) (list string) ] */ }
               { RIGHT
                   (pair (list string) (list string))
                 /* [ or (pair (list string) (list string)) (list string) ] */ } }
         /* [ list string ] */ ;
         NIL operation
         /* [ list operation : list string ] */ ;
         PAIR
         /* [ pair (list operation) (list string) ] */ } }
Well typed (Gas remaining: 1039996.821 units remaining)	michelson_test_scripts/opcodes/loop_left_failwith.tz
{ parameter (or string nat) ;
  storage nat ;
  code { CAR
         /* [ or string nat ] */ ;
         LOOP_LEFT { FAILWITH /* [] */ }
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039972.833 units remaining)	michelson_test_scripts/opcodes/lsl_bytes_016.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH nat 0
         /* [ nat ] */ ;
         PUSH bytes 0x06
         /* [ bytes : nat ] */ ;
         LSL
         /* [ bytes ] */ ;
         PUSH bytes 0x06
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 1
         /* [ nat ] */ ;
         PUSH bytes 0x06
         /* [ bytes : nat ] */ ;
         LSL
         /* [ bytes ] */ ;
         PUSH bytes 0x000c
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 8
         /* [ nat ] */ ;
         PUSH bytes 0x06
         /* [ bytes : nat ] */ ;
         LSL
         /* [ bytes ] */ ;
         PUSH bytes 0x0600
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 1
         /* [ nat ] */ ;
         PUSH bytes 0x0006
         /* [ bytes : nat ] */ ;
         LSL
         /* [ bytes ] */ ;
         PUSH bytes 0x00000c
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL @noop operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039959.932 units remaining)	michelson_test_scripts/opcodes/lsr_bytes_016.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH nat 1
         /* [ nat ] */ ;
         PUSH bytes 0x06
         /* [ bytes : nat ] */ ;
         LSR
         /* [ bytes ] */ ;
         PUSH bytes 0x03
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 8
         /* [ nat ] */ ;
         PUSH bytes 0x06
         /* [ bytes : nat ] */ ;
         LSR
         /* [ bytes ] */ ;
         PUSH bytes 0x
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 1
         /* [ nat ] */ ;
         PUSH bytes 0x0006
         /* [ bytes : nat ] */ ;
         LSR
         /* [ bytes ] */ ;
         PUSH bytes 0x0003
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 8
         /* [ nat ] */ ;
         PUSH bytes 0x0006
         /* [ bytes : nat ] */ ;
         LSR
         /* [ bytes ] */ ;
         PUSH bytes 0x00
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 0
         /* [ nat ] */ ;
         PUSH bytes 0x001234
         /* [ bytes : nat ] */ ;
         LSR
         /* [ bytes ] */ ;
         PUSH bytes 0x001234
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH nat 30
         /* [ nat ] */ ;
         PUSH bytes 0x001234
         /* [ bytes : nat ] */ ;
         LSR
         /* [ bytes ] */ ;
         PUSH bytes 0x
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL @noop operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039991.235 units remaining)	michelson_test_scripts/opcodes/map_car.tz
{ parameter bool ;
  storage (pair (bool %b) (nat %n)) ;
  code { DUP
         /* [ pair bool bool nat : pair bool bool nat ] */ ;
         CAR
         /* [ bool : pair bool bool nat ] */ ;
         DIP { CDR /* [ pair bool nat ] */ }
         /* [ bool : pair bool nat ] */ ;
         SWAP
         /* [ pair bool nat : bool ] */ ;
         MAP_CAR @new_storage %b { AND /* [ bool ] */ } ;
         NIL operation
         /* [ list operation : pair bool nat ] */ ;
         PAIR
         /* [ pair (list operation) bool nat ] */ } }
Well typed (Gas remaining: 1039997.566 units remaining)	michelson_test_scripts/opcodes/map_id.tz
{ parameter (map nat nat) ;
  storage (map nat nat) ;
  code { CAR
         /* [ map nat nat ] */ ;
         NIL operation
         /* [ list operation : map nat nat ] */ ;
         PAIR
         /* [ pair (list operation) (map nat nat) ] */ } }
Well typed (Gas remaining: 1039987.183 units remaining)	michelson_test_scripts/opcodes/map_iter.tz
{ parameter (map (int :k) (int :e)) ;
  storage (pair (int :k) (int :e)) ;
  code { CAR
         /* [ map int int ] */ ;
         PUSH @acc_e (int :e) 0
         /* [ int : map int int ] */ ;
         PUSH @acc_k (int :k) 0
         /* [ int : int : map int int ] */ ;
         PAIR % %r
         /* [ pair int int : map int int ] */ ;
         SWAP
         /* [ map int int : pair int int ] */ ;
         ITER { DIP { DUP
                      /* [ pair int int : pair int int ] */ ;
                      CAR
                      /* [ int : pair int int ] */ ;
                      DIP { CDR /* [ int ] */ }
                      /* [ int : int ] */ }
                /* [ pair int int : int : int ] */ ;
                DUP
                /* [ pair int int : pair int int : int : int ] */ ;
                DIP { CAR /* [ int : int : int ] */ ; ADD /* [ int : int ] */ }
                /* [ pair int int : int : int ] */ ;
                SWAP
                /* [ int : pair int int : int ] */ ;
                DIP { CDR /* [ int : int ] */ ; ADD /* [ int ] */ }
                /* [ int : int ] */ ;
                PAIR % %r
                /* [ pair int int ] */ }
         /* [ pair int int ] */ ;
         NIL operation
         /* [ list operation : pair int int ] */ ;
         PAIR
         /* [ pair (list operation) int int ] */ } }
Well typed (Gas remaining: 1039993.752 units remaining)	michelson_test_scripts/opcodes/map_map.tz
{ parameter nat ;
  storage (map string nat) ;
  code { UNPAIR
         /* [ nat : map string nat ] */ ;
         SWAP
         /* [ map string nat : nat ] */ ;
         MAP { CDR
               /* [ nat : nat ] */ ;
               DIP { DUP /* [ nat : nat ] */ }
               /* [ nat : nat : nat ] */ ;
               ADD
               /* [ nat : nat ] */ }
         /* [ map string nat : nat ] */ ;
         DIP { DROP /* [] */ }
         /* [ map string nat ] */ ;
         NIL operation
         /* [ list operation : map string nat ] */ ;
         PAIR
         /* [ pair (list operation) (map string nat) ] */ } }
Well typed (Gas remaining: 1039988.773 units remaining)	michelson_test_scripts/opcodes/map_map_sideeffect.tz
{ parameter nat ;
  storage (pair (map string nat) nat) ;
  code { UNPAIR
         /* [ nat : pair (map string nat) nat ] */ ;
         SWAP
         /* [ pair (map string nat) nat : nat ] */ ;
         CAR
         /* [ map string nat : nat ] */ ;
         DIP 2 { PUSH @sum nat 0 /* [ nat ] */ }
         /* [ map string nat : nat : nat ] */ ;
         MAP { CDR
               /* [ nat : nat : nat ] */ ;
               DIP { DUP /* [ nat : nat : nat ] */ }
               /* [ nat : nat : nat : nat ] */ ;
               ADD
               /* [ nat : nat : nat ] */ ;
               DUP
               /* [ nat : nat : nat : nat ] */ ;
               DUG 2
               /* [ nat : nat : nat : nat ] */ ;
               DIP 2 { ADD @sum /* [ nat ] */ }
               /* [ nat : nat : nat ] */ }
         /* [ map string nat : nat : nat ] */ ;
         DIP { DROP /* [ nat ] */ }
         /* [ map string nat : nat ] */ ;
         PAIR
         /* [ pair (map string nat) nat ] */ ;
         NIL operation
         /* [ list operation : pair (map string nat) nat ] */ ;
         PAIR
         /* [ pair (list operation) (map string nat) nat ] */ } }
Well typed (Gas remaining: 1039993.846 units remaining)	michelson_test_scripts/opcodes/map_mem_nat.tz
{ parameter nat ;
  storage (pair (map nat nat) (option bool)) ;
  code { UNPAIR
         /* [ nat : pair (map nat nat) (option bool) ] */ ;
         DIP { CAR /* [ map nat nat ] */ ; DUP /* [ map nat nat : map nat nat ] */ }
         /* [ nat : map nat nat : map nat nat ] */ ;
         MEM
         /* [ bool : map nat nat ] */ ;
         SOME
         /* [ option bool : map nat nat ] */ ;
         SWAP
         /* [ map nat nat : option bool ] */ ;
         PAIR
         /* [ pair (map nat nat) (option bool) ] */ ;
         NIL operation
         /* [ list operation : pair (map nat nat) (option bool) ] */ ;
         PAIR
         /* [ pair (list operation) (map nat nat) (option bool) ] */ } }
Well typed (Gas remaining: 1039993.846 units remaining)	michelson_test_scripts/opcodes/map_mem_string.tz
{ parameter string ;
  storage (pair (map string nat) (option bool)) ;
  code { UNPAIR
         /* [ string : pair (map string nat) (option bool) ] */ ;
         DIP { CAR /* [ map string nat ] */ ; DUP /* [ map string nat : map string nat ] */ }
         /* [ string : map string nat : map string nat ] */ ;
         MEM
         /* [ bool : map string nat ] */ ;
         SOME
         /* [ option bool : map string nat ] */ ;
         SWAP
         /* [ map string nat : option bool ] */ ;
         PAIR
         /* [ pair (map string nat) (option bool) ] */ ;
         NIL operation
         /* [ list operation : pair (map string nat) (option bool) ] */ ;
         PAIR
         /* [ pair (list operation) (map string nat) (option bool) ] */ } }
Well typed (Gas remaining: 1039997.385 units remaining)	michelson_test_scripts/opcodes/map_size.tz
{ parameter (map string nat) ;
  storage nat ;
  code { CAR
         /* [ map string nat ] */ ;
         SIZE
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039992.457 units remaining)	michelson_test_scripts/opcodes/merge_comparable_pairs.tz
{ parameter (set (pair (nat %n) (pair %p (string %s) (int %i)))) ;
  storage nat ;
  code { UNPAIR
         /* [ set (pair nat string int) : nat ] */ ;
         SWAP
         /* [ nat : set (pair nat string int) ] */ ;
         PUSH nat 3
         /* [ nat : nat : set (pair nat string int) ] */ ;
         COMPARE
         /* [ int : set (pair nat string int) ] */ ;
         GT
         /* [ bool : set (pair nat string int) ] */ ;
         IF { /* [ set (pair nat string int) ] */ }
            { DROP
              /* [] */ ;
              EMPTY_SET (pair nat (pair string int))
              /* [ set (pair nat string int) ] */ } ;
         SIZE
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039961.027 units remaining)	michelson_test_scripts/opcodes/mul.tz
{ parameter unit ;
  storage unit ;
  code { CAR
         /* [ unit ] */ ;
         DROP
         /* [] */ ;
         PUSH nat 7987
         /* [ nat ] */ ;
         PUSH mutez 10
         /* [ mutez : nat ] */ ;
         MUL
         /* [ mutez ] */ ;
         PUSH mutez 79870
         /* [ mutez : mutez ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH mutez 10
         /* [ mutez ] */ ;
         PUSH nat 7987
         /* [ nat : mutez ] */ ;
         MUL
         /* [ mutez ] */ ;
         PUSH mutez 79870
         /* [ mutez : mutez ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH int 10
         /* [ int ] */ ;
         PUSH int -7987
         /* [ int : int ] */ ;
         MUL
         /* [ int ] */ ;
         PUSH int -79870
         /* [ int : int ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH nat 10
         /* [ nat ] */ ;
         PUSH int -7987
         /* [ int : nat ] */ ;
         MUL
         /* [ int ] */ ;
         PUSH int -79870
         /* [ int : int ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH int -10
         /* [ int ] */ ;
         PUSH nat 7987
         /* [ nat : int ] */ ;
         MUL
         /* [ int ] */ ;
         PUSH int -79870
         /* [ int : int ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         PUSH nat 10
         /* [ nat ] */ ;
         PUSH nat 7987
         /* [ nat : nat ] */ ;
         MUL
         /* [ nat ] */ ;
         PUSH nat 79870
         /* [ nat : nat ] */ ;
         COMPARE
         /* [ int ] */ ;
         ASSERT_EQ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039996.271 units remaining)	michelson_test_scripts/opcodes/mul_bls12_381_fr.tz
{ parameter (pair bls12_381_fr bls12_381_fr) ;
  storage (option bls12_381_fr) ;
  code { CAR
         /* [ pair bls12_381_fr bls12_381_fr ] */ ;
         UNPAIR
         /* [ bls12_381_fr : bls12_381_fr ] */ ;
         MUL
         /* [ bls12_381_fr ] */ ;
         SOME
         /* [ option bls12_381_fr ] */ ;
         NIL operation
         /* [ list operation : option bls12_381_fr ] */ ;
         PAIR
         /* [ pair (list operation) (option bls12_381_fr) ] */ } }
Well typed (Gas remaining: 1039996.271 units remaining)	michelson_test_scripts/opcodes/mul_bls12_381_g1.tz
{ parameter (pair bls12_381_g1 bls12_381_fr) ;
  storage (option bls12_381_g1) ;
  code { CAR
         /* [ pair bls12_381_g1 bls12_381_fr ] */ ;
         UNPAIR
         /* [ bls12_381_g1 : bls12_381_fr ] */ ;
         MUL
         /* [ bls12_381_g1 ] */ ;
         SOME
         /* [ option bls12_381_g1 ] */ ;
         NIL operation
         /* [ list operation : option bls12_381_g1 ] */ ;
         PAIR
         /* [ pair (list operation) (option bls12_381_g1) ] */ } }
Well typed (Gas remaining: 1039996.271 units remaining)	michelson_test_scripts/opcodes/mul_bls12_381_g2.tz
{ parameter (pair bls12_381_g2 bls12_381_fr) ;
  storage (option bls12_381_g2) ;
  code { CAR
         /* [ pair bls12_381_g2 bls12_381_fr ] */ ;
         UNPAIR
         /* [ bls12_381_g2 : bls12_381_fr ] */ ;
         MUL
         /* [ bls12_381_g2 ] */ ;
         SOME
         /* [ option bls12_381_g2 ] */ ;
         NIL operation
         /* [ list operation : option bls12_381_g2 ] */ ;
         PAIR
         /* [ pair (list operation) (option bls12_381_g2) ] */ } }
Well typed (Gas remaining: 1039992.436 units remaining)	michelson_test_scripts/opcodes/mul_overflow.tz
{ parameter (or unit unit) ;
  storage unit ;
  code { CAR
         /* [ or unit unit ] */ ;
         IF_LEFT
           { PUSH nat 922337203685477580700
             /* [ nat : unit ] */ ;
             PUSH mutez 10
             /* [ mutez : nat : unit ] */ ;
             MUL
             /* [ mutez : unit ] */ ;
             DROP
             /* [ unit ] */ }
           { PUSH mutez 10
             /* [ mutez : unit ] */ ;
             PUSH nat 922337203685477580700
             /* [ nat : mutez : unit ] */ ;
             MUL
             /* [ mutez : unit ] */ ;
             DROP
             /* [ unit ] */ } ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039997.167 units remaining)	michelson_test_scripts/opcodes/munch.tz
{ parameter
    (or (bytes %bytes) (or (lambda %lambda unit unit) (or (nat %nat) (list %list_nat nat)))) ;
  storage unit ;
  code { CDR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039992.419 units remaining)	michelson_test_scripts/opcodes/mutez_to_bls12_381_fr.tz
{ parameter mutez ;
  storage bls12_381_fr ;
  code { CAR
         /* [ mutez ] */ ;
         PUSH mutez 1
         /* [ mutez : mutez ] */ ;
         SWAP
         /* [ mutez : mutez ] */ ;
         EDIV
         /* [ option (pair nat mutez) ] */ ;
         ASSERT_SOME ;
         CAR
         /* [ nat ] */ ;
         PUSH bls12_381_fr 1
         /* [ bls12_381_fr : nat ] */ ;
         MUL
         /* [ bls12_381_fr ] */ ;
         NIL operation
         /* [ list operation : bls12_381_fr ] */ ;
         PAIR
         /* [ pair (list operation) bls12_381_fr ] */ } }
Well typed (Gas remaining: 1039996.267 units remaining)	michelson_test_scripts/opcodes/neg.tz
{ parameter (or int nat) ;
  storage int ;
  code { CAR
         /* [ or int nat ] */ ;
         IF_LEFT { NEG /* [ int ] */ } { NEG /* [ int ] */ } ;
         NIL operation
         /* [ list operation : int ] */ ;
         PAIR
         /* [ pair (list operation) int ] */ } }
Well typed (Gas remaining: 1039996.983 units remaining)	michelson_test_scripts/opcodes/neg_bls12_381_fr.tz
{ parameter bls12_381_fr ;
  storage (option bls12_381_fr) ;
  code { CAR
         /* [ bls12_381_fr ] */ ;
         NEG
         /* [ bls12_381_fr ] */ ;
         SOME
         /* [ option bls12_381_fr ] */ ;
         NIL operation
         /* [ list operation : option bls12_381_fr ] */ ;
         PAIR
         /* [ pair (list operation) (option bls12_381_fr) ] */ } }
Well typed (Gas remaining: 1039996.983 units remaining)	michelson_test_scripts/opcodes/neg_bls12_381_g1.tz
{ parameter bls12_381_g1 ;
  storage (option bls12_381_g1) ;
  code { CAR
         /* [ bls12_381_g1 ] */ ;
         NEG
         /* [ bls12_381_g1 ] */ ;
         SOME
         /* [ option bls12_381_g1 ] */ ;
         NIL operation
         /* [ list operation : option bls12_381_g1 ] */ ;
         PAIR
         /* [ pair (list operation) (option bls12_381_g1) ] */ } }
Well typed (Gas remaining: 1039996.983 units remaining)	michelson_test_scripts/opcodes/neg_bls12_381_g2.tz
{ parameter bls12_381_g2 ;
  storage (option bls12_381_g2) ;
  code { CAR
         /* [ bls12_381_g2 ] */ ;
         NEG
         /* [ bls12_381_g2 ] */ ;
         SOME
         /* [ option bls12_381_g2 ] */ ;
         NIL operation
         /* [ list operation : option bls12_381_g2 ] */ ;
         PAIR
         /* [ pair (list operation) (option bls12_381_g2) ] */ } }
Well typed (Gas remaining: 1039997.363 units remaining)	michelson_test_scripts/opcodes/none.tz
{ parameter unit ;
  storage (option nat) ;
  code { DROP
         /* [] */ ;
         NONE nat
         /* [ option nat ] */ ;
         NIL operation
         /* [ list operation : option nat ] */ ;
         PAIR
         /* [ pair (list operation) (option nat) ] */ } }
Well typed (Gas remaining: 1039998.017 units remaining)	michelson_test_scripts/opcodes/noop.tz
{ parameter unit ;
  storage unit ;
  code { CDR
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039996.983 units remaining)	michelson_test_scripts/opcodes/not.tz
{ parameter bool ;
  storage (option bool) ;
  code { CAR
         /* [ bool ] */ ;
         NOT
         /* [ bool ] */ ;
         SOME
         /* [ option bool ] */ ;
         NIL operation
         /* [ list operation : option bool ] */ ;
         PAIR
         /* [ pair (list operation) (option bool) ] */ } }
Well typed (Gas remaining: 1039995.688 units remaining)	michelson_test_scripts/opcodes/not_binary.tz
{ parameter (or int nat) ;
  storage (option int) ;
  code { CAR
         /* [ or int nat ] */ ;
         IF_LEFT { NOT /* [ int ] */ } { NOT /* [ int ] */ } ;
         SOME
         /* [ option int ] */ ;
         NIL operation
         /* [ list operation : option int ] */ ;
         PAIR
         /* [ pair (list operation) (option int) ] */ } }
Well typed (Gas remaining: 1039981.112 units remaining)	michelson_test_scripts/opcodes/not_bytes_016.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH bytes 0x05
         /* [ bytes ] */ ;
         NOT
         /* [ bytes ] */ ;
         PUSH bytes 0xfa
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x0005
         /* [ bytes ] */ ;
         NOT
         /* [ bytes ] */ ;
         PUSH bytes 0xfffa
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0xff05
         /* [ bytes ] */ ;
         NOT
         /* [ bytes ] */ ;
         PUSH bytes 0x00fa
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL @noop operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039994.565 units remaining)	michelson_test_scripts/opcodes/or.tz
{ parameter (pair bool bool) ;
  storage (option bool) ;
  code { CAR
         /* [ pair bool bool ] */ ;
         DUP
         /* [ pair bool bool : pair bool bool ] */ ;
         CAR
         /* [ bool : pair bool bool ] */ ;
         SWAP
         /* [ pair bool bool : bool ] */ ;
         CDR
         /* [ bool : bool ] */ ;
         OR
         /* [ bool ] */ ;
         SOME
         /* [ option bool ] */ ;
         NIL operation
         /* [ list operation : option bool ] */ ;
         PAIR
         /* [ pair (list operation) (option bool) ] */ } }
Well typed (Gas remaining: 1039996.271 units remaining)	michelson_test_scripts/opcodes/or_binary.tz
{ parameter (pair nat nat) ;
  storage (option nat) ;
  code { CAR
         /* [ pair nat nat ] */ ;
         UNPAIR
         /* [ nat : nat ] */ ;
         OR
         /* [ nat ] */ ;
         SOME
         /* [ option nat ] */ ;
         NIL operation
         /* [ list operation : option nat ] */ ;
         PAIR
         /* [ pair (list operation) (option nat) ] */ } }
Well typed (Gas remaining: 1039978.970 units remaining)	michelson_test_scripts/opcodes/or_bytes_016.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH bytes 0x05
         /* [ bytes ] */ ;
         PUSH bytes 0x06
         /* [ bytes : bytes ] */ ;
         OR
         /* [ bytes ] */ ;
         PUSH bytes 0x07
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x0005
         /* [ bytes ] */ ;
         PUSH bytes 0x0106
         /* [ bytes : bytes ] */ ;
         OR
         /* [ bytes ] */ ;
         PUSH bytes 0x0107
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x05
         /* [ bytes ] */ ;
         PUSH bytes 0x0106
         /* [ bytes : bytes ] */ ;
         OR
         /* [ bytes ] */ ;
         PUSH bytes 0x0107
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL @noop operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039997.446 units remaining)	michelson_test_scripts/opcodes/originate_big_map.tz
{ parameter (big_map int int) ;
  storage (big_map int int) ;
  code { CAR
         /* [ big_map int int ] */ ;
         NIL operation
         /* [ list operation : big_map int int ] */ ;
         PAIR
         /* [ pair (list operation) (big_map int int) ] */ } }
Well typed (Gas remaining: 1039987.385 units remaining)	michelson_test_scripts/opcodes/packunpack.tz
{ parameter (pair (pair (pair string (list int)) (set nat)) bytes) ;
  storage unit ;
  code { CAR
         /* [ pair (pair (pair string (list int)) (set nat)) bytes ] */ ;
         UNPAIR
         /* [ pair (pair string (list int)) (set nat) : bytes ] */ ;
         DIP { DUP /* [ bytes : bytes ] */ }
         /* [ pair (pair string (list int)) (set nat) : bytes : bytes ] */ ;
         PACK
         /* [ bytes : bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         UNPACK
           (pair (pair string (list int)) (set nat))
         /* [ option (pair (pair string (list int)) (set nat)) ] */ ;
         ASSERT_SOME ;
         DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039888.537 units remaining)	michelson_test_scripts/opcodes/packunpack_rev.tz
{ parameter (pair int nat string bytes mutez bool key_hash timestamp address) ;
  storage unit ;
  code { CAR
         /* [ pair int nat string bytes mutez bool key_hash timestamp address ] */ ;
         DUP
         /* [ pair int nat string bytes mutez bool key_hash timestamp address
            : pair int nat string bytes mutez bool key_hash timestamp address ] */ ;
         CAR
         /* [ int : pair int nat string bytes mutez bool key_hash timestamp address ] */ ;
         DIP { UNPAIR
               /* [ int : pair nat string bytes mutez bool key_hash timestamp address ] */ }
         /* [ int : int : pair nat string bytes mutez bool key_hash timestamp address ] */ ;
         PACK
         /* [ bytes : int : pair nat string bytes mutez bool key_hash timestamp address ] */ ;
         UNPACK
           int
         /* [ option int : int
            : pair nat string bytes mutez bool key_hash timestamp address ] */ ;
         ASSERT_SOME ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair nat string bytes mutez bool key_hash timestamp address
            : pair nat string bytes mutez bool key_hash timestamp address ] */ ;
         CAR
         /* [ nat : pair nat string bytes mutez bool key_hash timestamp address ] */ ;
         DIP { UNPAIR /* [ nat : pair string bytes mutez bool key_hash timestamp address ] */ }
         /* [ nat : nat : pair string bytes mutez bool key_hash timestamp address ] */ ;
         PACK
         /* [ bytes : nat : pair string bytes mutez bool key_hash timestamp address ] */ ;
         UNPACK
           nat
         /* [ option nat : nat
            : pair string bytes mutez bool key_hash timestamp address ] */ ;
         ASSERT_SOME ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair string bytes mutez bool key_hash timestamp address
            : pair string bytes mutez bool key_hash timestamp address ] */ ;
         CAR
         /* [ string : pair string bytes mutez bool key_hash timestamp address ] */ ;
         DIP { UNPAIR /* [ string : pair bytes mutez bool key_hash timestamp address ] */ }
         /* [ string : string : pair bytes mutez bool key_hash timestamp address ] */ ;
         PACK
         /* [ bytes : string : pair bytes mutez bool key_hash timestamp address ] */ ;
         UNPACK
           string
         /* [ option string : string : pair bytes mutez bool key_hash timestamp address ] */ ;
         ASSERT_SOME ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair bytes mutez bool key_hash timestamp address
            : pair bytes mutez bool key_hash timestamp address ] */ ;
         CAR
         /* [ bytes : pair bytes mutez bool key_hash timestamp address ] */ ;
         DIP { UNPAIR /* [ bytes : pair mutez bool key_hash timestamp address ] */ }
         /* [ bytes : bytes : pair mutez bool key_hash timestamp address ] */ ;
         PACK
         /* [ bytes : bytes : pair mutez bool key_hash timestamp address ] */ ;
         UNPACK
           bytes
         /* [ option bytes : bytes : pair mutez bool key_hash timestamp address ] */ ;
         ASSERT_SOME ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair mutez bool key_hash timestamp address
            : pair mutez bool key_hash timestamp address ] */ ;
         CAR
         /* [ mutez : pair mutez bool key_hash timestamp address ] */ ;
         DIP { UNPAIR /* [ mutez : pair bool key_hash timestamp address ] */ }
         /* [ mutez : mutez : pair bool key_hash timestamp address ] */ ;
         PACK
         /* [ bytes : mutez : pair bool key_hash timestamp address ] */ ;
         UNPACK mutez
         /* [ option mutez : mutez : pair bool key_hash timestamp address ] */ ;
         ASSERT_SOME ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair bool key_hash timestamp address
            : pair bool key_hash timestamp address ] */ ;
         CAR
         /* [ bool : pair bool key_hash timestamp address ] */ ;
         DIP { UNPAIR /* [ bool : pair key_hash timestamp address ] */ }
         /* [ bool : bool : pair key_hash timestamp address ] */ ;
         PACK
         /* [ bytes : bool : pair key_hash timestamp address ] */ ;
         UNPACK bool
         /* [ option bool : bool : pair key_hash timestamp address ] */ ;
         ASSERT_SOME ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair key_hash timestamp address : pair key_hash timestamp address ] */ ;
         CAR
         /* [ key_hash : pair key_hash timestamp address ] */ ;
         DIP { UNPAIR /* [ key_hash : pair timestamp address ] */ }
         /* [ key_hash : key_hash : pair timestamp address ] */ ;
         PACK
         /* [ bytes : key_hash : pair timestamp address ] */ ;
         UNPACK key_hash
         /* [ option key_hash : key_hash : pair timestamp address ] */ ;
         ASSERT_SOME ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair timestamp address : pair timestamp address ] */ ;
         CAR
         /* [ timestamp : pair timestamp address ] */ ;
         DIP { UNPAIR /* [ timestamp : address ] */ }
         /* [ timestamp : timestamp : address ] */ ;
         PACK
         /* [ bytes : timestamp : address ] */ ;
         UNPACK timestamp
         /* [ option timestamp : timestamp : address ] */ ;
         ASSERT_SOME ;
         ASSERT_CMPEQ ;
         DUP
         /* [ address : address ] */ ;
         PACK
         /* [ bytes : address ] */ ;
         UNPACK address
         /* [ option address : address ] */ ;
         ASSERT_SOME ;
         ASSERT_CMPEQ ;
         PUSH int 0
         /* [ int ] */ ;
         PACK
         /* [ bytes ] */ ;
         UNPACK nat
         /* [ option nat ] */ ;
         ASSERT_SOME ;
         DROP
         /* [] */ ;
         PUSH int -1
         /* [ int ] */ ;
         PACK
         /* [ bytes ] */ ;
         UNPACK nat
         /* [ option nat ] */ ;
         ASSERT_NONE ;
         PUSH bytes 0x
         /* [ bytes ] */ ;
         UNPACK nat
         /* [ option nat ] */ ;
         ASSERT_NONE ;
         PUSH bytes 0x04
         /* [ bytes ] */ ;
         UNPACK nat
         /* [ option nat ] */ ;
         ASSERT_NONE ;
         PUSH bytes 0x05
         /* [ bytes ] */ ;
         UNPACK nat
         /* [ option nat ] */ ;
         ASSERT_NONE ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039874.912 units remaining)	michelson_test_scripts/opcodes/packunpack_rev_cty.tz
{ parameter
    (pair key
          unit
          signature
          (option signature)
          (list unit)
          (set bool)
          (pair int int)
          (or key_hash timestamp)
          (map int string)
          (lambda string bytes)) ;
  storage unit ;
  code { CAR
         /* [ pair key
                 unit
                 signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         DUP
         /* [ pair key
                 unit
                 signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes)
            : pair key
                 unit
                 signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         CAR
         /* [ key
            : pair key
                 unit
                 signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         DIP { UNPAIR
               /* [ key
                  : pair unit
                       signature
                       (option signature)
                       (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ }
         /* [ key : key
            : pair unit
                 signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         PACK
         /* [ bytes : key
            : pair unit
                 signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         DIP { PACK
               /* [ bytes
                  : pair unit
                       signature
                       (option signature)
                       (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ ;
               UNPACK
                 key
               /* [ option key
                  : pair unit
                       signature
                       (option signature)
                       (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ ;
               ASSERT_SOME ;
               PACK
               /* [ bytes
                  : pair unit
                       signature
                       (option signature)
                       (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ }
         /* [ bytes : bytes
            : pair unit
                 signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair unit
                 signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes)
            : pair unit
                 signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         CAR
         /* [ unit
            : pair unit
                 signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         DIP { UNPAIR
               /* [ unit
                  : pair signature
                       (option signature)
                       (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ }
         /* [ unit : unit
            : pair signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         PACK
         /* [ bytes : unit
            : pair signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         DIP { PACK
               /* [ bytes
                  : pair signature
                       (option signature)
                       (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ ;
               UNPACK
                 unit
               /* [ option unit
                  : pair signature
                       (option signature)
                       (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ ;
               ASSERT_SOME ;
               PACK
               /* [ bytes
                  : pair signature
                       (option signature)
                       (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ }
         /* [ bytes : bytes
            : pair signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes)
            : pair signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         CAR
         /* [ signature
            : pair signature
                 (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         DIP { UNPAIR
               /* [ signature
                  : pair (option signature)
                       (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ }
         /* [ signature : signature
            : pair (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         PACK
         /* [ bytes : signature
            : pair (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         DIP { PACK
               /* [ bytes
                  : pair (option signature)
                       (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ ;
               UNPACK
                 signature
               /* [ option signature
                  : pair (option signature)
                       (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ ;
               ASSERT_SOME ;
               PACK
               /* [ bytes
                  : pair (option signature)
                       (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ }
         /* [ bytes : bytes
            : pair (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes)
            : pair (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         CAR
         /* [ option signature
            : pair (option signature)
                 (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         DIP { UNPAIR
               /* [ option signature
                  : pair (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ }
         /* [ option signature : option signature
            : pair (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         PACK
         /* [ bytes : option signature
            : pair (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         DIP { PACK
               /* [ bytes
                  : pair (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ ;
               UNPACK
                 (option signature)
               /* [ option (option signature)
                  : pair (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ ;
               ASSERT_SOME ;
               PACK
               /* [ bytes
                  : pair (list unit)
                       (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ }
         /* [ bytes : bytes
            : pair (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes)
            : pair (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         CAR
         /* [ list unit
            : pair (list unit)
                 (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         DIP { UNPAIR
               /* [ list unit
                  : pair (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ }
         /* [ list unit : list unit
            : pair (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         PACK
         /* [ bytes : list unit
            : pair (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         DIP { PACK
               /* [ bytes
                  : pair (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ ;
               UNPACK
                 (list unit)
               /* [ option (list unit)
                  : pair (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ ;
               ASSERT_SOME ;
               PACK
               /* [ bytes
                  : pair (set bool)
                       (pair int int)
                       (or key_hash timestamp)
                       (map int string)
                       (lambda string bytes) ] */ }
         /* [ bytes : bytes
            : pair (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes)
            : pair (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         CAR
         /* [ set bool
            : pair (set bool)
                 (pair int int)
                 (or key_hash timestamp)
                 (map int string)
                 (lambda string bytes) ] */ ;
         DIP { UNPAIR
               /* [ set bool
                  : pair (pair int int) (or key_hash timestamp) (map int string) (lambda string bytes) ] */ }
         /* [ set bool : set bool
            : pair (pair int int) (or key_hash timestamp) (map int string) (lambda string bytes) ] */ ;
         PACK
         /* [ bytes : set bool
            : pair (pair int int) (or key_hash timestamp) (map int string) (lambda string bytes) ] */ ;
         DIP { PACK
               /* [ bytes
                  : pair (pair int int) (or key_hash timestamp) (map int string) (lambda string bytes) ] */ ;
               UNPACK
                 (set bool)
               /* [ option (set bool)
                  : pair (pair int int) (or key_hash timestamp) (map int string) (lambda string bytes) ] */ ;
               ASSERT_SOME ;
               PACK
               /* [ bytes
                  : pair (pair int int) (or key_hash timestamp) (map int string) (lambda string bytes) ] */ }
         /* [ bytes : bytes
            : pair (pair int int) (or key_hash timestamp) (map int string) (lambda string bytes) ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair (pair int int) (or key_hash timestamp) (map int string) (lambda string bytes)
            : pair (pair int int) (or key_hash timestamp) (map int string) (lambda string bytes) ] */ ;
         CAR
         /* [ pair int int
            : pair (pair int int) (or key_hash timestamp) (map int string) (lambda string bytes) ] */ ;
         DIP { UNPAIR
               /* [ pair int int
                  : pair (or key_hash timestamp) (map int string) (lambda string bytes) ] */ }
         /* [ pair int int : pair int int
            : pair (or key_hash timestamp) (map int string) (lambda string bytes) ] */ ;
         PACK
         /* [ bytes : pair int int
            : pair (or key_hash timestamp) (map int string) (lambda string bytes) ] */ ;
         DIP { PACK
               /* [ bytes
                  : pair (or key_hash timestamp) (map int string) (lambda string bytes) ] */ ;
               UNPACK
                 (pair int int)
               /* [ option (pair int int)
                  : pair (or key_hash timestamp) (map int string) (lambda string bytes) ] */ ;
               ASSERT_SOME ;
               PACK
               /* [ bytes
                  : pair (or key_hash timestamp) (map int string) (lambda string bytes) ] */ }
         /* [ bytes : bytes
            : pair (or key_hash timestamp) (map int string) (lambda string bytes) ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair (or key_hash timestamp) (map int string) (lambda string bytes)
            : pair (or key_hash timestamp) (map int string) (lambda string bytes) ] */ ;
         CAR
         /* [ or key_hash timestamp
            : pair (or key_hash timestamp) (map int string) (lambda string bytes) ] */ ;
         DIP { UNPAIR
               /* [ or key_hash timestamp : pair (map int string) (lambda string bytes) ] */ }
         /* [ or key_hash timestamp : or key_hash timestamp
            : pair (map int string) (lambda string bytes) ] */ ;
         PACK
         /* [ bytes : or key_hash timestamp
            : pair (map int string) (lambda string bytes) ] */ ;
         DIP { PACK
               /* [ bytes : pair (map int string) (lambda string bytes) ] */ ;
               UNPACK
                 (or key_hash timestamp)
               /* [ option (or key_hash timestamp)
                  : pair (map int string) (lambda string bytes) ] */ ;
               ASSERT_SOME ;
               PACK
               /* [ bytes : pair (map int string) (lambda string bytes) ] */ }
         /* [ bytes : bytes : pair (map int string) (lambda string bytes) ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ pair (map int string) (lambda string bytes)
            : pair (map int string) (lambda string bytes) ] */ ;
         CAR
         /* [ map int string : pair (map int string) (lambda string bytes) ] */ ;
         DIP { UNPAIR /* [ map int string : lambda string bytes ] */ }
         /* [ map int string : map int string : lambda string bytes ] */ ;
         PACK
         /* [ bytes : map int string : lambda string bytes ] */ ;
         DIP { PACK
               /* [ bytes : lambda string bytes ] */ ;
               UNPACK (map int string)
               /* [ option (map int string) : lambda string bytes ] */ ;
               ASSERT_SOME ;
               PACK
               /* [ bytes : lambda string bytes ] */ }
         /* [ bytes : bytes : lambda string bytes ] */ ;
         ASSERT_CMPEQ ;
         DUP
         /* [ lambda string bytes : lambda string bytes ] */ ;
         PACK
         /* [ bytes : lambda string bytes ] */ ;
         DIP { PACK
               /* [ bytes ] */ ;
               UNPACK (lambda string bytes)
               /* [ option (lambda string bytes) ] */ ;
               ASSERT_SOME ;
               PACK
               /* [ bytes ] */ }
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039996.987 units remaining)	michelson_test_scripts/opcodes/pair_id.tz
{ parameter (pair bool bool) ;
  storage (option (pair bool bool)) ;
  code { CAR
         /* [ pair bool bool ] */ ;
         SOME
         /* [ option (pair bool bool) ] */ ;
         NIL operation
         /* [ list operation : option (pair bool bool) ] */ ;
         PAIR
         /* [ pair (list operation) (option (pair bool bool)) ] */ } }
Well typed (Gas remaining: 1039996.651 units remaining)	michelson_test_scripts/opcodes/pairing_check.tz
{ parameter (list (pair bls12_381_g1 bls12_381_g2)) ;
  storage (option bool) ;
  code { CAR
         /* [ list (pair bls12_381_g1 bls12_381_g2) ] */ ;
         PAIRING_CHECK
         /* [ bool ] */ ;
         SOME
         /* [ option bool ] */ ;
         NIL operation
         /* [ list operation : option bool ] */ ;
         PAIR
         /* [ pair (list operation) (option bool) ] */ } }
Well typed (Gas remaining: 1039994.102 units remaining)	michelson_test_scripts/opcodes/pexec.tz
{ parameter nat ;
  storage nat ;
  code { LAMBDA
           (pair nat nat)
           nat
           { UNPAIR /* [ nat : nat ] */ ; ADD /* [ nat ] */ }
         /* [ lambda (pair nat nat) nat : pair nat nat ] */ ;
         SWAP
         /* [ pair nat nat : lambda (pair nat nat) nat ] */ ;
         UNPAIR
         /* [ nat : nat : lambda (pair nat nat) nat ] */ ;
         DIP { APPLY /* [ lambda nat nat ] */ }
         /* [ nat : lambda nat nat ] */ ;
         EXEC
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039988.370 units remaining)	michelson_test_scripts/opcodes/pexec_2.tz
{ parameter int ;
  storage (list int) ;
  code { UNPAIR @p @s
         /* [ int : list int ] */ ;
         LAMBDA
           (pair int (pair int int))
           int
           { UNPAIR
             /* [ int : pair int int ] */ ;
             DIP { UNPAIR /* [ int : int ] */ }
             /* [ int : int : int ] */ ;
             ADD
             /* [ int : int ] */ ;
             MUL
             /* [ int ] */ }
         /* [ lambda (pair int int int) int : int : list int ] */ ;
         SWAP
         /* [ int : lambda (pair int int int) int : list int ] */ ;
         APPLY
         /* [ lambda (pair int int) int : list int ] */ ;
         PUSH int 3
         /* [ int : lambda (pair int int) int : list int ] */ ;
         APPLY
         /* [ lambda int int : list int ] */ ;
         SWAP
         /* [ list int : lambda int int ] */ ;
         MAP { DIP { DUP /* [ lambda int int : lambda int int ] */ }
               /* [ int : lambda int int : lambda int int ] */ ;
               EXEC
               /* [ int : lambda int int ] */ }
         /* [ list int : lambda int int ] */ ;
         DIP { DROP /* [] */ }
         /* [ list int ] */ ;
         NIL operation
         /* [ list operation : list int ] */ ;
         PAIR
         /* [ pair (list operation) (list int) ] */ } }
Well typed (Gas remaining: 1039995.390 units remaining)	michelson_test_scripts/opcodes/proxy.tz
{ parameter (contract unit) ;
  storage unit ;
  code { UNPAIR
         /* [ contract unit : unit ] */ ;
         AMOUNT
         /* [ mutez : contract unit : unit ] */ ;
         UNIT
         /* [ unit : mutez : contract unit : unit ] */ ;
         TRANSFER_TOKENS
         /* [ operation : unit ] */ ;
         DIP { NIL operation /* [ list operation : unit ] */ }
         /* [ operation : list operation : unit ] */ ;
         CONS
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039996.699 units remaining)	michelson_test_scripts/opcodes/ret_int.tz
{ parameter unit ;
  storage (option nat) ;
  code { DROP
         /* [] */ ;
         PUSH nat 300
         /* [ nat ] */ ;
         SOME
         /* [ option nat ] */ ;
         NIL operation
         /* [ list operation : option nat ] */ ;
         PAIR
         /* [ pair (list operation) (option nat) ] */ } }
Well typed (Gas remaining: 1039995.638 units remaining)	michelson_test_scripts/opcodes/reverse.tz
{ parameter (list string) ;
  storage (list string) ;
  code { CAR
         /* [ list string ] */ ;
         NIL string
         /* [ list string : list string ] */ ;
         SWAP
         /* [ list string : list string ] */ ;
         ITER { CONS /* [ list string ] */ }
         /* [ list string ] */ ;
         NIL operation
         /* [ list operation : list string ] */ ;
         PAIR
         /* [ pair (list operation) (list string) ] */ } }
Well typed (Gas remaining: 1039990.539 units remaining)	michelson_test_scripts/opcodes/reverse_loop.tz
{ parameter (list string) ;
  storage (list string) ;
  code { CAR
         /* [ list string ] */ ;
         NIL string
         /* [ list string : list string ] */ ;
         SWAP
         /* [ list string : list string ] */ ;
         PUSH bool True
         /* [ bool : list string : list string ] */ ;
         LOOP { IF_CONS
                  { SWAP
                    /* [ list string : string : list string ] */ ;
                    DIP { CONS /* [ list string ] */ }
                    /* [ list string : list string ] */ ;
                    PUSH bool True
                    /* [ bool : list string : list string ] */ }
                  { NIL string
                    /* [ list string : list string ] */ ;
                    PUSH bool False
                    /* [ bool : list string : list string ] */ } }
         /* [ list string : list string ] */ ;
         DROP
         /* [ list string ] */ ;
         NIL operation
         /* [ list operation : list string ] */ ;
         PAIR
         /* [ pair (list operation) (list string) ] */ } }
Well typed (Gas remaining: 1039997.505 units remaining)	michelson_test_scripts/opcodes/sapling_empty_state.tz
{ parameter unit ;
  storage (sapling_state 8) ;
  code { DROP
         /* [] */ ;
         SAPLING_EMPTY_STATE 8
         /* [ sapling_state 8 ] */ ;
         NIL operation
         /* [ list operation : sapling_state 8 ] */ ;
         PAIR
         /* [ pair (list operation) (sapling_state 8) ] */ } }
Well typed (Gas remaining: 1039997.054 units remaining)	michelson_test_scripts/opcodes/self.tz
{ parameter unit ;
  storage address ;
  code { DROP
         /* [] */ ;
         SELF
         /* [ contract unit ] */ ;
         ADDRESS
         /* [ address ] */ ;
         NIL operation
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039990.287 units remaining)	michelson_test_scripts/opcodes/self_address.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         LAMBDA
           unit
           address
           { DROP /* [] */ ; SELF_ADDRESS /* [ address ] */ }
         /* [ lambda unit address ] */ ;
         UNIT
         /* [ unit : lambda unit address ] */ ;
         EXEC
         /* [ address ] */ ;
         SELF
         /* [ contract unit : address ] */ ;
         ADDRESS
         /* [ address : address ] */ ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039986.649 units remaining)	michelson_test_scripts/opcodes/self_address_after_fib_view.tz
{ parameter address ;
  storage address ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 3
         /* [ nat : address : address ] */ ;
         VIEW "fib" nat
         /* [ option nat : address ] */ ;
         ASSERT_SOME ;
         DROP
         /* [ address ] */ ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 1500
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         SELF_ADDRESS
         /* [ address : operation ] */ ;
         SWAP
         /* [ operation : address ] */ ;
         NIL operation
         /* [ list operation : operation : address ] */ ;
         SWAP
         /* [ operation : list operation : address ] */ ;
         CONS
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039987.133 units remaining)	michelson_test_scripts/opcodes/self_address_after_nonexistent_view.tz
{ parameter address ;
  storage address ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 0
         /* [ nat : address : address ] */ ;
         VIEW "id" string
         /* [ option string : address ] */ ;
         ASSERT_NONE ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 1500
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         SELF_ADDRESS
         /* [ address : operation ] */ ;
         SWAP
         /* [ operation : address ] */ ;
         NIL operation
         /* [ list operation : operation : address ] */ ;
         SWAP
         /* [ operation : list operation : address ] */ ;
         CONS
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039986.472 units remaining)	michelson_test_scripts/opcodes/self_address_after_view.tz
{ parameter address ;
  storage address ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 0
         /* [ nat : address : address ] */ ;
         VIEW "id" (pair nat nat)
         /* [ option (pair nat nat) : address ] */ ;
         ASSERT_SOME ;
         DROP
         /* [ address ] */ ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 1500
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         SELF_ADDRESS
         /* [ address : operation ] */ ;
         SWAP
         /* [ operation : address ] */ ;
         NIL operation
         /* [ list operation : operation : address ] */ ;
         SWAP
         /* [ operation : list operation : address ] */ ;
         CONS
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039986.141 units remaining)	michelson_test_scripts/opcodes/self_after_fib_view.tz
{ parameter address ;
  storage address ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 3
         /* [ nat : address : address ] */ ;
         VIEW "fib" nat
         /* [ option nat : address ] */ ;
         ASSERT_SOME ;
         DROP
         /* [ address ] */ ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 1500
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         SELF
         /* [ contract address : operation ] */ ;
         ADDRESS
         /* [ address : operation ] */ ;
         SWAP
         /* [ operation : address ] */ ;
         NIL operation
         /* [ list operation : operation : address ] */ ;
         SWAP
         /* [ operation : list operation : address ] */ ;
         CONS
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039986.534 units remaining)	michelson_test_scripts/opcodes/self_after_nonexistent_view.tz
{ parameter address ;
  storage address ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 0
         /* [ nat : address : address ] */ ;
         VIEW "nonexistent" string
         /* [ option string : address ] */ ;
         ASSERT_NONE ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 1500
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         SELF
         /* [ contract address : operation ] */ ;
         ADDRESS
         /* [ address : operation ] */ ;
         SWAP
         /* [ operation : address ] */ ;
         NIL operation
         /* [ list operation : operation : address ] */ ;
         SWAP
         /* [ operation : list operation : address ] */ ;
         CONS
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039985.965 units remaining)	michelson_test_scripts/opcodes/self_after_view.tz
{ parameter address ;
  storage address ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 0
         /* [ nat : address : address ] */ ;
         VIEW "id" (pair nat nat)
         /* [ option (pair nat nat) : address ] */ ;
         ASSERT_SOME ;
         DROP
         /* [ address ] */ ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 1500
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         SELF
         /* [ contract address : operation ] */ ;
         ADDRESS
         /* [ address : operation ] */ ;
         SWAP
         /* [ operation : address ] */ ;
         NIL operation
         /* [ list operation : operation : address ] */ ;
         SWAP
         /* [ operation : list operation : address ] */ ;
         CONS
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039988.888 units remaining)	michelson_test_scripts/opcodes/self_with_default_entrypoint.tz
{ parameter (or (or (nat %A) (bool %B)) (or %maybe_C (unit %default) (string %C))) ;
  storage unit ;
  code { DROP
         /* [] */ ;
         SELF
         /* [ contract unit ] */ ;
         DROP
         /* [] */ ;
         SELF %A
         /* [ contract nat ] */ ;
         DROP
         /* [] */ ;
         SELF %default
         /* [ contract unit ] */ ;
         PACK
         /* [ bytes ] */ ;
         SELF
         /* [ contract unit : bytes ] */ ;
         PACK
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039971.670 units remaining)	michelson_test_scripts/opcodes/self_with_entrypoint.tz
{ parameter (or (or (nat %A) (bool %B)) (or %maybe_C (unit %Z) (string %C))) ;
  storage unit ;
  code { DROP
         /* [] */ ;
         SELF %A
         /* [ contract nat ] */ ;
         PACK @Apacked
         /* [ bytes ] */ ;
         SELF %default
         /* [ contract (or (or nat bool) (or unit string)) : bytes ] */ ;
         PACK @defpacked
         /* [ bytes : bytes ] */ ;
         DUP
         /* [ bytes : bytes : bytes ] */ ;
         DIP { SWAP /* [ bytes : bytes ] */ }
         /* [ bytes : bytes : bytes ] */ ;
         ASSERT_CMPNEQ ;
         SELF
         /* [ contract (or (or nat bool) (or unit string)) : bytes ] */ ;
         PACK @selfpacked
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         SELF %A
         /* [ contract nat ] */ ;
         CAST (contract nat)
         /* [ contract nat ] */ ;
         DROP
         /* [] */ ;
         SELF %B
         /* [ contract bool ] */ ;
         CAST (contract bool)
         /* [ contract bool ] */ ;
         DROP
         /* [] */ ;
         SELF %maybe_C
         /* [ contract (or unit string) ] */ ;
         CAST (contract (or unit string))
         /* [ contract (or unit string) ] */ ;
         DROP
         /* [] */ ;
         SELF %Z
         /* [ contract unit ] */ ;
         CAST (contract unit)
         /* [ contract unit ] */ ;
         DROP
         /* [] */ ;
         SELF
         /* [ contract (or (or nat bool) (or unit string)) ] */ ;
         CAST (contract (or (or (nat %A) (bool %B)) (or %maybe_C (unit %Z) (string %C))))
         /* [ contract (or (or nat bool) (or unit string)) ] */ ;
         DROP
         /* [] */ ;
         SELF %default
         /* [ contract (or (or nat bool) (or unit string)) ] */ ;
         CAST (contract (or (or (nat %A) (bool %B)) (or %maybe_C (unit %Z) (string %C))))
         /* [ contract (or (or nat bool) (or unit string)) ] */ ;
         DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039997.552 units remaining)	michelson_test_scripts/opcodes/sender.tz
{ parameter unit ;
  storage address ;
  code { DROP
         /* [] */ ;
         SENDER
         /* [ address ] */ ;
         NIL operation
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039986.649 units remaining)	michelson_test_scripts/opcodes/sender_after_fib_view.tz
{ parameter address ;
  storage address ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 3
         /* [ nat : address : address ] */ ;
         VIEW "fib" nat
         /* [ option nat : address ] */ ;
         ASSERT_SOME ;
         DROP
         /* [ address ] */ ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 1500
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         SENDER
         /* [ address : operation ] */ ;
         SWAP
         /* [ operation : address ] */ ;
         NIL operation
         /* [ list operation : operation : address ] */ ;
         SWAP
         /* [ operation : list operation : address ] */ ;
         CONS
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039987.133 units remaining)	michelson_test_scripts/opcodes/sender_after_nonexistent_view.tz
{ parameter address ;
  storage address ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 0
         /* [ nat : address : address ] */ ;
         VIEW "id" string
         /* [ option string : address ] */ ;
         ASSERT_NONE ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 1500
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         SENDER
         /* [ address : operation ] */ ;
         SWAP
         /* [ operation : address ] */ ;
         NIL operation
         /* [ list operation : operation : address ] */ ;
         SWAP
         /* [ operation : list operation : address ] */ ;
         CONS
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039986.472 units remaining)	michelson_test_scripts/opcodes/sender_after_view.tz
{ parameter address ;
  storage address ;
  code { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         PUSH nat 0
         /* [ nat : address : address ] */ ;
         VIEW "id" (pair nat nat)
         /* [ option (pair nat nat) : address ] */ ;
         ASSERT_SOME ;
         DROP
         /* [ address ] */ ;
         CONTRACT nat
         /* [ option (contract nat) ] */ ;
         ASSERT_SOME ;
         PUSH mutez 1500
         /* [ mutez : contract nat ] */ ;
         PUSH nat 0
         /* [ nat : mutez : contract nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         SENDER
         /* [ address : operation ] */ ;
         SWAP
         /* [ operation : address ] */ ;
         NIL operation
         /* [ list operation : operation : address ] */ ;
         SWAP
         /* [ operation : list operation : address ] */ ;
         CONS
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039992.449 units remaining)	michelson_test_scripts/opcodes/set_car.tz
{ parameter string ;
  storage (pair (string %s) (nat %n)) ;
  code { DUP
         /* [ pair string string nat : pair string string nat ] */ ;
         CDR
         /* [ pair string nat : pair string string nat ] */ ;
         DIP { CAR /* [ string ] */ }
         /* [ pair string nat : string ] */ ;
         SET_CAR %s ;
         NIL operation
         /* [ list operation : pair string nat ] */ ;
         PAIR
         /* [ pair (list operation) string nat ] */ } }
Well typed (Gas remaining: 1039992.918 units remaining)	michelson_test_scripts/opcodes/set_cdr.tz
{ parameter nat ;
  storage (pair (string %s) (nat %n)) ;
  code { DUP
         /* [ pair nat string nat : pair nat string nat ] */ ;
         CDR
         /* [ pair string nat : pair nat string nat ] */ ;
         DIP { CAR /* [ nat ] */ }
         /* [ pair string nat : nat ] */ ;
         SET_CDR %n ;
         NIL operation
         /* [ list operation : pair string nat ] */ ;
         PAIR
         /* [ pair (list operation) string nat ] */ } }
Well typed (Gas remaining: 1039996.384 units remaining)	michelson_test_scripts/opcodes/set_delegate.tz
{ parameter (option key_hash) ;
  storage unit ;
  code { UNPAIR
         /* [ option key_hash : unit ] */ ;
         SET_DELEGATE
         /* [ operation : unit ] */ ;
         DIP { NIL operation /* [ list operation : unit ] */ }
         /* [ operation : list operation : unit ] */ ;
         CONS
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039997.827 units remaining)	michelson_test_scripts/opcodes/set_id.tz
{ parameter (set string) ;
  storage (set string) ;
  code { CAR
         /* [ set string ] */ ;
         NIL operation
         /* [ list operation : set string ] */ ;
         PAIR
         /* [ pair (list operation) (set string) ] */ } }
Well typed (Gas remaining: 1039995.699 units remaining)	michelson_test_scripts/opcodes/set_iter.tz
{ parameter (set int) ;
  storage int ;
  code { CAR
         /* [ set int ] */ ;
         PUSH int 0
         /* [ int : set int ] */ ;
         SWAP
         /* [ set int : int ] */ ;
         ITER { ADD /* [ int ] */ }
         /* [ int ] */ ;
         NIL operation
         /* [ list operation : int ] */ ;
         PAIR
         /* [ pair (list operation) int ] */ } }
Well typed (Gas remaining: 1039989.942 units remaining)	michelson_test_scripts/opcodes/set_member.tz
{ parameter string ;
  storage (pair (set string) (option bool)) ;
  code { DUP
         /* [ pair string (set string) (option bool)
            : pair string (set string) (option bool) ] */ ;
         DUP
         /* [ pair string (set string) (option bool)
            : pair string (set string) (option bool)
            : pair string (set string) (option bool) ] */ ;
         CAR
         /* [ string : pair string (set string) (option bool)
            : pair string (set string) (option bool) ] */ ;
         DIP { CDAR }
         /* [ string : set string : pair string (set string) (option bool) ] */ ;
         MEM
         /* [ bool : pair string (set string) (option bool) ] */ ;
         SOME
         /* [ option bool : pair string (set string) (option bool) ] */ ;
         DIP { CDAR }
         /* [ option bool : set string ] */ ;
         SWAP
         /* [ set string : option bool ] */ ;
         PAIR
         /* [ pair (set string) (option bool) ] */ ;
         NIL operation
         /* [ list operation : pair (set string) (option bool) ] */ ;
         PAIR
         /* [ pair (list operation) (set string) (option bool) ] */ } }
Well typed (Gas remaining: 1039997.469 units remaining)	michelson_test_scripts/opcodes/set_size.tz
{ parameter (set int) ;
  storage nat ;
  code { CAR
         /* [ set int ] */ ;
         SIZE
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039956.190 units remaining)	michelson_test_scripts/opcodes/sets.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH (set nat) { 0 ; 1 ; 3 }
         /* [ set nat ] */ ;
         DROP
         /* [] */ ;
         PUSH (set int) { -1 ; 0 ; 3 }
         /* [ set int ] */ ;
         DROP
         /* [] */ ;
         PUSH (set mutez) { 1 ; 4 ; 5 ; 10 ; 1923 }
         /* [ set mutez ] */ ;
         DROP
         /* [] */ ;
         PUSH (set timestamp)
              { -1 ; 0 ; "2017-09-16T08:38:04Z" ; "2019-09-16T08:38:05Z" }
         /* [ set timestamp ] */ ;
         DROP
         /* [] */ ;
         PUSH (set bool) {}
         /* [ set bool ] */ ;
         DROP
         /* [] */ ;
         PUSH (set bool) { True }
         /* [ set bool ] */ ;
         DROP
         /* [] */ ;
         PUSH (set bool) { False }
         /* [ set bool ] */ ;
         DROP
         /* [] */ ;
         PUSH (set bool) { False ; True }
         /* [ set bool ] */ ;
         DROP
         /* [] */ ;
         PUSH (set string) { "" ; "A" ; "B" ; "a" ; "aa" ; "b" }
         /* [ set string ] */ ;
         DROP
         /* [] */ ;
         PUSH (set bytes) { 0x ; 0x01 ; 0x02 ; 0xaabbcc }
         /* [ set bytes ] */ ;
         DROP
         /* [] */ ;
         PUSH (set key_hash)
              { "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" ;
                "tz1ddb9NMYHZi5UzPdzTZMYQQZoMub195zgv" }
         /* [ set key_hash ] */ ;
         DROP
         /* [] */ ;
         PUSH (set address)
              { "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" ;
                "tz1ddb9NMYHZi5UzPdzTZMYQQZoMub195zgv" ;
                "KT1TZCh8fmUbuDqFxetPWC2fsQanAHzLx4W9" }
         /* [ set address ] */ ;
         DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039996.983 units remaining)	michelson_test_scripts/opcodes/sha3.tz
{ storage (option bytes) ;
  parameter bytes ;
  code { CAR
         /* [ bytes ] */ ;
         SHA3
         /* [ bytes ] */ ;
         SOME
         /* [ option bytes ] */ ;
         NIL operation
         /* [ list operation : option bytes ] */ ;
         PAIR
         /* [ pair (list operation) (option bytes) ] */ } }
Well typed (Gas remaining: 1039994.397 units remaining)	michelson_test_scripts/opcodes/shifts.tz
{ parameter (or (pair nat nat) (pair nat nat)) ;
  storage (option nat) ;
  code { CAR
         /* [ or (pair nat nat) (pair nat nat) ] */ ;
         IF_LEFT
           { UNPAIR /* [ nat : nat ] */ ; LSL /* [ nat ] */ }
           { UNPAIR /* [ nat : nat ] */ ; LSR /* [ nat ] */ } ;
         SOME
         /* [ option nat ] */ ;
         NIL operation
         /* [ list operation : option nat ] */ ;
         PAIR
         /* [ pair (list operation) (option nat) ] */ } }
Well typed (Gas remaining: 1039993.924 units remaining)	michelson_test_scripts/opcodes/slice.tz
{ parameter (pair nat nat) ;
  storage (option string) ;
  code { UNPAIR
         /* [ pair nat nat : option string ] */ ;
         SWAP
         /* [ option string : pair nat nat ] */ ;
         IF_SOME
           { SWAP
             /* [ pair nat nat : string ] */ ;
             UNPAIR
             /* [ nat : nat : string ] */ ;
             SLICE
             /* [ option string ] */ }
           { DROP /* [] */ ; NONE string /* [ option string ] */ } ;
         NIL operation
         /* [ list operation : option string ] */ ;
         PAIR
         /* [ pair (list operation) (option string) ] */ } }
Well typed (Gas remaining: 1039993.924 units remaining)	michelson_test_scripts/opcodes/slice_bytes.tz
{ parameter (pair nat nat) ;
  storage (option bytes) ;
  code { UNPAIR
         /* [ pair nat nat : option bytes ] */ ;
         SWAP
         /* [ option bytes : pair nat nat ] */ ;
         IF_SOME
           { SWAP
             /* [ pair nat nat : bytes ] */ ;
             UNPAIR
             /* [ nat : nat : bytes ] */ ;
             SLICE
             /* [ option bytes ] */ }
           { DROP /* [] */ ; NONE bytes /* [ option bytes ] */ } ;
         NIL operation
         /* [ list operation : option bytes ] */ ;
         PAIR
         /* [ pair (list operation) (option bytes) ] */ } }
Well typed (Gas remaining: 1039936.992 units remaining)	michelson_test_scripts/opcodes/slices.tz
{ parameter (pair bytes signature) ;
  storage key ;
  code { DUP
         /* [ pair (pair bytes signature) key : pair (pair bytes signature) key ] */ ;
         CAAR ;
         DUP
         /* [ bytes : bytes : pair (pair bytes signature) key ] */ ;
         SIZE
         /* [ nat : bytes : pair (pair bytes signature) key ] */ ;
         PUSH nat 128
         /* [ nat : nat : bytes : pair (pair bytes signature) key ] */ ;
         SWAP
         /* [ nat : nat : bytes : pair (pair bytes signature) key ] */ ;
         SUB
         /* [ int : bytes : pair (pair bytes signature) key ] */ ;
         ISNAT
         /* [ option nat : bytes : pair (pair bytes signature) key ] */ ;
         IF_SOME { /* [ nat : bytes : pair (pair bytes signature) key ] */ } { FAIL } ;
         PUSH nat 128
         /* [ nat : nat : bytes : pair (pair bytes signature) key ] */ ;
         SLICE @payload
         /* [ option bytes : pair (pair bytes signature) key ] */ ;
         ASSERT_SOME ;
         DUP
         /* [ bytes : bytes : pair (pair bytes signature) key ] */ ;
         DIP { DIP { DUP
                     /* [ pair (pair bytes signature) key : pair (pair bytes signature) key ] */ ;
                     CAAR ;
                     PUSH nat 32
                     /* [ nat : bytes : pair (pair bytes signature) key ] */ ;
                     PUSH nat 0
                     /* [ nat : nat : bytes : pair (pair bytes signature) key ] */ ;
                     SLICE
                     /* [ option bytes : pair (pair bytes signature) key ] */ ;
                     ASSERT_SOME }
               /* [ bytes : bytes : pair (pair bytes signature) key ] */ ;
               SHA256
               /* [ bytes : bytes : pair (pair bytes signature) key ] */ ;
               ASSERT_CMPEQ }
         /* [ bytes : pair (pair bytes signature) key ] */ ;
         DUP
         /* [ bytes : bytes : pair (pair bytes signature) key ] */ ;
         DIP { DIP { DUP
                     /* [ pair (pair bytes signature) key : pair (pair bytes signature) key ] */ ;
                     CAAR ;
                     PUSH nat 32
                     /* [ nat : bytes : pair (pair bytes signature) key ] */ ;
                     PUSH nat 32
                     /* [ nat : nat : bytes : pair (pair bytes signature) key ] */ ;
                     SLICE
                     /* [ option bytes : pair (pair bytes signature) key ] */ ;
                     ASSERT_SOME }
               /* [ bytes : bytes : pair (pair bytes signature) key ] */ ;
               BLAKE2B
               /* [ bytes : bytes : pair (pair bytes signature) key ] */ ;
               ASSERT_CMPEQ }
         /* [ bytes : pair (pair bytes signature) key ] */ ;
         DUP
         /* [ bytes : bytes : pair (pair bytes signature) key ] */ ;
         DIP { DIP { DUP
                     /* [ pair (pair bytes signature) key : pair (pair bytes signature) key ] */ ;
                     CAAR ;
                     PUSH nat 64
                     /* [ nat : bytes : pair (pair bytes signature) key ] */ ;
                     PUSH nat 64
                     /* [ nat : nat : bytes : pair (pair bytes signature) key ] */ ;
                     SLICE
                     /* [ option bytes : pair (pair bytes signature) key ] */ ;
                     ASSERT_SOME }
               /* [ bytes : bytes : pair (pair bytes signature) key ] */ ;
               SHA512
               /* [ bytes : bytes : pair (pair bytes signature) key ] */ ;
               ASSERT_CMPEQ }
         /* [ bytes : pair (pair bytes signature) key ] */ ;
         DIP { DUP
               /* [ pair (pair bytes signature) key : pair (pair bytes signature) key ] */ ;
               CDR
               /* [ key : pair (pair bytes signature) key ] */ ;
               DIP { DUP
                     /* [ pair (pair bytes signature) key : pair (pair bytes signature) key ] */ ;
                     CADR }
               /* [ key : signature : pair (pair bytes signature) key ] */ }
         /* [ bytes : key : signature : pair (pair bytes signature) key ] */ ;
         SWAP
         /* [ key : bytes : signature : pair (pair bytes signature) key ] */ ;
         DIP { SWAP /* [ signature : bytes : pair (pair bytes signature) key ] */ }
         /* [ key : signature : bytes : pair (pair bytes signature) key ] */ ;
         CHECK_SIGNATURE
         /* [ bool : pair (pair bytes signature) key ] */ ;
         ASSERT ;
         CDR
         /* [ key ] */ ;
         DUP
         /* [ key : key ] */ ;
         HASH_KEY
         /* [ key_hash : key ] */ ;
         IMPLICIT_ACCOUNT
         /* [ contract unit : key ] */ ;
         BALANCE
         /* [ mutez : contract unit : key ] */ ;
         UNIT
         /* [ unit : mutez : contract unit : key ] */ ;
         TRANSFER_TOKENS
         /* [ operation : key ] */ ;
         NIL operation
         /* [ list operation : operation : key ] */ ;
         SWAP
         /* [ operation : list operation : key ] */ ;
         CONS
         /* [ list operation : key ] */ ;
         PAIR
         /* [ pair (list operation) key ] */ } }
Well typed (Gas remaining: 1039997.552 units remaining)	michelson_test_scripts/opcodes/source.tz
{ parameter unit ;
  storage address ;
  code { DROP
         /* [] */ ;
         SOURCE
         /* [ address ] */ ;
         NIL operation
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039973.560 units remaining)	michelson_test_scripts/opcodes/split_bytes.tz
{ parameter bytes ;
  storage (list bytes) ;
  code { UNPAIR
         /* [ bytes : list bytes ] */ ;
         DIP { NIL bytes
               /* [ list bytes : list bytes ] */ ;
               SWAP
               /* [ list bytes : list bytes ] */ ;
               ITER { CONS /* [ list bytes ] */ }
               /* [ list bytes ] */ }
         /* [ bytes : list bytes ] */ ;
         DUP
         /* [ bytes : bytes : list bytes ] */ ;
         SIZE
         /* [ nat : bytes : list bytes ] */ ;
         PUSH nat 0
         /* [ nat : nat : bytes : list bytes ] */ ;
         CMPNEQ ;
         DIP { PUSH @index nat 0 /* [ nat : bytes : list bytes ] */ }
         /* [ bool : nat : bytes : list bytes ] */ ;
         LOOP { PAIR
                /* [ pair nat bytes : list bytes ] */ ;
                DUP
                /* [ pair nat bytes : pair nat bytes : list bytes ] */ ;
                DIP { UNPAIR
                      /* [ nat : bytes : list bytes ] */ ;
                      DIP { PUSH nat 1 /* [ nat : bytes : list bytes ] */ }
                      /* [ nat : nat : bytes : list bytes ] */ ;
                      SLICE
                      /* [ option bytes : list bytes ] */ ;
                      ASSERT_SOME ;
                      CONS @storage
                      /* [ list bytes ] */ }
                /* [ pair nat bytes : list bytes ] */ ;
                UNPAIR
                /* [ nat : bytes : list bytes ] */ ;
                PUSH nat 1
                /* [ nat : nat : bytes : list bytes ] */ ;
                ADD @index
                /* [ nat : bytes : list bytes ] */ ;
                DUP
                /* [ nat : nat : bytes : list bytes ] */ ;
                DIP { DIP { DUP /* [ bytes : bytes : list bytes ] */ }
                      /* [ nat : bytes : bytes : list bytes ] */ ;
                      SWAP
                      /* [ bytes : nat : bytes : list bytes ] */ ;
                      SIZE
                      /* [ nat : nat : bytes : list bytes ] */ ;
                      CMPNEQ }
                /* [ nat : bool : bytes : list bytes ] */ ;
                SWAP
                /* [ bool : nat : bytes : list bytes ] */ }
         /* [ nat : bytes : list bytes ] */ ;
         DROP
         /* [ bytes : list bytes ] */ ;
         DROP
         /* [ list bytes ] */ ;
         NIL bytes
         /* [ list bytes : list bytes ] */ ;
         SWAP
         /* [ list bytes : list bytes ] */ ;
         ITER { CONS /* [ list bytes ] */ }
         /* [ list bytes ] */ ;
         NIL operation
         /* [ list operation : list bytes ] */ ;
         PAIR
         /* [ pair (list operation) (list bytes) ] */ } }
Well typed (Gas remaining: 1039973.560 units remaining)	michelson_test_scripts/opcodes/split_string.tz
{ parameter string ;
  storage (list string) ;
  code { UNPAIR
         /* [ string : list string ] */ ;
         DIP { NIL string
               /* [ list string : list string ] */ ;
               SWAP
               /* [ list string : list string ] */ ;
               ITER { CONS /* [ list string ] */ }
               /* [ list string ] */ }
         /* [ string : list string ] */ ;
         DUP
         /* [ string : string : list string ] */ ;
         SIZE
         /* [ nat : string : list string ] */ ;
         PUSH nat 0
         /* [ nat : nat : string : list string ] */ ;
         CMPNEQ ;
         DIP { PUSH @index nat 0 /* [ nat : string : list string ] */ }
         /* [ bool : nat : string : list string ] */ ;
         LOOP { PAIR
                /* [ pair nat string : list string ] */ ;
                DUP
                /* [ pair nat string : pair nat string : list string ] */ ;
                DIP { UNPAIR
                      /* [ nat : string : list string ] */ ;
                      DIP { PUSH nat 1 /* [ nat : string : list string ] */ }
                      /* [ nat : nat : string : list string ] */ ;
                      SLICE
                      /* [ option string : list string ] */ ;
                      ASSERT_SOME ;
                      CONS @storage
                      /* [ list string ] */ }
                /* [ pair nat string : list string ] */ ;
                UNPAIR
                /* [ nat : string : list string ] */ ;
                PUSH nat 1
                /* [ nat : nat : string : list string ] */ ;
                ADD @index
                /* [ nat : string : list string ] */ ;
                DUP
                /* [ nat : nat : string : list string ] */ ;
                DIP { DIP { DUP /* [ string : string : list string ] */ }
                      /* [ nat : string : string : list string ] */ ;
                      SWAP
                      /* [ string : nat : string : list string ] */ ;
                      SIZE
                      /* [ nat : nat : string : list string ] */ ;
                      CMPNEQ }
                /* [ nat : bool : string : list string ] */ ;
                SWAP
                /* [ bool : nat : string : list string ] */ }
         /* [ nat : string : list string ] */ ;
         DROP
         /* [ string : list string ] */ ;
         DROP
         /* [ list string ] */ ;
         NIL string
         /* [ list string : list string ] */ ;
         SWAP
         /* [ list string : list string ] */ ;
         ITER { CONS /* [ list string ] */ }
         /* [ list string ] */ ;
         NIL operation
         /* [ list operation : list string ] */ ;
         PAIR
         /* [ pair (list operation) (list string) ] */ } }
Well typed (Gas remaining: 1039997.447 units remaining)	michelson_test_scripts/opcodes/store_bls12_381_fr.tz
{ parameter bls12_381_fr ;
  storage (option bls12_381_fr) ;
  code { CAR
         /* [ bls12_381_fr ] */ ;
         SOME
         /* [ option bls12_381_fr ] */ ;
         NIL operation
         /* [ list operation : option bls12_381_fr ] */ ;
         PAIR
         /* [ pair (list operation) (option bls12_381_fr) ] */ } }
Well typed (Gas remaining: 1039997.447 units remaining)	michelson_test_scripts/opcodes/store_bls12_381_g1.tz
{ parameter bls12_381_g1 ;
  storage (option bls12_381_g1) ;
  code { CAR
         /* [ bls12_381_g1 ] */ ;
         SOME
         /* [ option bls12_381_g1 ] */ ;
         NIL operation
         /* [ list operation : option bls12_381_g1 ] */ ;
         PAIR
         /* [ pair (list operation) (option bls12_381_g1) ] */ } }
Well typed (Gas remaining: 1039997.447 units remaining)	michelson_test_scripts/opcodes/store_bls12_381_g2.tz
{ parameter bls12_381_g2 ;
  storage (option bls12_381_g2) ;
  code { CAR
         /* [ bls12_381_g2 ] */ ;
         SOME
         /* [ option bls12_381_g2 ] */ ;
         NIL operation
         /* [ list operation : option bls12_381_g2 ] */ ;
         PAIR
         /* [ pair (list operation) (option bls12_381_g2) ] */ } }
Well typed (Gas remaining: 1039998.017 units remaining)	michelson_test_scripts/opcodes/store_input.tz
{ parameter string ;
  storage string ;
  code { CAR
         /* [ string ] */ ;
         NIL operation
         /* [ list operation : string ] */ ;
         PAIR
         /* [ pair (list operation) string ] */ } }
Well typed (Gas remaining: 1039997.552 units remaining)	michelson_test_scripts/opcodes/store_now.tz
{ parameter unit ;
  storage timestamp ;
  code { DROP
         /* [] */ ;
         NOW
         /* [ timestamp ] */ ;
         NIL operation
         /* [ list operation : timestamp ] */ ;
         PAIR
         /* [ pair (list operation) timestamp ] */ } }
Well typed (Gas remaining: 1039997.447 units remaining)	michelson_test_scripts/opcodes/str_id.tz
{ parameter string ;
  storage (option string) ;
  code { CAR
         /* [ string ] */ ;
         SOME
         /* [ option string ] */ ;
         NIL operation
         /* [ list operation : option string ] */ ;
         PAIR
         /* [ pair (list operation) (option string) ] */ } }
Well typed (Gas remaining: 1039995.116 units remaining)	michelson_test_scripts/opcodes/sub_timestamp_delta.tz
{ parameter (pair timestamp int) ;
  storage timestamp ;
  code { CAR
         /* [ pair timestamp int ] */ ;
         DUP
         /* [ pair timestamp int : pair timestamp int ] */ ;
         CAR
         /* [ timestamp : pair timestamp int ] */ ;
         DIP { CDR /* [ int ] */ }
         /* [ timestamp : int ] */ ;
         SUB
         /* [ timestamp ] */ ;
         NIL operation
         /* [ list operation : timestamp ] */ ;
         PAIR
         /* [ pair (list operation) timestamp ] */ } }
Well typed (Gas remaining: 1039986.601 units remaining)	michelson_test_scripts/opcodes/subset.tz
{ parameter (pair (set string) (set string)) ;
  storage bool ;
  code { CAR
         /* [ pair (set string) (set string) ] */ ;
         DUP
         /* [ pair (set string) (set string) : pair (set string) (set string) ] */ ;
         CDR
         /* [ set string : pair (set string) (set string) ] */ ;
         DIP { CAR /* [ set string ] */ }
         /* [ set string : set string ] */ ;
         PUSH bool True
         /* [ bool : set string : set string ] */ ;
         PAIR
         /* [ pair bool (set string) : set string ] */ ;
         SWAP
         /* [ set string : pair bool (set string) ] */ ;
         ITER { DIP { DUP
                      /* [ pair bool (set string) : pair bool (set string) ] */ ;
                      DUP
                      /* [ pair bool (set string) : pair bool (set string) : pair bool (set string) ] */ ;
                      CDR
                      /* [ set string : pair bool (set string) : pair bool (set string) ] */ ;
                      DIP { CAR
                            /* [ bool : pair bool (set string) ] */ ;
                            DIP { CDR /* [ set string ] */ }
                            /* [ bool : set string ] */ }
                      /* [ set string : bool : set string ] */ }
                /* [ string : set string : bool : set string ] */ ;
                MEM
                /* [ bool : bool : set string ] */ ;
                AND
                /* [ bool : set string ] */ ;
                PAIR
                /* [ pair bool (set string) ] */ }
         /* [ pair bool (set string) ] */ ;
         CAR
         /* [ bool ] */ ;
         NIL operation
         /* [ list operation : bool ] */ ;
         PAIR
         /* [ pair (list operation) bool ] */ } }
Well typed (Gas remaining: 1039987.541 units remaining)	michelson_test_scripts/opcodes/tez_add_sub.tz
{ parameter (pair mutez mutez) ;
  storage (option (pair mutez mutez)) ;
  code { CAR
         /* [ pair mutez mutez ] */ ;
         DUP
         /* [ pair mutez mutez : pair mutez mutez ] */ ;
         DUP
         /* [ pair mutez mutez : pair mutez mutez : pair mutez mutez ] */ ;
         CAR
         /* [ mutez : pair mutez mutez : pair mutez mutez ] */ ;
         DIP { CDR /* [ mutez : pair mutez mutez ] */ }
         /* [ mutez : mutez : pair mutez mutez ] */ ;
         ADD
         /* [ mutez : pair mutez mutez ] */ ;
         DIP { DUP
               /* [ pair mutez mutez : pair mutez mutez ] */ ;
               CAR
               /* [ mutez : pair mutez mutez ] */ ;
               DIP { CDR /* [ mutez ] */ }
               /* [ mutez : mutez ] */ ;
               SUB_MUTEZ
               /* [ option mutez ] */ ;
               ASSERT_SOME }
         /* [ mutez : mutez ] */ ;
         PAIR
         /* [ pair mutez mutez ] */ ;
         SOME
         /* [ option (pair mutez mutez) ] */ ;
         NIL operation
         /* [ list operation : option (pair mutez mutez) ] */ ;
         PAIR
         /* [ pair (list operation) (option (pair mutez mutez)) ] */ } }
Well typed (Gas remaining: 1039997.910 units remaining)	michelson_test_scripts/opcodes/ticket_bad.tz
{ parameter unit ;
  storage (ticket nat) ;
  code { CDR
         /* [ ticket nat ] */ ;
         NIL operation
         /* [ list operation : ticket nat ] */ ;
         PAIR
         /* [ pair (list operation) (ticket nat) ] */ } }
Well typed (Gas remaining: 1039992.229 units remaining)	michelson_test_scripts/opcodes/ticket_big_store.tz
{ parameter nat ;
  storage (big_map unit (ticket nat)) ;
  code { UNPAIR
         /* [ nat : big_map unit (ticket nat) ] */ ;
         PUSH nat 1
         /* [ nat : nat : big_map unit (ticket nat) ] */ ;
         SWAP
         /* [ nat : nat : big_map unit (ticket nat) ] */ ;
         TICKET
         /* [ option (ticket nat) : big_map unit (ticket nat) ] */ ;
         ASSERT_SOME ;
         SOME
         /* [ option (ticket nat) : big_map unit (ticket nat) ] */ ;
         UNIT
         /* [ unit : option (ticket nat) : big_map unit (ticket nat) ] */ ;
         UPDATE
         /* [ big_map unit (ticket nat) ] */ ;
         NIL operation
         /* [ list operation : big_map unit (ticket nat) ] */ ;
         PAIR
         /* [ pair (list operation) (big_map unit (ticket nat)) ] */ } }
Well typed (Gas remaining: 1039992.719 units remaining)	michelson_test_scripts/opcodes/ticket_join.tz
{ parameter (ticket nat) ;
  storage (option (ticket nat)) ;
  code { UNPAIR
         /* [ ticket nat : option (ticket nat) ] */ ;
         SWAP
         /* [ option (ticket nat) : ticket nat ] */ ;
         IF_NONE
           { /* [ ticket nat ] */ }
           { PAIR
             /* [ pair (ticket nat) (ticket nat) ] */ ;
             JOIN_TICKETS
             /* [ option (ticket nat) ] */ ;
             ASSERT_SOME } ;
         SOME
         /* [ option (ticket nat) ] */ ;
         NIL operation
         /* [ list operation : option (ticket nat) ] */ ;
         PAIR
         /* [ pair (list operation) (option (ticket nat)) ] */ } }
Well typed (Gas remaining: 1039985.428 units remaining)	michelson_test_scripts/opcodes/ticket_read.tz
{ parameter (ticket nat) ;
  storage address ;
  code { CAR
         /* [ ticket nat ] */ ;
         READ_TICKET
         /* [ pair address nat nat : ticket nat ] */ ;
         DIP { DROP /* [] */ }
         /* [ pair address nat nat ] */ ;
         UNPAIR
         /* [ address : pair nat nat ] */ ;
         DIP { UNPAIR /* [ nat : nat ] */ }
         /* [ address : nat : nat ] */ ;
         DIP 2 { PUSH nat 1 /* [ nat : nat ] */ ; ASSERT_CMPEQ }
         /* [ address : nat ] */ ;
         DIP { PUSH nat 42 /* [ nat : nat ] */ ; ASSERT_CMPEQ }
         /* [ address ] */ ;
         NIL operation
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039979.615 units remaining)	michelson_test_scripts/opcodes/ticket_split.tz
{ parameter (ticket nat) ;
  storage unit ;
  code { CAR
         /* [ ticket nat ] */ ;
         PUSH (pair nat nat) (Pair 1 2)
         /* [ pair nat nat : ticket nat ] */ ;
         SWAP
         /* [ ticket nat : pair nat nat ] */ ;
         SPLIT_TICKET
         /* [ option (pair (ticket nat) (ticket nat)) ] */ ;
         ASSERT_SOME ;
         UNPAIR
         /* [ ticket nat : ticket nat ] */ ;
         READ_TICKET
         /* [ pair address nat nat : ticket nat : ticket nat ] */ ;
         CDDR ;
         PUSH nat 1
         /* [ nat : nat : ticket nat : ticket nat ] */ ;
         ASSERT_CMPEQ ;
         DROP
         /* [ ticket nat ] */ ;
         READ_TICKET
         /* [ pair address nat nat : ticket nat ] */ ;
         CDDR ;
         PUSH nat 2
         /* [ nat : nat : ticket nat ] */ ;
         ASSERT_CMPEQ ;
         DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039997.186 units remaining)	michelson_test_scripts/opcodes/ticket_store.tz
{ parameter (ticket nat) ;
  storage (option (ticket nat)) ;
  code { CAR
         /* [ ticket nat ] */ ;
         SOME
         /* [ option (ticket nat) ] */ ;
         NIL operation
         /* [ list operation : option (ticket nat) ] */ ;
         PAIR
         /* [ pair (list operation) (option (ticket nat)) ] */ } }
Well typed (Gas remaining: 1039997.566 units remaining)	michelson_test_scripts/opcodes/ticket_store-2.tz
{ parameter (option (ticket nat)) ;
  storage (option (ticket nat)) ;
  code { CAR
         /* [ option (ticket nat) ] */ ;
         NIL operation
         /* [ list operation : option (ticket nat) ] */ ;
         PAIR
         /* [ pair (list operation) (option (ticket nat)) ] */ } }
Well typed (Gas remaining: 1039986.866 units remaining)	michelson_test_scripts/opcodes/ticketer.tz
{ parameter address ;
  storage nat ;
  code { UNPAIR
         /* [ address : nat ] */ ;
         DIP { DUP /* [ nat : nat ] */ }
         /* [ address : nat : nat ] */ ;
         SWAP
         /* [ nat : address : nat ] */ ;
         PUSH nat 1
         /* [ nat : nat : address : nat ] */ ;
         SWAP
         /* [ nat : nat : address : nat ] */ ;
         TICKET
         /* [ option (ticket nat) : address : nat ] */ ;
         ASSERT_SOME ;
         DIP { CONTRACT (ticket nat)
               /* [ option (contract (ticket nat)) : nat ] */ ;
               ASSERT_SOME ;
               PUSH mutez 0
               /* [ mutez : contract (ticket nat) : nat ] */ }
         /* [ ticket nat : mutez : contract (ticket nat) : nat ] */ ;
         TRANSFER_TOKENS
         /* [ operation : nat ] */ ;
         NIL operation
         /* [ list operation : operation : nat ] */ ;
         SWAP
         /* [ operation : list operation : nat ] */ ;
         CONS
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039986.345 units remaining)	michelson_test_scripts/opcodes/ticketer-2.tz
{ parameter (pair (pair address nat) nat) ;
  storage unit ;
  code { CAR
         /* [ pair (pair address nat) nat ] */ ;
         UNPAIR
         /* [ pair address nat : nat ] */ ;
         UNPAIR
         /* [ address : nat : nat ] */ ;
         CONTRACT (ticket nat)
         /* [ option (contract (ticket nat)) : nat : nat ] */ ;
         ASSERT_SOME ;
         DIP { TICKET /* [ option (ticket nat) ] */ ; ASSERT_SOME }
         /* [ contract (ticket nat) : ticket nat ] */ ;
         SWAP
         /* [ ticket nat : contract (ticket nat) ] */ ;
         DIP { PUSH mutez 0 /* [ mutez : contract (ticket nat) ] */ }
         /* [ ticket nat : mutez : contract (ticket nat) ] */ ;
         TRANSFER_TOKENS
         /* [ operation ] */ ;
         NIL operation
         /* [ list operation : operation ] */ ;
         SWAP
         /* [ operation : list operation ] */ ;
         CONS
         /* [ list operation ] */ ;
         UNIT
         /* [ unit : list operation ] */ ;
         SWAP
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039997.552 units remaining)	michelson_test_scripts/opcodes/transfer_amount.tz
{ parameter unit ;
  storage mutez ;
  code { DROP
         /* [] */ ;
         AMOUNT
         /* [ mutez ] */ ;
         NIL operation
         /* [ list operation : mutez ] */ ;
         PAIR
         /* [ pair (list operation) mutez ] */ } }
Well typed (Gas remaining: 1039994.236 units remaining)	michelson_test_scripts/opcodes/transfer_tokens.tz
{ parameter (contract unit) ;
  storage unit ;
  code { CAR
         /* [ contract unit ] */ ;
         DIP { UNIT /* [ unit ] */ }
         /* [ contract unit : unit ] */ ;
         PUSH mutez 100000000
         /* [ mutez : contract unit : unit ] */ ;
         UNIT
         /* [ unit : mutez : contract unit : unit ] */ ;
         TRANSFER_TOKENS
         /* [ operation : unit ] */ ;
         NIL operation
         /* [ list operation : operation : unit ] */ ;
         SWAP
         /* [ operation : list operation : unit ] */ ;
         CONS
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039993.278 units remaining)	michelson_test_scripts/opcodes/uncomb.tz
{ parameter (pair nat nat nat) ;
  storage nat ;
  code { CAR
         /* [ pair nat nat nat ] */ ;
         UNPAIR 3
         /* [ nat : nat : nat ] */ ;
         PUSH nat 100
         /* [ nat : nat : nat : nat ] */ ;
         MUL
         /* [ nat : nat : nat ] */ ;
         SWAP
         /* [ nat : nat : nat ] */ ;
         PUSH nat 10
         /* [ nat : nat : nat : nat ] */ ;
         MUL
         /* [ nat : nat : nat ] */ ;
         ADD
         /* [ nat : nat ] */ ;
         ADD
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039904.400 units remaining)	michelson_test_scripts/opcodes/unpair.tz
{ parameter (unit :param_unit) ;
  storage (unit :u1) ;
  code { DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         UNIT
         /* [ unit : unit ] */ ;
         PAIR
         /* [ pair unit unit ] */ ;
         UNPAIR
         /* [ unit : unit ] */ ;
         DROP 2
         /* [] */ ;
         UNIT @b
         /* [ unit ] */ ;
         UNIT @a
         /* [ unit : unit ] */ ;
         PAIR
         /* [ pair unit unit ] */ ;
         UNPAIR @c @d
         /* [ unit : unit ] */ ;
         DROP 2
         /* [] */ ;
         UNIT @b
         /* [ unit ] */ ;
         UNIT @a
         /* [ unit : unit ] */ ;
         PAIR %@ %@
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR % %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %a %
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR % %
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %a
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %a %b @a @b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @a @b %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @a @% %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @% @% %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @% @b %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DROP
         /* [] */ ;
         UNIT @d
         /* [ unit ] */ ;
         UNIT @c
         /* [ unit : unit ] */ ;
         PAIR %a %b
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR % %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %a %
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR % %
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %a
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %a %b @a @b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @a @b %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @a @% %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @% @% %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @% @b %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         UNIT
         /* [ unit : unit ] */ ;
         PAIR %a %b
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR % %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %a %
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR % %
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %a
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %a %b @a @b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @a @b %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @a @% %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @% @% %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @% @b %a %b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         UNIT
         /* [ unit : unit ] */ ;
         PAIR %a %b @p
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @%% @b
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @a @%%
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @%% @%%
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @% @%%
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR @%% @%
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DROP
         /* [] */ ;
         UNIT @b
         /* [ unit ] */ ;
         UNIT @a
         /* [ unit : unit ] */ ;
         PAIR @c
         /* [ pair unit unit ] */ ;
         UNPAIR @b @a
         /* [ unit : unit ] */ ;
         DROP 2
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039993.787 units remaining)	michelson_test_scripts/opcodes/unpair_field_annotation_mismatch.tz
{ parameter (unit :param_unit) ;
  storage (unit :u1) ;
  code { DROP
         /* [] */ ;
         UNIT @b
         /* [ unit ] */ ;
         UNIT @a
         /* [ unit : unit ] */ ;
         PAIR %@ %@
         /* [ pair unit unit ] */ ;
         DUP
         /* [ pair unit unit : pair unit unit ] */ ;
         UNPAIR %c %d
         /* [ unit : unit : pair unit unit ] */ ;
         DROP 2
         /* [ pair unit unit ] */ ;
         DROP
         /* [] */ ;
         UNIT
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039993.808 units remaining)	michelson_test_scripts/opcodes/update_big_map.tz
{ storage (pair (big_map string string) unit) ;
  parameter (map string (option string)) ;
  code { UNPAPAIR ;
         ITER { UNPAIR
                /* [ string : option string : big_map string string : unit ] */ ;
                UPDATE
                /* [ big_map string string : unit ] */ }
         /* [ big_map string string : unit ] */ ;
         PAIR
         /* [ pair (big_map string string) unit ] */ ;
         NIL operation
         /* [ list operation : pair (big_map string string) unit ] */ ;
         PAIR
         /* [ pair (list operation) (big_map string string) unit ] */ } }
Well typed (Gas remaining: 1039985.468 units remaining)	michelson_test_scripts/opcodes/utxo_read.tz
{ parameter (pair (ticket nat) nat) ;
  storage address ;
  code { CAR
         /* [ pair (ticket nat) nat ] */ ;
         UNPAIR
         /* [ ticket nat : nat ] */ ;
         READ_TICKET
         /* [ pair address nat nat : ticket nat : nat ] */ ;
         DIP { DROP /* [ nat ] */ }
         /* [ pair address nat nat : nat ] */ ;
         UNPAIR
         /* [ address : pair nat nat : nat ] */ ;
         DIP { UNPAIR /* [ nat : nat : nat ] */ }
         /* [ address : nat : nat : nat ] */ ;
         DIP 2 { ASSERT_CMPEQ }
         /* [ address : nat ] */ ;
         DIP { PUSH nat 42 /* [ nat : nat ] */ ; ASSERT_CMPEQ }
         /* [ address ] */ ;
         NIL operation
         /* [ list operation : address ] */ ;
         PAIR
         /* [ pair (list operation) address ] */ } }
Well typed (Gas remaining: 1039967.053 units remaining)	michelson_test_scripts/opcodes/utxor.tz
{ parameter (pair address address) ;
  storage nat ;
  code { UNPAIR
         /* [ pair address address : nat ] */ ;
         DIP { DUP /* [ nat : nat ] */ }
         /* [ pair address address : nat : nat ] */ ;
         SWAP
         /* [ nat : pair address address : nat ] */ ;
         PUSH nat 5
         /* [ nat : nat : pair address address : nat ] */ ;
         SWAP
         /* [ nat : nat : pair address address : nat ] */ ;
         TICKET
         /* [ option (ticket nat) : pair address address : nat ] */ ;
         ASSERT_SOME ;
         PUSH nat 2
         /* [ nat : ticket nat : pair address address : nat ] */ ;
         PUSH nat 3
         /* [ nat : nat : ticket nat : pair address address : nat ] */ ;
         PAIR
         /* [ pair nat nat : ticket nat : pair address address : nat ] */ ;
         SWAP
         /* [ ticket nat : pair nat nat : pair address address : nat ] */ ;
         SPLIT_TICKET
         /* [ option (pair (ticket nat) (ticket nat)) : pair address address : nat ] */ ;
         ASSERT_SOME ;
         UNPAIR
         /* [ ticket nat : ticket nat : pair address address : nat ] */ ;
         DIP { DIP { DUP
                     /* [ pair address address : pair address address : nat ] */ ;
                     CAR
                     /* [ address : pair address address : nat ] */ ;
                     CONTRACT
                       (pair (ticket nat) nat)
                     /* [ option (contract (pair (ticket nat) nat)) : pair address address : nat ] */ ;
                     ASSERT_SOME ;
                     PUSH mutez
                          0
                     /* [ mutez : contract (pair (ticket nat) nat) : pair address address : nat ] */ }
               /* [ ticket nat : mutez : contract (pair (ticket nat) nat)
                  : pair address address : nat ] */ ;
               PUSH nat
                    2
               /* [ nat : ticket nat : mutez : contract (pair (ticket nat) nat)
                  : pair address address : nat ] */ ;
               SWAP
               /* [ ticket nat : nat : mutez : contract (pair (ticket nat) nat)
                  : pair address address : nat ] */ ;
               PAIR
               /* [ pair (ticket nat) nat : mutez : contract (pair (ticket nat) nat)
                  : pair address address : nat ] */ }
         /* [ ticket nat : pair (ticket nat) nat : mutez
            : contract (pair (ticket nat) nat) : pair address address : nat ] */ ;
         DIP { TRANSFER_TOKENS /* [ operation : pair address address : nat ] */ }
         /* [ ticket nat : operation : pair address address : nat ] */ ;
         SWAP
         /* [ operation : ticket nat : pair address address : nat ] */ ;
         DIP { DIP { CDR
                     /* [ address : nat ] */ ;
                     CONTRACT
                       (pair (ticket nat) nat)
                     /* [ option (contract (pair (ticket nat) nat)) : nat ] */ ;
                     ASSERT_SOME ;
                     PUSH mutez 0
                     /* [ mutez : contract (pair (ticket nat) nat) : nat ] */ }
               /* [ ticket nat : mutez : contract (pair (ticket nat) nat) : nat ] */ ;
               PUSH nat
                    3
               /* [ nat : ticket nat : mutez : contract (pair (ticket nat) nat) : nat ] */ ;
               SWAP
               /* [ ticket nat : nat : mutez : contract (pair (ticket nat) nat) : nat ] */ ;
               PAIR
               /* [ pair (ticket nat) nat : mutez : contract (pair (ticket nat) nat) : nat ] */ }
         /* [ operation : pair (ticket nat) nat : mutez
            : contract (pair (ticket nat) nat) : nat ] */ ;
         DIP { TRANSFER_TOKENS /* [ operation : nat ] */ }
         /* [ operation : operation : nat ] */ ;
         NIL operation
         /* [ list operation : operation : operation : nat ] */ ;
         SWAP
         /* [ operation : list operation : operation : nat ] */ ;
         CONS
         /* [ list operation : operation : nat ] */ ;
         SWAP
         /* [ operation : list operation : nat ] */ ;
         CONS
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039994.728 units remaining)	michelson_test_scripts/opcodes/view_fib.tz
{ parameter (pair nat address) ;
  storage nat ;
  code { CAR
         /* [ pair nat address ] */ ;
         UNPAIR
         /* [ nat : address ] */ ;
         VIEW "fib" nat
         /* [ option nat ] */ ;
         IF_SOME
           { NIL operation
             /* [ list operation : nat ] */ ;
             PAIR
             /* [ pair (list operation) nat ] */ }
           { FAIL } } }
Well typed (Gas remaining: 1039993.431 units remaining)	michelson_test_scripts/opcodes/view_mutual_recursion.tz
{ parameter (pair nat address) ;
  storage nat ;
  code { CAR
         /* [ pair nat address ] */ ;
         DUP
         /* [ pair nat address : pair nat address ] */ ;
         CDR
         /* [ address : pair nat address ] */ ;
         SWAP
         /* [ pair nat address : address ] */ ;
         VIEW "is_twenty" nat
         /* [ option nat ] */ ;
         IF_SOME
           { NIL operation
             /* [ list operation : nat ] */ ;
             PAIR
             /* [ pair (list operation) nat ] */ }
           { FAIL } } }
Well typed (Gas remaining: 1039994.508 units remaining)	michelson_test_scripts/opcodes/view_op_add.tz
{ parameter (pair nat address) ;
  storage nat ;
  code { CAR
         /* [ pair nat address ] */ ;
         UNPAIR
         /* [ nat : address ] */ ;
         VIEW "add" nat
         /* [ option nat ] */ ;
         IF_SOME { /* [ nat ] */ } { FAIL } ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039994.488 units remaining)	michelson_test_scripts/opcodes/view_op_constant.tz
{ parameter (pair nat address) ;
  storage nat ;
  code { CAR
         /* [ pair nat address ] */ ;
         UNPAIR
         /* [ nat : address ] */ ;
         VIEW "const" nat
         /* [ option nat ] */ ;
         IF_SOME { /* [ nat ] */ } { FAIL } ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039994.120 units remaining)	michelson_test_scripts/opcodes/view_op_id.tz
{ parameter (pair nat address) ;
  storage (pair nat nat) ;
  code { CAR
         /* [ pair nat address ] */ ;
         UNPAIR
         /* [ nat : address ] */ ;
         VIEW "id" (pair nat nat)
         /* [ option (pair nat nat) ] */ ;
         IF_SOME { /* [ pair nat nat ] */ } { FAIL } ;
         NIL operation
         /* [ list operation : pair nat nat ] */ ;
         PAIR
         /* [ pair (list operation) nat nat ] */ } }
Well typed (Gas remaining: 1039989.349 units remaining)	michelson_test_scripts/opcodes/view_op_nonexistent_addr.tz
{ parameter (pair nat address) ;
  storage bool ;
  code { DROP
         /* [] */ ;
         PUSH address "tz1SuakBpFdG9b4twyfrSMqZzruxhpMeSrE5"
         /* [ address ] */ ;
         PUSH nat 0
         /* [ nat : address ] */ ;
         VIEW "test" bool
         /* [ option bool ] */ ;
         IF_SOME
           { DROP /* [] */ ; PUSH bool True /* [ bool ] */ }
           { PUSH bool False /* [ bool ] */ } ;
         NIL operation
         /* [ list operation : bool ] */ ;
         PAIR
         /* [ pair (list operation) bool ] */ } }
Well typed (Gas remaining: 1039993.957 units remaining)	michelson_test_scripts/opcodes/view_op_nonexistent_func.tz
{ parameter (pair nat address) ;
  storage bool ;
  code { CAR
         /* [ pair nat address ] */ ;
         UNPAIR
         /* [ nat : address ] */ ;
         VIEW "not_exist" bool
         /* [ option bool ] */ ;
         IF_SOME
           { DROP /* [] */ ; PUSH bool True /* [ bool ] */ }
           { PUSH bool False /* [ bool ] */ } ;
         NIL operation
         /* [ list operation : bool ] */ ;
         PAIR
         /* [ pair (list operation) bool ] */ } }
Well typed (Gas remaining: 1039994.900 units remaining)	michelson_test_scripts/opcodes/view_op_test_step_contants.tz
{ parameter address ;
  storage (option (pair (pair mutez mutez) (pair (pair address address) address))) ;
  code { CAR
         /* [ address ] */ ;
         UNIT
         /* [ unit : address ] */ ;
         VIEW "step_constants"
              (pair (pair mutez mutez) (pair (pair address address) address))
         /* [ option (pair (pair mutez mutez) (pair address address) address) ] */ ;
         NIL operation
         /* [ list operation
            : option (pair (pair mutez mutez) (pair address address) address) ] */ ;
         PAIR
         /* [ pair (list operation) (option (pair (pair mutez mutez) (pair address address) address)) ] */ } }
Well typed (Gas remaining: 1039994.017 units remaining)	michelson_test_scripts/opcodes/view_op_toplevel_inconsistent_input_type.tz
{ parameter (pair int address) ;
  storage nat ;
  code { CAR
         /* [ pair int address ] */ ;
         UNPAIR
         /* [ int : address ] */ ;
         VIEW "add" nat
         /* [ option nat ] */ ;
         IF_SOME { DROP /* [] */ ; PUSH nat 1 /* [ nat ] */ } { PUSH nat 0 /* [ nat ] */ } ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } }
Well typed (Gas remaining: 1039994.017 units remaining)	michelson_test_scripts/opcodes/view_op_toplevel_inconsistent_output_type.tz
{ parameter (pair nat address) ;
  storage bool ;
  code { CAR
         /* [ pair nat address ] */ ;
         UNPAIR
         /* [ nat : address ] */ ;
         VIEW "add" bool
         /* [ option bool ] */ ;
         IF_SOME
           { DROP /* [] */ ; PUSH bool True /* [ bool ] */ }
           { PUSH bool False /* [ bool ] */ } ;
         NIL operation
         /* [ list operation : bool ] */ ;
         PAIR
         /* [ pair (list operation) bool ] */ } }
Well typed (Gas remaining: 1039988.594 units remaining)	michelson_test_scripts/opcodes/view_rec.tz
{ parameter unit ;
  storage unit ;
  view "loop"
       address
       never
       { CAR
         /* [ address ] */ ;
         DUP
         /* [ address : address ] */ ;
         VIEW "loop" never
         /* [ option never ] */ ;
         ASSERT_SOME } ;
  code { CDR
         /* [ unit ] */ ;
         SELF
         /* [ contract unit : unit ] */ ;
         ADDRESS
         /* [ address : unit ] */ ;
         DUP
         /* [ address : address : unit ] */ ;
         VIEW "loop" never
         /* [ option never : unit ] */ ;
         ASSERT_SOME ;
         DROP
         /* [ unit ] */ ;
         NIL operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
Well typed (Gas remaining: 1039948.512 units remaining)	michelson_test_scripts/opcodes/view_toplevel_lib.tz
{ parameter nat ;
  storage nat ;
  code { CAR
         /* [ nat ] */ ;
         NIL operation
         /* [ list operation : nat ] */ ;
         PAIR
         /* [ pair (list operation) nat ] */ } ;
  view "add" nat nat { UNPAIR /* [ nat : nat ] */ ; ADD /* [ nat ] */ } ;
  view "id" nat (pair nat nat) { /* [ pair nat nat ] */ } ;
  view "test_failwith" nat (pair nat nat) { FAILWITH /* [] */ } ;
  view "step_constants"
       unit
       (pair (pair mutez mutez) (pair (pair address address) address))
       { DROP
         /* [] */ ;
         SOURCE
         /* [ address ] */ ;
         SENDER
         /* [ address : address ] */ ;
         SELF_ADDRESS
         /* [ address : address : address ] */ ;
         PAIR
         /* [ pair address address : address ] */ ;
         PAIR
         /* [ pair (pair address address) address ] */ ;
         BALANCE
         /* [ mutez : pair (pair address address) address ] */ ;
         AMOUNT
         /* [ mutez : mutez : pair (pair address address) address ] */ ;
         PAIR
         /* [ pair mutez mutez : pair (pair address address) address ] */ ;
         PAIR
         /* [ pair (pair mutez mutez) (pair address address) address ] */ } ;
  view "succ"
       (pair nat address)
       nat
       { CAR
         /* [ pair nat address ] */ ;
         UNPAIR
         /* [ nat : address ] */ ;
         PUSH nat 1
         /* [ nat : nat : address ] */ ;
         ADD
         /* [ nat : address ] */ ;
         PAIR
         /* [ pair nat address ] */ ;
         DUP
         /* [ pair nat address : pair nat address ] */ ;
         CDR
         /* [ address : pair nat address ] */ ;
         SWAP
         /* [ pair nat address : address ] */ ;
         VIEW "is_twenty" nat
         /* [ option nat ] */ ;
         ASSERT_SOME } ;
  view "is_twenty"
       (pair nat address)
       nat
       { CAR
         /* [ pair nat address ] */ ;
         DUP
         /* [ pair nat address : pair nat address ] */ ;
         CAR
         /* [ nat : pair nat address ] */ ;
         PUSH nat 20
         /* [ nat : nat : pair nat address ] */ ;
         COMPARE
         /* [ int : pair nat address ] */ ;
         EQ
         /* [ bool : pair nat address ] */ ;
         IF { CAR /* [ nat ] */ }
            { DUP
              /* [ pair nat address : pair nat address ] */ ;
              CDR
              /* [ address : pair nat address ] */ ;
              SWAP
              /* [ pair nat address : address ] */ ;
              VIEW "succ" nat
              /* [ option nat ] */ ;
              ASSERT_SOME } } ;
  view "fib"
       nat
       nat
       { CAR
         /* [ nat ] */ ;
         DUP
         /* [ nat : nat ] */ ;
         PUSH nat 0
         /* [ nat : nat : nat ] */ ;
         COMPARE
         /* [ int : nat ] */ ;
         EQ
         /* [ bool : nat ] */ ;
         IF { /* [ nat ] */ }
            { DUP
              /* [ nat : nat ] */ ;
              PUSH nat 1
              /* [ nat : nat : nat ] */ ;
              COMPARE
              /* [ int : nat ] */ ;
              EQ
              /* [ bool : nat ] */ ;
              IF { /* [ nat ] */ }
                 { DUP
                   /* [ nat : nat ] */ ;
                   PUSH nat 1
                   /* [ nat : nat : nat ] */ ;
                   SWAP
                   /* [ nat : nat : nat ] */ ;
                   SUB
                   /* [ int : nat ] */ ;
                   ABS
                   /* [ nat : nat ] */ ;
                   SELF_ADDRESS
                   /* [ address : nat : nat ] */ ;
                   SWAP
                   /* [ nat : address : nat ] */ ;
                   VIEW "fib" nat
                   /* [ option nat : nat ] */ ;
                   IF_SOME
                     { SWAP
                       /* [ nat : nat ] */ ;
                       PUSH nat 2
                       /* [ nat : nat : nat ] */ ;
                       SWAP
                       /* [ nat : nat : nat ] */ ;
                       SUB
                       /* [ int : nat ] */ ;
                       ABS
                       /* [ nat : nat ] */ ;
                       SELF_ADDRESS
                       /* [ address : nat : nat ] */ ;
                       SWAP
                       /* [ nat : address : nat ] */ ;
                       VIEW "fib" nat
                       /* [ option nat : nat ] */ ;
                       IF_SOME { ADD /* [ nat ] */ } { FAIL } }
                     { FAIL } } } } }
Well typed (Gas remaining: 1039995.372 units remaining)	michelson_test_scripts/opcodes/voting_power.tz
{ parameter key ;
  storage (pair nat nat) ;
  code { CAR
         /* [ key ] */ ;
         HASH_KEY
         /* [ key_hash ] */ ;
         VOTING_POWER
         /* [ nat ] */ ;
         DIP { TOTAL_VOTING_POWER /* [ nat ] */ }
         /* [ nat : nat ] */ ;
         PAIR
         /* [ pair nat nat ] */ ;
         NIL operation
         /* [ list operation : pair nat nat ] */ ;
         PAIR
         /* [ pair (list operation) nat nat ] */ } }
Well typed (Gas remaining: 1039992.866 units remaining)	michelson_test_scripts/opcodes/xor.tz
{ parameter (or (pair bool bool) (pair nat nat)) ;
  storage (option (or bool nat)) ;
  code { CAR
         /* [ or (pair bool bool) (pair nat nat) ] */ ;
         IF_LEFT
           { UNPAIR /* [ bool : bool ] */ ; XOR /* [ bool ] */ ; LEFT nat /* [ or bool nat ] */ }
           { UNPAIR /* [ nat : nat ] */ ; XOR /* [ nat ] */ ; RIGHT bool /* [ or bool nat ] */ } ;
         SOME
         /* [ option (or bool nat) ] */ ;
         NIL operation
         /* [ list operation : option (or bool nat) ] */ ;
         PAIR
         /* [ pair (list operation) (option (or bool nat)) ] */ } }
Well typed (Gas remaining: 1039978.970 units remaining)	michelson_test_scripts/opcodes/xor_bytes_016.tz
{ parameter unit ;
  storage unit ;
  code { DROP
         /* [] */ ;
         PUSH bytes 0x05
         /* [ bytes ] */ ;
         PUSH bytes 0x06
         /* [ bytes : bytes ] */ ;
         XOR
         /* [ bytes ] */ ;
         PUSH bytes 0x03
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x0005
         /* [ bytes ] */ ;
         PUSH bytes 0x0106
         /* [ bytes : bytes ] */ ;
         XOR
         /* [ bytes ] */ ;
         PUSH bytes 0x0103
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         PUSH bytes 0x05
         /* [ bytes ] */ ;
         PUSH bytes 0x0106
         /* [ bytes : bytes ] */ ;
         XOR
         /* [ bytes ] */ ;
         PUSH bytes 0x0103
         /* [ bytes : bytes ] */ ;
         ASSERT_CMPEQ ;
         UNIT
         /* [ unit ] */ ;
         NIL @noop operation
         /* [ list operation : unit ] */ ;
         PAIR
         /* [ pair (list operation) unit ] */ } }
