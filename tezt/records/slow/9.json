[
  {
    "file": "src/proto_alpha/lib_sc_rollup_node/test/test_octez_conversions.ml",
    "title": "alpha: Smart rollup types octez conversions: roundtrip (roundtrip commitment)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "6879",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_sc_rollup_node/test/test_octez_conversions.ml",
    "title": "alpha: Smart rollup types octez conversions: roundtrip (roundtrip stakers)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "176045",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/unit/test_sc_rollup_inbox.ml",
    "title": "alpha: sc rollup inbox (test to verify a proof with payload when none is expected.)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "201122",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/unit/test_sc_rollup_inbox.ml",
    "title": "alpha: sc rollup inbox (negative test of inbox proof.)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "1448457",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/pbt/test_zk_rollup_encoding.ml",
    "title": "alpha: ZK rollup encoding: : to_scalar (to_scalar Zk_rollup_repr.t)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "1625",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/pbt/test_script_comparison.ml",
    "title": "alpha: symmetry (symmetry)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "6465",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/pbt/test_script_comparison.ml",
    "title": "alpha: pack_unpack (pack_unpack)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "2971435",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/pbt/test_sc_rollup_tick_repr.ml",
    "title": "alpha: Tick_repr (next x > x)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "265",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/pbt/test_refutation_game.ml",
    "title": "alpha: Refutation_game: Refutation (cut at level properly cuts)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "380",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/pbt/test_refutation_game.ml",
    "title": "alpha: Refutation_game: Dissection (distance >= nb_of_sections => (len dissection = nb_of_sections)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "247844",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/pbt/test_carbonated_map.ml",
    "title": "alpha: Carbonated map (Empty map is left identity for merge)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "917819",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/pbt/test_carbonated_map.ml",
    "title": "alpha: Carbonated map (Test that fold collecting the elements agrees with to-list)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "866175",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/pbt/test_bytes_conversion.ml",
    "title": "alpha: bytes and int/nat conversion : bytes_nat_conv (bytes_of_nat)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "341",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/pbt/test_bitset.ml",
    "title": "alpha: quantity (get set)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "1397145",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/pbt/liquidity_baking_pbt.ml",
    "title": "alpha: Machines Cross-Validation (Storage consistency)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "6069149",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/integration/michelson/test_sapling.ml",
    "title": "alpha: sapling (bench_phases)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "14729610",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_protocol/test/integration/michelson/test_interpretation.ml",
    "title": "alpha: interpretation (check robustness overflow error)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "995572",
      "count": "1"
    }
  },
  {
    "file": "src/proto_alpha/lib_client/test/test_client_proto_context.ml",
    "title": "alpha: Encodings (test_batch_transfer_operation_encoding_roundtrip)",
    "tags": [
      "alcotezt",
      "slow",
      "alpha"
    ],
    "successful_runs": {
      "total_time": "11432",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_sc_rollup_node/test/test_octez_conversions.ml",
    "title": "020-PsParisC: Smart rollup types octez conversions: roundtrip (roundtrip inbox)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "135535",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/unit/test_sc_rollup_inbox.ml",
    "title": "020-PsParisC: sc rollup inbox (Invalid merkelized payload hashes proof fails.)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "527487",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/unit/test_sc_rollup_inbox.ml",
    "title": "020-PsParisC: sc rollup inbox (test to verify a proof with a proof for another payload.)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "222609",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/unit/test_global_constants_storage.ml",
    "title": "020-PsParisC: Global constants storage (register: fails with unregistered references pbt)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "45977",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/pbt/test_zk_rollup_encoding.ml",
    "title": "020-PsParisC: ZK rollup encoding: : roundtrip (roundtrip Zk_rollup_repr.pending_list)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "2115",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/pbt/test_sc_rollup_tick_repr.ml",
    "title": "020-PsParisC: Tick_repr (distance from x to x is 0)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "209",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/pbt/test_sc_rollup_encoding.ml",
    "title": "020-PsParisC: SC rollup encoding: : roundtrip (roundtrip Sc_rollup_inbox_message_repr.t)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "9859",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/pbt/test_sampler.ml",
    "title": "020-PsParisC: sampling (alias_float)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "90472679",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/pbt/test_refutation_game.ml",
    "title": "020-PsParisC: Refutation_game: Refutation (Perfect against Nostalgic)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "24781291",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/pbt/test_refutation_game.ml",
    "title": "020-PsParisC: Refutation_game: Dissection (dissection.start_chunk can not change)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "195477",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/pbt/test_gas_properties.ml",
    "title": "020-PsParisC: gas properties (Consuming commutes)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "837",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/pbt/test_carbonated_map.ml",
    "title": "020-PsParisC: Carbonated map (Size returns the number of elements)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "840426",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/pbt/saturation_fuzzing.ml",
    "title": "020-PsParisC: mul (t1 * t2 = t2 * t1)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "275",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/pbt/saturation_fuzzing.ml",
    "title": "020-PsParisC: sub (t - 0 = t)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "206",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/pbt/saturation_fuzzing.ml",
    "title": "020-PsParisC: add and sub ((t1 - t2) + t2 >= t1)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "354",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/pbt/saturation_fuzzing.ml",
    "title": "020-PsParisC: <= and >= (t <= saturated)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "144",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_protocol/test/pbt/liquidity_baking_pbt.ml",
    "title": "020-PsParisC: Economic Properties (No global gain)",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "18133291",
      "count": "1"
    }
  },
  {
    "file": "src/proto_020_PsParisC/lib_client/test/test_proxy.ml",
    "title": "020-PsParisC: proxy ([fst (split_key s)] is a prefix of [s])",
    "tags": [
      "alcotezt",
      "slow",
      "parisc"
    ],
    "successful_runs": {
      "total_time": "258873",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_sc_rollup_node/test/test_octez_conversions.ml",
    "title": "019-PtParisB: Smart rollup types octez conversions: roundtrip (roundtrip dal_slot_history_cache)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "34145335",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/unit/test_sc_rollup_inbox.ml",
    "title": "019-PtParisB: sc rollup inbox (test to verify a proof not using the correct current level proof.)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "172353",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/unit/test_sc_rollup_inbox.ml",
    "title": "019-PtParisB: sc rollup inbox (Checking inclusion proofs validity depending on history capacity)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "11262",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/unit/test_global_constants_storage.ml",
    "title": "019-PtParisB: Global constants storage (get on a nonexistent global constants fails)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "8559",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/pbt/test_zk_rollup_encoding.ml",
    "title": "019-PtParisB: ZK rollup encoding: : roundtrip (roundtrip Zk_rollup_account_repr.t)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "14502635",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/pbt/test_tez_repr.ml",
    "title": "019-PtParisB: Tez_repr (Tez.(-?) is coherent w.r.t. Z.(-))",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "427",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/pbt/test_script_roundtrip.ml",
    "title": "019-PtParisB: roundtrip_size_big_map (roundtrip_size_big_map)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "23859",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/pbt/test_script_comparison.ml",
    "title": "019-PtParisB: compatible_with_reference (compatible_with_reference)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "6309",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/pbt/test_sc_rollup_encoding.ml",
    "title": "019-PtParisB: SC rollup encoding: : roundtrip (roundtrip Sc_rollup_commitment.versioned)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "26508",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/pbt/test_refutation_game.ml",
    "title": "019-PtParisB: Refutation_game: Refutation (Perfect against Keen)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "75097365",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/pbt/test_dal_slot_proof.ml",
    "title": "019-PtParisB: Dal slots refutation game: [019-PtParisB: test] Dal slots refutation (Pbt tests: confirmed pages)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "31092531",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/pbt/test_carbonated_map.ml",
    "title": "019-PtParisB: Carbonated map (Remove new element decreases size by one)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "848124",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/pbt/test_balance_updates_encoding.ml",
    "title": "019-PtParisB: Operation_encoding: roundtrip 2 encodings (roundtrip through binary Balance_updates)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "4716774",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/pbt/saturation_fuzzing.ml",
    "title": "019-PtParisB: add (t1 + t2 >= t1)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "749078",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/pbt/saturation_fuzzing.ml",
    "title": "019-PtParisB: mul (t * 0 = 0)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "298",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_protocol/test/pbt/saturation_fuzzing.ml",
    "title": "019-PtParisB: sqrt ((sqrt t)² <= t <= (succ (sqrt t))²)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "288",
      "count": "1"
    }
  },
  {
    "file": "src/proto_019_PtParisB/lib_plugin/test/test_consensus_filter.ml",
    "title": "019-PtParisB: pre_filter (same level, different round, too far)",
    "tags": [
      "alcotezt",
      "slow",
      "parisb"
    ],
    "successful_runs": {
      "total_time": "2039",
      "count": "1"
    }
  },
  {
    "file": "src/lib_stdlib/test/test_bounded_heap.ml",
    "title": "stdlib: Bounded_heap (bounded_heap (qcheck))",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "381495",
      "count": "1"
    }
  },
  {
    "file": "src/lib_requester/test/test_fuzzing_requester.ml",
    "title": "Requester_PBT: inject (key <> key' ==> read_opt (inject t key' value) key = read_opt t key)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "161234",
      "count": "1"
    }
  },
  {
    "file": "src/lib_shell/test/test_prevalidator_classification_operations.ml",
    "title": "Prevalidator: handle_operations ([handle_live_operations] clear approximation)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "4151576",
      "count": "1"
    }
  },
  {
    "file": "src/lib_shell/test/test_prevalidator_classification.ml",
    "title": "Prevalidator_classification: invariants (invariants are preserved through any sequence of events (provided we do not [add] already present operations))",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "824700",
      "count": "1"
    }
  },
  {
    "file": "src/lib_shell/test/test_prevalidator_classification.ml",
    "title": "Prevalidator_classification: to_map ([to_map] returns an empty map if all parameters are set to [false])",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "7333",
      "count": "1"
    }
  },
  {
    "file": "src/lib_scoru_wasm/test/test_wasm_encoding.ml",
    "title": "test lib scoru wasm: WASM Encodings (Module roundtrip)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "2374408",
      "count": "1"
    }
  },
  {
    "file": "src/lib_scoru_wasm/test/test_parser_encoding.ml",
    "title": "test lib scoru wasm: Parser Encodings (LazyVec)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "21914",
      "count": "1"
    }
  },
  {
    "file": "src/lib_scoru_wasm/test/test_parser_encoding.ml",
    "title": "test lib scoru wasm: Parser Encodings (Code)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "45885",
      "count": "1"
    }
  },
  {
    "file": "src/lib_scoru_wasm/test/test_durable_shapshot.ml",
    "title": "test lib scoru wasm: Durable snapshot (Stress-test operation move_tree_exn. Initial size: 1000, 2000 operations)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "606225",
      "count": "1"
    }
  },
  {
    "file": "src/lib_scoru_wasm/test/test_ast_generators.ml",
    "title": "test lib scoru wasm: AST Generators (gen_print_module)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "1295674",
      "count": "1"
    }
  },
  {
    "file": "src/lib_proxy_server_config/test/test_proxy_server_config.ml",
    "title": "Proxy_server_config: to_runtime ([to_runtime] returns [Ok] on expected values)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "2231",
      "count": "1"
    }
  },
  {
    "file": "src/lib_proxy/test/test_fuzzing_light.ml",
    "title": "Mode Light: Consensus consistency examples (min_agreement=0.700000, honest=1, rogue=1 consensus_expected=false)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "266360",
      "count": "1"
    }
  },
  {
    "file": "src/lib_proxy/test/test_fuzzing_light.ml",
    "title": "Mode Light: Consensus consistency examples (min_agreement=0.010000, honest=0, rogue=100 consensus_expected=false)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "16325062",
      "count": "1"
    }
  },
  {
    "file": "src/lib_protocol_environment/test/test_cache.ml",
    "title": "tezos-shell-context: cache (an uninitialised cache is unusable)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "2684",
      "count": "1"
    }
  },
  {
    "file": "src/lib_protocol_environment/test/test_cache.ml",
    "title": "tezos-shell-context: cache (inserted entries are in the cache (with lookup))",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "7200316",
      "count": "1"
    }
  },
  {
    "file": "src/lib_protocol_environment/test/test_cache.ml",
    "title": "tezos-shell-context: cache (update with some value changes mapping)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "7148771",
      "count": "1"
    }
  },
  {
    "file": "src/lib_lwt_result_stdlib/test/test_fuzzing_option_against_stdlib.ml",
    "title": "FuzzRef: Option (Option.filter_left)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "251",
      "count": "1"
    }
  },
  {
    "file": "src/lib_lwt_result_stdlib/test/test_fuzzing_list_against_stdlib.ml",
    "title": "FuzzRef: List (List.find)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "39426",
      "count": "1"
    }
  },
  {
    "file": "src/lib_lwt_result_stdlib/test/test_fuzzing_list_against_stdlib.ml",
    "title": "FuzzRef: List (List.iter)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "157591",
      "count": "1"
    }
  },
  {
    "file": "src/lib_lwt_result_stdlib/test/test_fuzzing_list_against_stdlib.ml",
    "title": "FuzzRef: List (List.rev_combine)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "38448",
      "count": "1"
    }
  },
  {
    "file": "src/lib_lwt_result_stdlib/test/test_fuzzing_list_against_stdlib.ml",
    "title": "FuzzRef: List (List.equal)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "58535",
      "count": "1"
    }
  },
  {
    "file": "src/lib_lazy_containers/test/lazy_vector_tests.ml",
    "title": "Lazy structs tests: Lazy_vector (create constructs correctly)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "18042",
      "count": "1"
    }
  },
  {
    "file": "src/lib_lazy_containers/test/chunked_byte_vector_tests.ml",
    "title": "Chunked_byte_vector: Chunked_byte_vector (Mutable CBV/store_byte and load_byte work)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "39247",
      "count": "1"
    }
  },
  {
    "file": "src/lib_lazy_containers/test/chunked_byte_vector_tests.ml",
    "title": "Chunked_byte_vector: Chunked_byte_vector (Immutable CBV/grow works)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "34470",
      "count": "1"
    }
  },
  {
    "file": "src/lib_layer2_store/test/test_indexed_store.ml",
    "title": "tezos-layer2-store: indexed-store-pbt (indexable removable store (sequential))",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "5142740",
      "count": "1"
    }
  },
  {
    "file": "src/lib_crypto_dal/test/test_dal_cryptobox.ml",
    "title": "DAL cryptobox: PBT (erasure code)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "481059",
      "count": "1"
    }
  },
  {
    "file": "src/lib_crypto_dal/test/test_dal_cryptobox.ml",
    "title": "DAL cryptobox: PBT (shard proofs multi)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "18486108",
      "count": "1"
    }
  },
  {
    "file": "src/lib_crypto/test/test_run.ml",
    "title": "tezos-crypto: secp256k1-encodings (b58check.invalid)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "1108",
      "count": "1"
    }
  },
  {
    "file": "src/lib_crypto/test/test_run.ml",
    "title": "tezos-crypto: bls12_381-encodings (b58check.invalid)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "560",
      "count": "1"
    }
  },
  {
    "file": "src/lib_crypto/test/test_prop_signature.ml",
    "title": "tezos-crypto-prop-signature: P256 (Signature_P256_sign_check)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "62969",
      "count": "1"
    }
  },
  {
    "file": "src/lib_context/test/test_merkle_proof.ml",
    "title": "test_merkle_proof: random2_v1 (tree_proof_encoding)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "10618",
      "count": "1"
    }
  },
  {
    "file": "src/lib_base/test/test_time.ml",
    "title": "Time: System (System.[to|of]_protocol roundtrip modulo option)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "225",
      "count": "1"
    }
  },
  {
    "file": "src/lib_base/test/test_skip_list.ml",
    "title": "Skip_list: skip list (Skip list: produce paths with `back_path` and check)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "482",
      "count": "1"
    }
  },
  {
    "file": "src/lib_base/test/test_sized.ml",
    "title": "Sized: SizedSet (add)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "308",
      "count": "1"
    }
  },
  {
    "file": "src/lib_base/test/test_sized.ml",
    "title": "Sized: SizedSet (partition)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "4457",
      "count": "1"
    }
  },
  {
    "file": "src/lib_base/test/test_sized.ml",
    "title": "Sized: SizedMap (filter_map)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "5399",
      "count": "1"
    }
  },
  {
    "file": "src/lib_base/test/test_p2p_addr.ml",
    "title": "Base.P2p: P2p_point (Base.P2p_point.addr_port_id.to-string-from-string)",
    "tags": [
      "alcotezt",
      "slow"
    ],
    "successful_runs": {
      "total_time": "6155",
      "count": "1"
    }
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: Sequencer state is persistent across runs (sequencer, ghostnet) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ],
    "successful_runs": {
      "total_time": "11369524",
      "count": "1"
    }
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisb: Sequencer locks production if it's too ahead (sequencer, latest) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "max_blueprint_ahead",
      "node",
      "parisb",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ],
    "successful_runs": {
      "total_time": "28454524",
      "count": "1"
    }
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: Sequencer is resilient to rollup node disconnection (sequencer, ghostnet) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "data",
      "evm",
      "evm_node",
      "flaky",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ],
    "failed_runs": {
      "total_time": "66291885",
      "count": "1"
    }
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: Sequencer can return the smart rollup address on demand (sequencer, latest) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisc",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ],
    "successful_runs": {
      "total_time": "13964756",
      "count": "1"
    }
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisb: Sequencer can provide blueprints on demand (sequencer, latest) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "data",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisb",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ],
    "successful_runs": {
      "total_time": "13483757",
      "count": "1"
    }
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisb: Send a deposit to the delayed inbox (sequencer, ghostnet) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "delayed_inbox",
      "deposit",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisb",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ],
    "successful_runs": {
      "total_time": "16470484",
      "count": "1"
    }
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: RPC method produceBlock (sequencer, ghostnet) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "produce_block",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ],
    "successful_runs": {
      "total_time": "12616637",
      "count": "1"
    }
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: RPC method getBalance uses block parameter (sequencer, mainnet) (without dal)",
    "tags": [
      "admin_client",
      "block_param",
      "client",
      "evm",
      "evm_node",
      "get_balance",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisc",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ],
    "successful_runs": {
      "total_time": "27176284",
      "count": "1"
    }
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: Supports extended block parameter (sequencer, ghostnet) (without dal)",
    "tags": [
      "admin_client",
      "block_param",
      "client",
      "counter",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ],
    "successful_runs": {
      "total_time": "26504135",
      "count": "1"
    }
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: Delayed transaction is included (sequencer, ghostnet) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "delayed_inbox",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "inclusion",
      "node",
      "parisc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ],
    "successful_runs": {
      "total_time": "22126589",
      "count": "1"
    }
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: Delayed FA deposit is included (sequencer, latest) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "codec",
      "delayed_inbox",
      "enabled",
      "evm",
      "evm_kernel",
      "evm_node",
      "fa_deposit",
      "inclusion",
      "latest",
      "node",
      "parisc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisb: Init evm node sequencer data dir from a rollup node data dir with delayed items (sequencer, latest) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "delayed_inbox",
      "evm",
      "evm_kernel",
      "evm_node",
      "init",
      "latest",
      "node",
      "parisb",
      "rollup_node",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisb: Can start an Observer node (sequencer, mainnet) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "observer",
      "parisb",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: Can restart the sequencer node (sequencer, latest) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "observer",
      "parisc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: Observer timeouts when blocks do not arrive quickly enough (sequencer, latest) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "observer",
      "parisc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "timeout"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: Sending an external transaction to the delayed inbox fails (sequencer, ghostnet) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "delayed_inbox",
      "evm",
      "evm_node",
      "external",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisb: Delayed transaction timeout (sequencer, latest) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "delayed_inbox",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisb",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "timeout"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: Forced blueprint can take l1 timestamp (sequencer, latest) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "delayed_inbox",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "timeout"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisb: Delayed inbox flushing (sequencer, ghostnet) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "delayed_inbox",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisb",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "timeout"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: No automatic block production (sequencer, ghostnet) (without dal)",
    "tags": [
      "admin_client",
      "block",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: Rollup-node sequencer upgrade is applied to the sequencer local state. (sequencer, mainnet) (without dal)",
    "tags": [
      "admin_client",
      "auto",
      "client",
      "evm",
      "evm_node",
      "flaky",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisc",
      "sequencer",
      "sequencer_upgrade",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "sync"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: Evm node can catchup event from the rollup node (sequencer, latest) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "event",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisb: Evm node don't read the same level twice (sequencer, mainnet) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "event",
      "evm",
      "evm_node",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisb",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisb: Checks the stage one reboots when reading too much chunks in a single L1 level (sequencer, latest) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisb",
      "reboot",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Alpha: Checks the stage one reboots when reading too much chunks in a single L1 level (sequencer, latest) (without dal)",
    "tags": [
      "admin_client",
      "alpha",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "reboot",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: Checks the sequencer doesn't produce blueprint bigger than the given maximum number of chunks and count delayed transactions size in the blueprint (sequencer, ghostnet) (without dal)",
    "tags": [
      "admin_client",
      "blueprint",
      "client",
      "delayed",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "limit",
      "node",
      "parisc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisc: try to reset sequencer and observer state using the command. (sequencer, ghostnet) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "reset",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_sequencer.ml",
    "title": "Parisb: Sequencer checks the smart rollup address (sequencer, ghostnet) (without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisb",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "store"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Originate EVM kernel with installer (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisb",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: RPC method eth_getBalance (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "get_balance",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisc",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: RPC method eth_getCode (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "get_code",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisb",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: RPC method eth_blockNumber (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "block_number",
      "client",
      "evm",
      "evm_node",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisb",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: RPC method net_version (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "net_version",
      "node",
      "parisb",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: RPC method eth_getBlockByNumber (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "get_block_by_number",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: RPC method eth_getBlockByNumber (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "get_block_by_number",
      "latest",
      "node",
      "parisb",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: RPC method eth_getBlockByHash (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "get_block_by_hash",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisb",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: RPC method eth_getBlockReceipts (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "get_block_receipts",
      "latest",
      "node",
      "parisc",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: RPC method eth_getTransactionCount (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "get_transaction_count",
      "latest",
      "node",
      "parisc",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: RPC method eth_getTransactionCount in batch (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "get_transaction_count_as_batch",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisb",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: RPC batch requests (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "batch",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: RPC batch requests (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "batch",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisb",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: RPC eth_coinbase (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "coinbase",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisc",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Block size is greater than zero (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "block",
      "client",
      "evm",
      "evm_node",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisc",
      "proxy",
      "size",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Check L2 transfers are applied (sequencer, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "l2_transfer",
      "node",
      "parisc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Check L2 chunked transfers are applied (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "chunked",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "l2_transfer",
      "node",
      "parisb",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Check RPC web3_clientVersion (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "client_version",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisb",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Check RPC web3_sha3 (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "proxy",
      "rpc",
      "sha3",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Check RPC web3_sha3 (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisb",
      "rpc",
      "sequencer",
      "sha3",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: A block can be simulated in the rollup node (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "proxy",
      "simulate",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Check `eth_getBlockByNumber` with full blocks returns the correct informations (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "full_blocks",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisb",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Check `eth_call.to` input can be null (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "eth_call",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "null",
      "parisc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Check eth_call with contract creation (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "contract_create",
      "eth_call",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisb",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Check L2 contract deployment (proxy, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "l2_deploy",
      "latest",
      "node",
      "parisb",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Check L2 contract call (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "l2_call",
      "l2_deploy",
      "node",
      "parisc",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Check L2 erc20 contract deployment (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "erc20",
      "evm",
      "evm_node",
      "l2_call",
      "l2_deploy",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisb",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Check that a contract containing PUSH0 can successfully be deployed. (proxy, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "deploy",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisc",
      "proxy",
      "shanghai",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Check blocks can contain more than 64 transactions (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "bigger_blocks",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Call a view (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "eth_call",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisb",
      "proxy",
      "simulate",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Call a view through an ethereum client (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "eth_call",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "proxy",
      "simulate",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Call a view through an ethereum client (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "eth_call",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisb",
      "sequencer",
      "simulate",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: eth_call with a large amount of data (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "eth_call",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "large",
      "node",
      "parisb",
      "proxy",
      "simulate",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: eth_call with input instead of data (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "eth_call",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "input",
      "node",
      "parisc",
      "proxy",
      "simulate",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: eth_call with input instead of data (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "eth_call",
      "evm",
      "evm_kernel",
      "evm_node",
      "input",
      "latest",
      "node",
      "parisb",
      "sequencer",
      "simulate",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Deposit and withdraw tez (proxy, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "deposit",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisc",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "withdraw"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: eth_estimateGas for contract creation (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "eth_estimategas",
      "evm",
      "evm_node",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisb",
      "proxy",
      "simulate",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: eth_estimateGas allows additional fields (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "eth_estimategas",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisc",
      "remix",
      "sequencer",
      "simulate",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Ensure EVM node returns appropriate hash for any given transactions. (proxy, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisb",
      "proxy",
      "raw_tx",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "tx_hash"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Not being able to prepay a transaction leads to it not being included. (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "inclusion",
      "node",
      "parisb",
      "prepay",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Not being able to prepay a transaction that was included leads to it not being injected. (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "injection",
      "node",
      "parisc",
      "prepay",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Not being able to prepay a transaction that was included leads to it not being injected. (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "injection",
      "latest",
      "node",
      "parisb",
      "prepay",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Returns an error if the nonce is too low (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "nonce",
      "parisc",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Returns an error if the nonce is too low (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "nonce",
      "parisb",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Accepts transactions with nonce too high. (proxy, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "nonce",
      "parisb",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: RPC method eth_getTransactionByBlockHashAndIndex (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "block_hash_and_index",
      "client",
      "evm",
      "evm_node",
      "get_transaction_by",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisc",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: RPC method eth_getTransactionByBlockNumberAndIndex (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "block_number_and_index",
      "client",
      "evm",
      "evm_node",
      "get_transaction_by",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisb",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: RPC method eth_getTransactionByHash (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "get_transaction_by",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "transaction_by_hash"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: RPC method eth_getTransactionByHash (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "get_transaction_by",
      "latest",
      "node",
      "parisb",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "transaction_by_hash"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: RPC methods eth_getBlockTransactionCountByHash and eth_getBlockTransactionCountByNumber (sequencer, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "get_block_transaction_count_by",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: RPC methods eth_getUncleCountByBlockHash and eth_getUncleCountByBlockNumber (sequencer, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "get_uncle_count_by_block",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisc",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: RPC methods eth_getUncleByBlockHashAndIndex and eth_getUncleByBlockNumberAndIndex (proxy, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "get_uncle_by_block_arg_and_index",
      "latest",
      "node",
      "parisc",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: RPC methods eth_getUncleByBlockHashAndIndex and eth_getUncleByBlockNumberAndIndex (sequencer, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "get_uncle_by_block_arg_and_index",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisb",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Simulation is EIP2200 resilient (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "eip2200",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "loop",
      "node",
      "parisb",
      "proxy",
      "simulation",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: RPC methods eth_gasPrice (sequencer, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "gas_price",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisb",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: RPC methods eth_getStorageAt (proxy, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "get_storage_at",
      "latest",
      "node",
      "parisb",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Accounts have a unique index (proxy, latest, without dal)",
    "tags": [
      "accounts",
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "index",
      "latest",
      "node",
      "parisc",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Can submit many transactions. (sequencer, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisc",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "tx_nonce"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Tx with nonce too high are not included without previous transactions. (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "no_inclusion",
      "node",
      "parisb",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "tx_nonce"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Originate EVM kernel with installer and dump PVM state (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisc",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Check getLogs RPC (sequencer, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "get_logs",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisb",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Check that log index is correctly computed (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "log_index",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisc",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Transactions can be replaced (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisc",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "tx_pool"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Check L2 nested create (sequencer, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "inter_contract",
      "l2_create",
      "l2_deploy",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Check L2 revert returns unused gas (sequencer, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisb",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Check L2 create collision (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "collision",
      "evm",
      "evm_kernel",
      "evm_node",
      "l2_create",
      "latest",
      "node",
      "parisc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Check that an L2 call to a smart contract with an intermediate call that runs out of gas still succeeds. (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "call",
      "client",
      "evm",
      "evm_node",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "out_of_gas",
      "parisb",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Check ether wallet functions correctly (sequencer, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "l2_call",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "wallet"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: estimateGas works with out of ticks (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "estimate_gas",
      "evm",
      "evm_node",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "out_of_ticks",
      "parisc",
      "proxy",
      "simulate",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Check that the node will reject a transaction that wouldn't fit in a kernel run. (sequencer, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "loop",
      "node",
      "out_of_ticks",
      "parisb",
      "rejected",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Check that the `eth_estimateGas` cannot timeout. (proxy, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "estimate_gas",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisb",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "timeout"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Check that the node propagates reverts reason correctly. (sequencer, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisc",
      "revert",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Block gas limit returns 2^50. (proxy, mainnet, without dal)",
    "tags": [
      "admin_client",
      "block",
      "client",
      "evm",
      "evm_node",
      "gas_limit",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisb",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Outbox size limit resilience (slow) (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "outbox",
      "parisb",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "withdraw"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Check that the kernel submit a whitelist update message when flag is set. (proxy, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisc",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "update",
      "whitelist"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Check that the kernel submit a whitelist update message when flag is set. (sequencer, mainnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "mainnet",
      "mainnet_evm_kernel",
      "node",
      "parisb",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "update",
      "whitelist"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: RPC methods eth_maxPriorityFeePerGas (sequencer, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "max_priority_fee_per_gas",
      "node",
      "parisb",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: Unsupported RPC method (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "node",
      "parisc",
      "proxy",
      "rpc",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "unsupported"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Unsupported RPC method (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "latest",
      "node",
      "parisb",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "unsupported"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: Transaction pool can read the legacy encodings of the validation (proxy, ghostnet, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_node",
      "ghostnet",
      "ghostnet_evm_kernel",
      "legacy",
      "node",
      "parisb",
      "proxy",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node",
      "txpool",
      "validation"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisb: RPC methods eth_feeHistory (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "fee_history",
      "latest",
      "node",
      "parisb",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "etherlink/tezt/tests/evm_rollup.ml",
    "title": "Parisc: RPC methods eth_feeHistory with high blockCount (sequencer, latest, without dal)",
    "tags": [
      "admin_client",
      "block_count",
      "client",
      "evm",
      "evm_kernel",
      "evm_node",
      "fee_history",
      "latest",
      "node",
      "parisc",
      "rpc",
      "sequencer",
      "slow",
      "smart_rollup_installer",
      "smart_rollup_node"
    ]
  },
  {
    "file": "brassaia/test/brassaia/generic-key/test.ml",
    "title": "brassaia/generic-key: SLOW_store_offset (Wide nodes)",
    "tags": [
      "alcotezt",
      "slow"
    ]
  }
]