#!/bin/sh

set -e

# shellcheck disable=SC1091
. /usr/share/debconf/confmodule

db_version 2.0

if [ -e /etc/default/octez-node ]; then
  . /etc/default/octez-node
  TEZOS_HOME=$(dirname $DATADIR)
fi

# work directory to store temporary files associated to this package
mkdir -p /run/octez-node

# systemctl should not be called directly. use this
# wrapper script if available
debsystemctl=$(command -v deb-systemd-invoke || echo systemctl)

case "${1}" in
configure)
  # if $2 is empty, then we're doing a fresh install or
  # if $DPKG_RUNNING_VERSION" is empty a reconfigure
  # Otherwise we're upgrading
  if [ -z "${2:-}" ] || [ -z "$DPKG_RUNNING_VERSION" ]; then
    # these are the defaults for the package and only used
    # in the "configure" stage.

    # shellcheck disable=SC2119
    if ! id "tezos" > /dev/null 2>&1; then
      adduser --quiet --disabled-password \
        --home "$TEZOS_HOME" --shell /bin/bash \
        --gecos "admin user for octez" tezos
    else
      # setup data directory in case the tezos user was already present
      if [ ! -d "$TEZOS_HOME" ]; then
        mkdir -p "$TEZOS_HOME"
        chown tezos "$TEZOS_HOME"
      fi
    fi

    # setup log directory
    if [ ! -d /var/log/tezos ]; then
      mkdir -p /var/log/tezos
      chown tezos /var/log/tezos
    fi

    db_get octez-node/configure
    case "$RET" in
    false)
      db_get octez-node/network
      NETWORK=${RET}
      db_get octez-node/history-mode
      HISTORY_MODE=${RET}

      if [ ! -e "$DATADIR/config.json" ]; then
        su tezos -c "/usr/bin/octez-node config init --data-dir=$DATADIR            --network=\"$NETWORK\" \
              --history-mode=\"$HISTORY_MODE\" \
              --net-addr=\"[::]:9732\" \
              --rpc-addr=\"127.0.0.1:8732\""
      fi
      ;;
    true)
      echo "Skipping initialization."
      ;;
    esac
  else
    echo "Upgrading octez-node from version $2 ( postinst )"
    # The configure script is called with the version of the old
    # package in case of upgrade.
    #
    # In a testing environment next packages version have an
    # epoch `1:<version>` to distinguish them from the current packages
    #
    # We check if the version string of the old package does NOT contain
    # an epoch (no colon)
    case "$2" in
    1:*)
      # If the version of the package contains the epoch `1:*` then
      # we are upgrading a next package to a next package in a testing
      # environment. We do nothing.
      : nop
      ;;
    *)
      # In that case, we are upgrading from a current package to a
      # next package. It can be a released package as well as a dev package.
      # This logic is going to be removed after making the next packages
      # official.
      echo "octez-node: upgrade warning from current"
      db_set octez-node/configure "yes"
      if [ -e "$TEZOS_HOME/.tezos-node/config.json" ]; then
        db_input high octez-node/upgrade_note_current || true
        #shellcheck disable=SC2119
        db_go || true
      fi
      ;;
    esac
  fi

  ;;
*)
  : noop
  ;;
esac

# Check if the daemon was running and re-start it in this case
if [ -f /var/lib/octez-node/daemon_was_running ] &&
  [ "$(cat /var/lib/octez-node/daemon_was_running)" = "1" ]; then
  # Start the daemon if it was running
  $debsystemctl daemon-reload
  $debsystemctl start octez-node.service
  rm /var/lib/octez-node/daemon_was_running
fi

#DEBHELPER#
